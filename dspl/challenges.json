[
  {
    "index": 0,
    "name": "1548_C",
    "description": "Three little pigs from all over the world are meeting for a convention! Every minute, a triple of 3 new pigs arrives on the convention floor. After the n-th minute, the convention ends.\n\nThe big bad wolf has learned about this convention, and he has an attack plan. At some minute in the convention, he will arrive and eat exactly x pigs. Then he will get away.\n\nThe wolf wants Gregor to help him figure out the number of possible attack plans that involve eating exactly x pigs for various values of x (1 ≤ x ≤ 3n). Two attack plans are considered different, if they occur at different times or if the sets of little pigs to eat are different.\n\nNote that all queries are independent, that is, the wolf does not eat the little pigs, he only makes plans!\n\nInput\n\nThe first line of input contains two integers n and q (1 ≤ n ≤ 10^6, 1 ≤ q ≤ 2⋅ 10^5), the number of minutes the convention lasts and the number of queries the wolf asks.\n\nEach of the next q lines contains a single integer x_i (1 ≤ x_i ≤ 3n), the number of pigs the wolf will eat in the i-th query.\n\nOutput\n\nYou should print q lines, with line i representing the number of attack plans if the wolf wants to eat x_i pigs. Since each query answer can be large, output each answer modulo 10^9+7.\n\nExamples\n\nInput\n\n\n2 3\n1\n5\n6\n\n\nOutput\n\n\n9\n6\n1\n\n\nInput\n\n\n5 4\n2\n4\n6\n8\n\n\nOutput\n\n\n225\n2001\n6014\n6939\n\nNote\n\nIn the example test, n=2. Thus, there are 3 pigs at minute 1, and 6 pigs at minute 2. There are three queries: x=1, x=5, and x=6.\n\nIf the wolf wants to eat 1 pig, he can do so in 3+6=9 possible attack plans, depending on whether he arrives at minute 1 or 2.\n\nIf the wolf wants to eat 5 pigs, the wolf cannot arrive at minute 1, since there aren't enough pigs at that time. Therefore, the wolf has to arrive at minute 2, and there are 6 possible attack plans.\n\nIf the wolf wants to eat 6 pigs, his only plan is to arrive at the end of the convention and devour everybody.\n\nRemember to output your answers modulo 10^9+7!",
    "public_tests": [
      {
        "input": [
          "2 3",
          "1",
          "5",
          "6"
        ],
        "output": [
          "9",
          "6",
          "1"
        ]
      },
      {
        "input": [
          "5 4",
          "2",
          "4",
          "6",
          "8"
        ],
        "output": [
          "225",
          "2001",
          "6014",
          "6939"
        ]
      }
    ]
  },
  {
    "index": 1,
    "name": "1548_D1",
    "description": "This is the easy version of the problem. The only difference from the hard version is that in this version all coordinates are even.\n\nThere are n fence-posts at distinct coordinates on a plane. It is guaranteed that no three fence posts lie on the same line.\n\nThere are an infinite number of cows on the plane, one at every point with integer coordinates.\n\nGregor is a member of the Illuminati, and wants to build a triangular fence, connecting 3 distinct existing fence posts. A cow strictly inside the fence is said to be enclosed. If there are an odd number of enclosed cows and the area of the fence is an integer, the fence is said to be interesting.\n\nFind the number of interesting fences.\n\nInput\n\nThe first line contains the integer n (3 ≤ n ≤ 6000), the number of fence posts which Gregor can choose to form the vertices of a fence.\n\nEach of the next n line contains two integers x and y (0 ≤ x,y ≤ 10^7, x and y are even), where (x,y) is the coordinate of a fence post. All fence posts lie at distinct coordinates. No three fence posts are on the same line.\n\nOutput\n\nPrint a single integer, the number of interesting fences. Two fences are considered different if they are constructed with a different set of three fence posts.\n\nExamples\n\nInput\n\n\n3\n0 0\n2 0\n0 4\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n0 0\n2 16\n30 14\n4 6\n2 10\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example, there is only 1 fence. That fence is interesting since its area is 4 and there is 1 enclosed cow, marked in red.\n\n<image>\n\nIn the second example, there are 3 interesting fences. \n\n  * (0,0) — (30,14) — (2,10) \n  * (2,16) — (30,14) — (2,10) \n  * (30,14) — (4,6) — (2,10) ",
    "public_tests": [
      {
        "input": [
          "5",
          "0 0",
          "2 16",
          "30 14",
          "4 6",
          "2 10"
        ],
        "output": [
          "3"
        ]
      },
      {
        "input": [
          "3",
          "0 0",
          "2 0",
          "0 4"
        ],
        "output": [
          "1"
        ]
      }
    ]
  },
  {
    "index": 2,
    "name": "1548_D2",
    "description": "This is the hard version of the problem. The only difference from the easy version is that in this version the coordinates can be both odd and even.\n\nThere are n fence-posts at distinct coordinates on a plane. It is guaranteed that no three fence posts lie on the same line.\n\nThere are an infinite number of cows on the plane, one at every point with integer coordinates.\n\nGregor is a member of the Illuminati, and wants to build a triangular fence, connecting 3 distinct existing fence posts. A cow strictly inside the fence is said to be enclosed. If there are an odd number of enclosed cows and the area of the fence is an integer, the fence is said to be interesting.\n\nFind the number of interesting fences.\n\nInput\n\nThe first line contains the integer n (3 ≤ n ≤ 6000), the number of fence posts which Gregor can choose to form the vertices of a fence.\n\nEach of the next n line contains two integers x and y (0 ≤ x,y ≤ 10^7, where (x,y) is the coordinate of a fence post. All fence posts lie at distinct coordinates. No three fence posts are on the same line.\n\nOutput\n\nPrint a single integer, the number of interesting fences. Two fences are considered different if they are constructed with a different set of three fence posts.\n\nExamples\n\nInput\n\n\n3\n0 0\n2 0\n0 4\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n1 8\n0 6\n5 2\n5 6\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n10\n170 59\n129 54\n5 98\n129 37\n58 193\n154 58\n24 3\n13 138\n136 144\n174 150\n\n\nOutput\n\n\n29\n\nNote\n\nIn the first example, there is only 1 fence. That fence is interesting since its area is 4 and there is 1 enclosed cow, marked in red.\n\n<image>\n\nIn the second example, there are 4 possible fences. Only one of them is interesting however. That fence has an area of 8 and 5 enclosed cows.\n\n<image>",
    "public_tests": [
      {
        "input": [
          "10",
          "170 59",
          "129 54",
          "5 98",
          "129 37",
          "58 193",
          "154 58",
          "24 3",
          "13 138",
          "136 144",
          "174 150"
        ],
        "output": [
          "29"
        ]
      },
      {
        "input": [
          "3",
          "0 0",
          "2 0",
          "0 4"
        ],
        "output": [
          "1"
        ]
      },
      {
        "input": [
          "4",
          "1 8",
          "0 6",
          "5 2",
          "5 6"
        ],
        "output": [
          "1"
        ]
      }
    ]
  },
  {
    "index": 3,
    "name": "1548_E",
    "description": "Two painters, Amin and Benj, are repainting Gregor's living room ceiling! The ceiling can be modeled as an n × m grid.\n\nFor each i between 1 and n, inclusive, painter Amin applies a_i layers of paint to the entire i-th row. For each j between 1 and m, inclusive, painter Benj applies b_j layers of paint to the entire j-th column. Therefore, the cell (i,j) ends up with a_i+b_j layers of paint.\n\nGregor considers the cell (i,j) to be badly painted if a_i+b_j ≤ x. Define a badly painted region to be a maximal connected component of badly painted cells, i. e. a connected component of badly painted cells such that all adjacent to the component cells are not badly painted. Two cells are considered adjacent if they share a side.\n\nGregor is appalled by the state of the finished ceiling, and wants to know the number of badly painted regions.\n\nInput\n\nThe first line contains three integers n, m and x (1 ≤ n,m ≤ 2⋅ 10^5, 1 ≤ x ≤ 2⋅ 10^5) — the dimensions of Gregor's ceiling, and the maximum number of paint layers in a badly painted cell.\n\nThe second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 2⋅ 10^5), the number of paint layers Amin applies to each row.\n\nThe third line contains m integers b_1, b_2, …, b_m (1 ≤ b_j ≤ 2⋅ 10^5), the number of paint layers Benj applies to each column.\n\nOutput\n\nPrint a single integer, the number of badly painted regions.\n\nExamples\n\nInput\n\n\n3 4 11\n9 8 5\n10 6 7 2\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 4 12\n9 8 5\n10 6 7 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n3 3 2\n1 2 1\n1 2 1\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n5 23 6\n1 4 3 5 2\n2 3 1 6 1 5 5 6 1 3 2 6 2 3 1 6 1 4 1 6 1 5 5\n\n\nOutput\n\n\n6\n\nNote\n\nThe diagram below represents the first example. The numbers to the left of each row represent the list a, and the numbers above each column represent the list b. The numbers inside each cell represent the number of paint layers in that cell.\n\nThe colored cells correspond to badly painted cells. The red and blue cells respectively form 2 badly painted regions.\n\n<image>",
    "public_tests": [
      {
        "input": [
          "3 4 12",
          "9 8 5",
          "10 6 7 2"
        ],
        "output": [
          "1"
        ]
      },
      {
        "input": [
          "3 4 11",
          "9 8 5",
          "10 6 7 2"
        ],
        "output": [
          "2"
        ]
      },
      {
        "input": [
          "5 23 6",
          "1 4 3 5 2",
          "2 3 1 6 1 5 5 6 1 3 2 6 2 3 1 6 1 4 1 6 1 5 5"
        ],
        "output": [
          "6"
        ]
      },
      {
        "input": [
          "3 3 2",
          "1 2 1",
          "1 2 1"
        ],
        "output": [
          "4"
        ]
      }
    ]
  },
  {
    "index": 4,
    "name": "1549_A",
    "description": "Gregor is learning about RSA cryptography, and although he doesn't understand how RSA works, he is now fascinated with prime numbers and factoring them.\n\nGregor's favorite prime number is P. Gregor wants to find two bases of P. Formally, Gregor is looking for two integers a and b which satisfy both of the following properties.\n\n  * P mod a = P mod b, where x mod y denotes the remainder when x is divided by y, and \n  * 2 ≤ a < b ≤ P. \n\n\n\nHelp Gregor find two bases of his favorite prime number!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000).\n\nEach subsequent line contains the integer P (5 ≤ P ≤ {10}^9), with P guaranteed to be prime.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of two integers a and b (2 ≤ a < b ≤ P). If there are multiple possible solutions, print any.\n\nExample\n\nInput\n\n\n2\n17\n5\n\n\nOutput\n\n\n3 5\n2 4\n\nNote\n\nThe first query is P=17. a=3 and b=5 are valid bases in this case, because 17 mod 3 = 17 mod 5 = 2. There are other pairs which work as well.\n\nIn the second query, with P=5, the only solution is a=2 and b=4.",
    "public_tests": [
      {
        "input": [
          "2",
          "17",
          "5"
        ],
        "output": [
          "2 16",
          "2 4"
        ]
      }
    ]
  },
  {
    "index": 5,
    "name": "1549_B",
    "description": "There is a chessboard of size n by n. The square in the i-th row from top and j-th column from the left is labelled (i,j).\n\nCurrently, Gregor has some pawns in the n-th row. There are also enemy pawns in the 1-st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up (from (i,j) to (i-1,j)) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from (i,j) to either (i-1,j-1) or (i-1,j+1)) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.\n\nGregor wants to know what is the maximum number of his pawns that can reach row 1?\n\nNote that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor's pawn reaches row 1, it is stuck and cannot make any further moves.\n\nInput\n\nThe first line of the input contains one integer t (1≤ t≤ 2⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of three lines. The first line contains a single integer n (2≤ n≤ 2⋅{10}^{5}) — the size of the chessboard.\n\nThe second line consists of a string of binary digits of length n, where a 1 in the i-th position corresponds to an enemy pawn in the i-th cell from the left, and 0 corresponds to an empty cell.\n\nThe third line consists of a string of binary digits of length n, where a 1 in the i-th position corresponds to a Gregor's pawn in the i-th cell from the left, and 0 corresponds to an empty cell.\n\nIt is guaranteed that the sum of n across all test cases is less than 2⋅{10}^{5}.\n\nOutput\n\nFor each test case, print one integer: the maximum number of Gregor's pawns which can reach the 1-st row.\n\nExample\n\nInput\n\n\n4\n3\n000\n111\n4\n1111\n1111\n3\n010\n010\n5\n11001\n00000\n\n\nOutput\n\n\n3\n4\n0\n0\n\nNote\n\nIn the first example, Gregor can simply advance all 3 of his pawns forward. Thus, the answer is 3.\n\nIn the second example, Gregor can guarantee that all 4 of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \"game\"!\n\n<image>\n\nIn the third example, Gregor's only pawn is stuck behind the enemy pawn, and cannot reach the end.\n\nIn the fourth example, Gregor has no pawns, so the answer is clearly 0.",
    "public_tests": [
      {
        "input": [
          "4",
          "3",
          "000",
          "111",
          "4",
          "1111",
          "1111",
          "3",
          "010",
          "010",
          "5",
          "11001",
          "00000"
        ],
        "output": [
          "3",
          "4",
          "0",
          "0"
        ]
      }
    ]
  },
  {
    "index": 6,
    "name": "1549_C",
    "description": "When you play the game of thrones, you win, or you die. There is no middle ground.\n\nCersei Lannister, A Game of Thrones by George R. R. Martin\n\nThere are n nobles, numbered from 1 to n. Noble i has a power of i. There are also m \"friendships\". A friendship between nobles a and b is always mutual.\n\nA noble is defined to be vulnerable if both of the following conditions are satisfied: \n\n  * the noble has at least one friend, and \n  * all of that noble's friends have a higher power. \n\n\n\nYou will have to process the following three types of queries. \n\n  1. Add a friendship between nobles u and v. \n  2. Remove a friendship between nobles u and v. \n  3. Calculate the answer to the following process. \n\n\n\nThe process: all vulnerable nobles are simultaneously killed, and all their friendships end. Then, it is possible that new nobles become vulnerable. The process repeats itself until no nobles are vulnerable. It can be proven that the process will end in finite time. After the process is complete, you need to calculate the number of remaining nobles.\n\nNote that the results of the process are not carried over between queries, that is, every process starts with all nobles being alive!\n\nInput\n\nThe first line contains the integers n and m (1 ≤ n ≤ 2⋅ 10^5, 0 ≤ m ≤ 2⋅ 10^5) — the number of nobles and number of original friendships respectively.\n\nThe next m lines each contain the integers u and v (1 ≤ u,v ≤ n, u ≠ v), describing a friendship. No friendship is listed twice.\n\nThe next line contains the integer q (1 ≤ q ≤ 2⋅ {10}^{5}) — the number of queries. \n\nThe next q lines contain the queries themselves, each query has one of the following three formats. \n\n  * 1 u v (1 ≤ u,v ≤ n, u ≠ v) — add a friendship between u and v. It is guaranteed that u and v are not friends at this moment. \n  * 2 u v (1 ≤ u,v ≤ n, u ≠ v) — remove a friendship between u and v. It is guaranteed that u and v are friends at this moment. \n  * 3 — print the answer to the process described in the statement. \n\nOutput\n\nFor each type 3 query print one integer to a new line. It is guaranteed that there will be at least one type 3 query.\n\nExamples\n\nInput\n\n\n4 3\n2 1\n1 3\n3 4\n4\n3\n1 2 3\n2 3 1\n3\n\n\nOutput\n\n\n2\n1\n\n\nInput\n\n\n4 3\n2 3\n3 4\n4 1\n1\n3\n\n\nOutput\n\n\n1\n\nNote\n\nConsider the first example. In the first type 3 query, we have the diagram below.\n\nIn the first round of the process, noble 1 is weaker than all of his friends (2 and 3), and is thus killed. No other noble is vulnerable in round 1. In round 2, noble 3 is weaker than his only friend, noble 4, and is therefore killed. At this point, the process ends, and the answer is 2.\n\n<image>\n\nIn the second type 3 query, the only surviving noble is 4.\n\nThe second example consists of only one type 3 query. In the first round, two nobles are killed, and in the second round, one noble is killed. The final answer is 1, since only one noble survives.\n\n<image>",
    "public_tests": [
      {
        "input": [
          "4 3",
          "2 1",
          "1 3",
          "3 4",
          "4",
          "3",
          "1 2 3",
          "2 3 1",
          "3"
        ],
        "output": [
          "2",
          "1"
        ]
      },
      {
        "input": [
          "4 3",
          "2 3",
          "3 4",
          "4 1",
          "1",
          "3"
        ],
        "output": [
          "1"
        ]
      }
    ]
  },
  {
    "index": 7,
    "name": "1549_D",
    "description": "British mathematician John Littlewood once said about Indian mathematician Srinivasa Ramanujan that \"every positive integer was one of his personal friends.\"\n\nIt turns out that positive integers can also be friends with each other! You are given an array a of distinct positive integers. \n\nDefine a subarray a_i, a_{i+1}, …, a_j to be a friend group if and only if there exists an integer m ≥ 2 such that a_i mod m = a_{i+1} mod m = … = a_j mod m, where x mod y denotes the remainder when x is divided by y.\n\nYour friend Gregor wants to know the size of the largest friend group in a.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 2⋅ 10^4). \n\nEach test case begins with a line containing the integer n (1 ≤ n ≤ 2 ⋅ 10^5), the size of the array a.\n\nThe next line contains n positive integers a_1, a_2, …, a_n (1 ≤ a_i ≤ {10}^{18}), representing the contents of the array a. It is guaranteed that all the numbers in a are distinct.\n\nIt is guaranteed that the sum of n over all test cases is less than 2⋅ 10^5.\n\nOutput\n\nYour output should consist of t lines. Each line should consist of a single integer, the size of the largest friend group in a.\n\nExample\n\nInput\n\n\n4\n5\n1 5 2 4 6\n4\n8 2 5 10\n2\n1000 2000\n8\n465 55 3 54 234 12 45 78\n\n\nOutput\n\n\n3\n3\n2\n6\n\nNote\n\nIn the first test case, the array is [1,5,2,4,6]. The largest friend group is [2,4,6], since all those numbers are congruent to 0 modulo 2, so m=2.\n\nIn the second test case, the array is [8,2,5,10]. The largest friend group is [8,2,5], since all those numbers are congruent to 2 modulo 3, so m=3.\n\nIn the third case, the largest friend group is [1000,2000]. There are clearly many possible values of m that work.",
    "public_tests": [
      {
        "input": [
          "4",
          "5",
          "1 5 2 4 6",
          "4",
          "8 2 5 10",
          "2",
          "1000 2000",
          "8",
          "465 55 3 54 234 12 45 78"
        ],
        "output": [
          "3",
          "3",
          "2",
          "6"
        ]
      }
    ]
  },
  {
    "index": 8,
    "name": "1551_A",
    "description": "Polycarp must pay exactly n burles at the checkout. He has coins of two nominal values: 1 burle and 2 burles. Polycarp likes both kinds of coins equally. So he doesn't want to pay with more coins of one type than with the other.\n\nThus, Polycarp wants to minimize the difference between the count of coins of 1 burle and 2 burles being used. Help him by determining two non-negative integer values c_1 and c_2 which are the number of coins of 1 burle and 2 burles, respectively, so that the total value of that number of coins is exactly n (i. e. c_1 + 2 ⋅ c_2 = n), and the absolute value of the difference between c_1 and c_2 is as little as possible (i. e. you must minimize |c_1-c_2|).\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line. This line contains one integer n (1 ≤ n ≤ 10^9) — the number of burles to be paid by Polycarp.\n\nOutput\n\nFor each test case, output a separate line containing two integers c_1 and c_2 (c_1, c_2 ≥ 0) separated by a space where c_1 is the number of coins of 1 burle and c_2 is the number of coins of 2 burles. If there are multiple optimal solutions, print any one.\n\nExample\n\nInput\n\n\n6\n1000\n30\n1\n32\n1000000000\n5\n\n\nOutput\n\n\n334 333\n10 10\n1 0\n10 11\n333333334 333333333\n1 2\n\nNote\n\nThe answer for the first test case is \"334 333\". The sum of the nominal values of all coins is 334 ⋅ 1 + 333 ⋅ 2 = 1000, whereas |334 - 333| = 1. One can't get the better value because if |c_1 - c_2| = 0, then c_1 = c_2 and c_1 ⋅ 1 + c_1 ⋅ 2 = 1000, but then the value of c_1 isn't an integer.\n\nThe answer for the second test case is \"10 10\". The sum of the nominal values is 10 ⋅ 1 + 10 ⋅ 2 = 30 and |10 - 10| = 0, whereas there's no number having an absolute value less than 0.",
    "public_tests": [
      {
        "input": [
          "6",
          "1000",
          "30",
          "1",
          "32",
          "1000000000",
          "5"
        ],
        "output": [
          "334 333",
          "10 10",
          "1 0",
          "10 11",
          "333333334 333333333",
          "1 2"
        ]
      }
    ]
  },
  {
    "index": 9,
    "name": "1551_B1",
    "description": "This is a simplified version of the problem B2. Perhaps you should read the problem B2 before you start solving B1.\n\nPaul and Mary have a favorite string s which consists of lowercase letters of the Latin alphabet. They want to paint it using pieces of chalk of two colors: red and green. Let's call a coloring of a string wonderful if the following conditions are met:\n\n  1. each letter of the string is either painted in exactly one color (red or green) or isn't painted; \n  2. each two letters which are painted in the same color are different; \n  3. the number of letters painted in red is equal to the number of letters painted in green; \n  4. the number of painted letters of this coloring is maximum among all colorings of the string which meet the first three conditions. \n\n\n\nE. g. consider a string s equal to \"kzaaa\". One of the wonderful colorings of the string is shown in the figure.\n\n<image> The example of a wonderful coloring of the string \"kzaaa\".\n\nPaul and Mary want to learn by themselves how to find a wonderful coloring of the string. But they are very young, so they need a hint. Help them find k — the number of red (or green, these numbers are equal) letters in a wonderful coloring.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one non-empty string s which consists of lowercase letters of the Latin alphabet. The number of characters in the string doesn't exceed 50.\n\nOutput\n\nFor each test case, output a separate line containing one non-negative integer k — the number of letters which will be painted in red in a wonderful coloring.\n\nExample\n\nInput\n\n\n5\nkzaaa\ncodeforces\narchive\ny\nxxxxxx\n\n\nOutput\n\n\n2\n5\n3\n0\n1\n\nNote\n\nThe first test case contains the string from the statement. One of the wonderful colorings is shown in the figure. There's no wonderful coloring containing 3 or more red letters because the total number of painted symbols will exceed the string's length.\n\nThe string from the second test case can be painted as follows. Let's paint the first occurrence of each of the letters \"c\", \"o\", \"e\" in red and the second ones in green. Let's paint the letters \"d\", \"f\" in red and \"r\", \"s\" in green. So every letter will be painted in red or green, hence the answer better than 5 doesn't exist.\n\nThe third test case contains the string of distinct letters, so you can paint any set of characters in red, as long as the size of this set doesn't exceed half of the size of the string and is the maximum possible.\n\nThe fourth test case contains a single letter which cannot be painted in red because there will be no letter able to be painted in green.\n\nThe fifth test case contains a string of identical letters, so there's no way to paint more than one letter in red.",
    "public_tests": [
      {
        "input": [
          "5",
          "kzaaa",
          "codeforces",
          "archive",
          "y",
          "xxxxxx"
        ],
        "output": [
          "2",
          "5",
          "3",
          "0",
          "1"
        ]
      }
    ]
  },
  {
    "index": 10,
    "name": "1551_C",
    "description": "Stephen Queen wants to write a story. He is a very unusual writer, he uses only letters 'a', 'b', 'c', 'd' and 'e'!\n\nTo compose a story, Stephen wrote out n words consisting of the first 5 lowercase letters of the Latin alphabet. He wants to select the maximum number of words to make an interesting story.\n\nLet a story be a sequence of words that are not necessarily different. A story is called interesting if there exists a letter which occurs among all words of the story more times than all other letters together.\n\nFor example, the story consisting of three words \"bac\", \"aaada\", \"e\" is interesting (the letter 'a' occurs 5 times, all other letters occur 4 times in total). But the story consisting of two words \"aba\", \"abcde\" is not (no such letter that it occurs more than all other letters in total).\n\nYou are given a sequence of n words consisting of letters 'a', 'b', 'c', 'd' and 'e'. Your task is to choose the maximum number of them to make an interesting story. If there's no way to make a non-empty story, output 0.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 5000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of the words in the sequence. Then n lines follow, each of them contains a word — a non-empty string consisting of lowercase letters of the Latin alphabet. The words in the sequence may be non-distinct (i. e. duplicates are allowed). Only the letters 'a', 'b', 'c', 'd' and 'e' may occur in the words.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^5; the sum of the lengths of all words over all test cases doesn't exceed 4 ⋅ 10^5.\n\nOutput\n\nFor each test case, output the maximum number of words that compose an interesting story. Print 0 if there's no way to make a non-empty interesting story.\n\nExample\n\nInput\n\n\n6\n3\nbac\naaada\ne\n3\naba\nabcde\naba\n2\nbaba\nbaba\n4\nab\nab\nc\nbc\n5\ncbdca\nd\na\nd\ne\n3\nb\nc\nca\n\n\nOutput\n\n\n3\n2\n0\n2\n3\n2\n\nNote\n\nIn the first test case of the example, all 3 words can be used to make an interesting story. The interesting story is \"bac aaada e\".\n\nIn the second test case of the example, the 1-st and the 3-rd words can be used to make an interesting story. The interesting story is \"aba aba\". Stephen can't use all three words at the same time.\n\nIn the third test case of the example, Stephen can't make a non-empty interesting story. So the answer is 0.\n\nIn the fourth test case of the example, Stephen can use the 3-rd and the 4-th words to make an interesting story. The interesting story is \"c bc\".",
    "public_tests": [
      {
        "input": [
          "6",
          "3",
          "bac",
          "aaada",
          "e",
          "3",
          "aba",
          "abcde",
          "aba",
          "2",
          "baba",
          "baba",
          "4",
          "ab",
          "ab",
          "c",
          "bc",
          "5",
          "cbdca",
          "d",
          "a",
          "d",
          "e",
          "3",
          "b",
          "c",
          "ca"
        ],
        "output": [
          "3",
          "2",
          "0",
          "2",
          "3",
          "2"
        ]
      }
    ]
  },
  {
    "index": 11,
    "name": "1551_D1",
    "description": "The only difference between this problem and D2 is that you don't have to provide the way to construct the answer in this problem, but you have to do it in D2.\n\nThere's a table of n × m cells (n rows and m columns). The value of n ⋅ m is even.\n\nA domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).\n\nYou need to find out whether it is possible to place nm/2 dominoes on the table so that exactly k of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.\n\nEach test case consists of a single line. The line contains three integers n, m, k (1 ≤ n,m ≤ 100, 0 ≤ k ≤ nm/2, n ⋅ m is even) — the number of rows, columns and horizontal dominoes, respectively.\n\nOutput\n\nFor each test case output \"YES\", if it is possible to place dominoes in the desired way, or \"NO\" otherwise.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n8\n4 4 2\n2 3 0\n3 2 3\n1 2 0\n2 4 2\n5 2 2\n2 17 16\n2 1 1\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO",
    "public_tests": [
      {
        "input": [
          "8",
          "4 4 2",
          "2 3 0",
          "3 2 3",
          "1 2 0",
          "2 4 2",
          "5 2 2",
          "2 17 16",
          "2 1 1"
        ],
        "output": [
          "YES",
          "YES",
          "YES",
          "NO",
          "YES",
          "NO",
          "YES",
          "NO"
        ]
      }
    ]
  },
  {
    "index": 12,
    "name": "1551_E",
    "description": "Consider a sequence of integers a_1, a_2, …, a_n. In one move, you can select any element of the sequence and delete it. After an element is deleted, all elements to the right are shifted to the left by 1 position, so there are no empty spaces in the sequence. So after you make a move, the sequence's length decreases by 1. The indices of the elements after the move are recalculated.\n\nE. g. let the sequence be a=[3, 2, 2, 1, 5]. Let's select the element a_3=2 in a move. Then after the move the sequence will be equal to a=[3, 2, 1, 5], so the 3-rd element of the new sequence will be a_3=1 and the 4-th element will be a_4=5.\n\nYou are given a sequence a_1, a_2, …, a_n and a number k. You need to find the minimum number of moves you have to make so that in the resulting sequence there will be at least k elements that are equal to their indices, i. e. the resulting sequence b_1, b_2, …, b_m will contain at least k indices i such that b_i = i.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nEach test case consists of two consecutive lines. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000). The second line contains a sequence of integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n). The numbers in the sequence are not necessarily different.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each test case output in a single line:\n\n  * -1 if there's no desired move sequence; \n  * otherwise, the integer x (0 ≤ x ≤ n) — the minimum number of the moves to be made so that the resulting sequence will contain at least k elements that are equal to their indices. \n\nExample\n\nInput\n\n\n4\n7 6\n1 1 2 3 4 5 6\n5 2\n5 1 3 2 3\n5 2\n5 5 5 5 4\n8 4\n1 2 3 3 2 2 5 5\n\n\nOutput\n\n\n1\n2\n-1\n2\n\nNote\n\nIn the first test case the sequence doesn't satisfy the desired condition, but it can be provided by deleting the first element, hence the sequence will be [1, 2, 3, 4, 5, 6] and 6 elements will be equal to their indices.\n\nIn the second test case there are two ways to get the desired result in 2 moves: the first one is to delete the 1-st and the 3-rd elements so that the sequence will be [1, 2, 3] and have 3 elements equal to their indices; the second way is to delete the 2-nd and the 3-rd elements to get the sequence [5, 2, 3] with 2 desired elements.",
    "public_tests": [
      {
        "input": [
          "4",
          "7 6",
          "1 1 2 3 4 5 6",
          "5 2",
          "5 1 3 2 3",
          "5 2",
          "5 5 5 5 4",
          "8 4",
          "1 2 3 3 2 2 5 5"
        ],
        "output": [
          "1",
          "2",
          "-1",
          "2"
        ]
      }
    ]
  },
  {
    "index": 13,
    "name": "1551_F",
    "description": "A tree is an undirected connected graph without cycles.\n\nYou are given a tree of n vertices. Find the number of ways to choose exactly k vertices in this tree (i. e. a k-element subset of vertices) so that all pairwise distances between the selected vertices are equal (in other words, there exists an integer c such that for all u, v (u ≠ v, u, v are in selected vertices) d_{u,v}=c, where d_{u,v} is the distance from u to v).\n\nSince the answer may be very large, you need to output it modulo 10^9 + 7.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Then t test cases follow.\n\nEach test case is preceded by an empty line.\n\nEach test case consists of several lines. The first line of the test case contains two integers n and k (2 ≤ k ≤ n ≤ 100) — the number of vertices in the tree and the number of vertices to be selected, respectively. Then n - 1 lines follow, each of them contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges.\n\nOutput\n\nFor each test case output in a separate line a single integer — the number of ways to select exactly k vertices so that for all pairs of selected vertices the distances between the vertices in the pairs are equal, modulo 10^9 + 7 (in other words, print the remainder when divided by 1000000007).\n\nExample\n\nInput\n\n\n3\n\n4 2\n1 2\n2 3\n2 4\n\n3 3\n1 2\n2 3\n\n5 3\n1 2\n2 3\n2 4\n4 5\n\n\nOutput\n\n\n6\n0\n1",
    "public_tests": [
      {
        "input": [
          "3",
          "",
          "4 2",
          "1 2",
          "2 3",
          "2 4",
          "",
          "3 3",
          "1 2",
          "2 3",
          "",
          "5 3",
          "1 2",
          "2 3",
          "2 4",
          "4 5"
        ],
        "output": [
          "6",
          "0",
          "1"
        ]
      }
    ]
  },
  {
    "index": 14,
    "name": "1552_A",
    "description": "A string s of length n, consisting of lowercase letters of the English alphabet, is given.\n\nYou must choose some number k between 0 and n. Then, you select k characters of s and permute them however you want. In this process, the positions of the other n-k characters remain unchanged. You have to perform this operation exactly once.\n\nFor example, if s=\"andrea\", you can choose the k=4 characters \"a_d_ea\" and permute them into \"d_e_aa\" so that after the operation the string becomes \"dneraa\".\n\nDetermine the minimum k so that it is possible to sort s alphabetically (that is, after the operation its characters appear in alphabetical order).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 40) — the length of the string.\n\nThe second line of each test case contains the string s. It is guaranteed that s contains only lowercase letters of the English alphabet.\n\nOutput\n\nFor each test case, output the minimum k that allows you to obtain a string sorted alphabetically, through the operation described above.\n\nExample\n\nInput\n\n\n4\n3\nlol\n10\ncodeforces\n5\naaaaa\n4\ndcba\n\n\nOutput\n\n\n2\n6\n0\n4\n\nNote\n\nIn the first test case, we can choose the k=2 characters \"_ol\" and rearrange them as \"_lo\" (so the resulting string is \"llo\"). It is not possible to sort the string choosing strictly less than 2 characters.\n\nIn the second test case, one possible way to sort s is to consider the k=6 characters \"_o__force_\" and rearrange them as \"_c__efoor_\" (so the resulting string is \"ccdeefoors\"). One can show that it is not possible to sort the string choosing strictly less than 6 characters.\n\nIn the third test case, string s is already sorted (so we can choose k=0 characters).\n\nIn the fourth test case, we can choose all k=4 characters \"dcba\" and reverse the whole string (so the resulting string is \"abcd\").",
    "public_tests": [
      {
        "input": [
          "4",
          "3",
          "lol",
          "10",
          "codeforces",
          "5",
          "aaaaa",
          "4",
          "dcba"
        ],
        "output": [
          "2",
          "6",
          "0",
          "4"
        ]
      }
    ]
  },
  {
    "index": 15,
    "name": "1552_B",
    "description": "The Olympic Games have just started and Federico is eager to watch the marathon race.\n\nThere will be n athletes, numbered from 1 to n, competing in the marathon, and all of them have taken part in 5 important marathons, numbered from 1 to 5, in the past. For each 1≤ i≤ n and 1≤ j≤ 5, Federico remembers that athlete i ranked r_{i,j}-th in marathon j (e.g., r_{2,4}=3 means that athlete 2 was third in marathon 4).\n\nFederico considers athlete x superior to athlete y if athlete x ranked better than athlete y in at least 3 past marathons, i.e., r_{x,j}<r_{y,j} for at least 3 distinct values of j.\n\nFederico believes that an athlete is likely to get the gold medal at the Olympics if he is superior to all other athletes.\n\nFind any athlete who is likely to get the gold medal (that is, an athlete who is superior to all other athletes), or determine that there is no such athlete.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains a single integer n (1≤ n≤ 50 000) — the number of athletes.\n\nThen n lines follow, each describing the ranking positions of one athlete.\n\nThe i-th of these lines contains the 5 integers r_{i,1},\\,r_{i,2},\\,r_{i,3},\\,r_{i,4},  r_{i,5} (1≤ r_{i,j}≤ 50 000) — the ranking positions of athlete i in the past 5 marathons. It is guaranteed that, in each of the 5 past marathons, the n athletes have distinct ranking positions, i.e., for each 1≤ j≤ 5, the n values r_{1,j},  r_{2, j},  ...,  r_{n, j} are distinct.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 50 000.\n\nOutput\n\nFor each test case, print a single integer — the number of an athlete who is likely to get the gold medal (that is, an athlete who is superior to all other athletes). If there are no such athletes, print -1. If there is more than such one athlete, print any of them.\n\nExample\n\nInput\n\n\n4\n1\n50000 1 50000 50000 50000\n3\n10 10 20 30 30\n20 20 30 10 10\n30 30 10 20 20\n3\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n6\n9 5 3 7 1\n7 4 1 6 8\n5 6 7 3 2\n6 7 8 8 6\n4 2 2 4 5\n8 3 6 9 4\n\n\nOutput\n\n\n1\n-1\n1\n5\n\nNote\n\nExplanation of the first test case: There is only one athlete, therefore he is superior to everyone else (since there is no one else), and thus he is likely to get the gold medal.\n\nExplanation of the second test case: There are n=3 athletes. \n\n  * Athlete 1 is superior to athlete 2. Indeed athlete 1 ranks better than athlete 2 in the marathons 1, 2 and 3. \n  * Athlete 2 is superior to athlete 3. Indeed athlete 2 ranks better than athlete 3 in the marathons 1, 2, 4 and 5. \n  * Athlete 3 is superior to athlete 1. Indeed athlete 3 ranks better than athlete 1 in the marathons 3, 4 and 5. \n\n\n\nExplanation of the third test case: There are n=3 athletes. \n\n  * Athlete 1 is superior to athletes 2 and 3. Since he is superior to all other athletes, he is likely to get the gold medal. \n  * Athlete 2 is superior to athlete 3. \n  * Athlete 3 is not superior to any other athlete. \n\n\n\nExplanation of the fourth test case: There are n=6 athletes. \n\n  * Athlete 1 is superior to athletes 3, 4, 6. \n  * Athlete 2 is superior to athletes 1, 4, 6. \n  * Athlete 3 is superior to athletes 2, 4, 6. \n  * Athlete 4 is not superior to any other athlete. \n  * Athlete 5 is superior to athletes 1, 2, 3, 4, 6. Since he is superior to all other athletes, he is likely to get the gold medal. \n  * Athlete 6 is only superior to athlete 4. ",
    "public_tests": [
      {
        "input": [
          "4",
          "1",
          "50000 1 50000 50000 50000",
          "3",
          "10 10 20 30 30",
          "20 20 30 10 10",
          "30 30 10 20 20",
          "3",
          "1 1 1 1 1",
          "2 2 2 2 2",
          "3 3 3 3 3",
          "6",
          "9 5 3 7 1",
          "7 4 1 6 8",
          "5 6 7 3 2",
          "6 7 8 8 6",
          "4 2 2 4 5",
          "8 3 6 9 4"
        ],
        "output": [
          "1",
          "-1",
          "1",
          "5"
        ]
      }
    ]
  },
  {
    "index": 16,
    "name": "1552_C",
    "description": "On a circle lie 2n distinct points, with the following property: however you choose 3 chords that connect 3 disjoint pairs of points, no point strictly inside the circle belongs to all 3 chords. The points are numbered 1,   2,   ...,   2n in clockwise order.\n\nInitially, k chords connect k pairs of points, in such a way that all the 2k endpoints of these chords are distinct.\n\nYou want to draw n - k additional chords that connect the remaining 2(n - k) points (each point must be an endpoint of exactly one chord).\n\nIn the end, let x be the total number of intersections among all n chords. Compute the maximum value that x can attain if you choose the n - k chords optimally.\n\nNote that the exact position of the 2n points is not relevant, as long as the property stated in the first paragraph holds.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ n) — half the number of points and the number of chords initially drawn.\n\nThen k lines follow. The i-th of them contains two integers x_i and y_i (1 ≤ x_i,   y_i ≤ 2n, x_i ≠ y_i) — the endpoints of the i-th chord. It is guaranteed that the 2k numbers x_1,   y_1,   x_2,   y_2,   ...,   x_k,   y_k are all distinct.\n\nOutput\n\nFor each test case, output the maximum number of intersections that can be obtained by drawing n - k additional chords.\n\nExample\n\nInput\n\n\n4\n4 2\n8 2\n1 5\n1 1\n2 1\n2 0\n10 6\n14 6\n2 20\n9 10\n13 18\n15 12\n11 7\n\n\nOutput\n\n\n4\n0\n1\n14\n\nNote\n\nIn the first test case, there are three ways to draw the 2 additional chords, shown below (black chords are the ones initially drawn, while red chords are the new ones):\n\n<image>\n\nWe see that the third way gives the maximum number of intersections, namely 4.\n\nIn the second test case, there are no more chords to draw. Of course, with only one chord present there are no intersections.\n\nIn the third test case, we can make at most one intersection by drawing chords 1-3 and 2-4, as shown below:\n\n<image>",
    "public_tests": [
      {
        "input": [
          "4",
          "4 2",
          "8 2",
          "1 5",
          "1 1",
          "2 1",
          "2 0",
          "10 6",
          "14 6",
          "2 20",
          "9 10",
          "13 18",
          "15 12",
          "11 7"
        ],
        "output": [
          "4",
          "0",
          "1",
          "14"
        ]
      }
    ]
  },
  {
    "index": 17,
    "name": "1552_D",
    "description": "You are given a sequence of n integers a_1,   a_2,   ...,   a_n.\n\nDoes there exist a sequence of n integers b_1,   b_2,   ...,   b_n such that the following property holds?\n\n  * For each 1 ≤ i ≤ n, there exist two (not necessarily distinct) indices j and k (1 ≤ j,   k ≤ n) such that a_i = b_j - b_k. \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 20) — the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10).\n\nThe second line of each test case contains the n integers a_1,   ...,   a_n (-10^5 ≤ a_i ≤ 10^5).\n\nOutput\n\nFor each test case, output a line containing YES if a sequence b_1,   ...,   b_n satisfying the required property exists, and NO otherwise.\n\nExample\n\nInput\n\n\n5\n5\n4 -7 -1 5 10\n1\n0\n3\n1 10 100\n4\n-3 2 10 2\n9\n25 -171 250 174 152 242 100 -205 -258\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first test case, the sequence b = [-9,   2,   1,   3,   -2] satisfies the property. Indeed, the following holds: \n\n  * a_1 = 4 = 2 - (-2) = b_2 - b_5; \n  * a_2 = -7 = -9 - (-2) = b_1 - b_5; \n  * a_3 = -1 = 1 - 2 = b_3 - b_2; \n  * a_4 = 5 = 3 - (-2) = b_4 - b_5; \n  * a_5 = 10 = 1 - (-9) = b_3 - b_1. \n\n\n\nIn the second test case, it is sufficient to choose b = [0], since a_1 = 0 = 0 - 0 = b_1 - b_1.\n\nIn the third test case, it is possible to show that no sequence b of length 3 satisfies the property.",
    "public_tests": [
      {
        "input": [
          "5",
          "5",
          "4 -7 -1 5 10",
          "1",
          "0",
          "3",
          "1 10 100",
          "4",
          "-3 2 10 2",
          "9",
          "25 -171 250 174 152 242 100 -205 -258"
        ],
        "output": [
          "YES",
          "YES",
          "NO",
          "YES",
          "YES"
        ]
      }
    ]
  },
  {
    "index": 18,
    "name": "1552_F",
    "description": "An ant moves on the real line with constant speed of 1 unit per second. It starts at 0 and always moves to the right (so its position increases by 1 each second).\n\nThere are n portals, the i-th of which is located at position x_i and teleports to position y_i < x_i. Each portal can be either active or inactive. The initial state of the i-th portal is determined by s_i: if s_i=0 then the i-th portal is initially inactive, if s_i=1 then the i-th portal is initially active. When the ant travels through a portal (i.e., when its position coincides with the position of a portal): \n\n  * if the portal is inactive, it becomes active (in this case the path of the ant is not affected); \n  * if the portal is active, it becomes inactive and the ant is instantly teleported to the position y_i, where it keeps on moving as normal. \n\n\n\nHow long (from the instant it starts moving) does it take for the ant to reach the position x_n + 1? It can be shown that this happens in a finite amount of time. Since the answer may be very large, compute it modulo 998 244 353.\n\nInput\n\nThe first line contains the integer n (1≤ n≤ 2⋅ 10^5) — the number of portals.\n\nThe i-th of the next n lines contains three integers x_i, y_i and s_i (1≤ y_i < x_i≤ 10^9, s_i∈\\{0,1\\}) — the position of the i-th portal, the position where the ant is teleported when it travels through the i-th portal (if it is active), and the initial state of the i-th portal.\n\nThe positions of the portals are strictly increasing, that is x_1<x_2<⋅⋅⋅<x_n. It is guaranteed that the 2n integers x_1,   x_2,   ...,   x_n,   y_1,   y_2,   ...,   y_n are all distinct.\n\nOutput\n\nOutput the amount of time elapsed, in seconds, from the instant the ant starts moving to the instant it reaches the position x_n+1. Since the answer may be very large, output it modulo 998 244 353.\n\nExamples\n\nInput\n\n\n4\n3 2 0\n6 5 1\n7 4 0\n8 1 1\n\n\nOutput\n\n\n23\n\n\nInput\n\n\n1\n454971987 406874902 1\n\n\nOutput\n\n\n503069073\n\n\nInput\n\n\n5\n243385510 42245605 0\n644426565 574769163 0\n708622105 208990040 0\n786625660 616437691 0\n899754846 382774619 0\n\n\nOutput\n\n\n899754847\n\n\nInput\n\n\n5\n200000000 100000000 1\n600000000 400000000 0\n800000000 300000000 0\n900000000 700000000 1\n1000000000 500000000 0\n\n\nOutput\n\n\n3511295\n\nNote\n\nExplanation of the first sample: The ant moves as follows (a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow). $$$ 0 \\stackrel{6}{\\longrightarrow} 6 \\leadsto 5 \\stackrel{3}{\\longrightarrow} 8 \\leadsto 1 \\stackrel{2}{\\longrightarrow} 3 \\leadsto 2 \\stackrel{4}{\\longrightarrow} 6 \\leadsto 5 \\stackrel{2}{\\longrightarrow} 7 \\leadsto 4 \\stackrel{2}{\\longrightarrow} 6 \\leadsto 5 \\stackrel{4}{\\longrightarrow} 9  Notice that the total time is 6+3+2+4+2+2+4=23$$$.\n\nExplanation of the second sample: The ant moves as follows (a curvy arrow denotes a teleporting, a straight arrow denotes normal movement with speed 1 and the time spent during the movement is written above the arrow). $$$ 0 \\stackrel{454971987}{\\longrightarrow} 454971987 \\leadsto 406874902 \\stackrel{48097086}{\\longrightarrow} 454971988  Notice that the total time is 454971987+48097086=503069073$$$.\n\nExplanation of the third sample: Since all portals are initially off, the ant will not be teleported and will go straight from 0 to x_n+1=899754846+1=899754847.",
    "public_tests": [
      {
        "input": [
          "5",
          "243385510 42245605 0",
          "644426565 574769163 0",
          "708622105 208990040 0",
          "786625660 616437691 0",
          "899754846 382774619 0"
        ],
        "output": [
          "899754847"
        ]
      },
      {
        "input": [
          "5",
          "200000000 100000000 1",
          "600000000 400000000 0",
          "800000000 300000000 0",
          "900000000 700000000 1",
          "1000000000 500000000 0"
        ],
        "output": [
          "3511295"
        ]
      },
      {
        "input": [
          "4",
          "3 2 0",
          "6 5 1",
          "7 4 0",
          "8 1 1"
        ],
        "output": [
          "23"
        ]
      },
      {
        "input": [
          "1",
          "454971987 406874902 1"
        ],
        "output": [
          "503069073"
        ]
      }
    ]
  },
  {
    "index": 19,
    "name": "1552_G",
    "description": "Andrea has come up with what he believes to be a novel sorting algorithm for arrays of length n. The algorithm works as follows.\n\nInitially there is an array of n integers a_1,  a_2,  ...,  a_n. Then, k steps are executed.\n\nFor each 1≤ i≤ k, during the i-th step the subsequence of the array a with indexes j_{i,1}< j_{i,2}< ...< j_{i, q_i} is sorted, without changing the values with the remaining indexes. So, the subsequence a_{j_{i,1}},  a_{j_{i,2}},  ...,  a_{j_{i,q_i}} is sorted and all other elements of a are left untouched.\n\nAndrea, being eager to share his discovery with the academic community, sent a short paper describing his algorithm to the journal \"Annals of Sorting Algorithms\" and you are the referee of the paper (that is, the person who must judge the correctness of the paper). You must decide whether Andrea's algorithm is correct, that is, if it sorts any array a of n integers.\n\nInput\n\nThe first line contains two integers n and k (1≤ n≤ 40, 0≤ k≤ 10) — the length of the arrays handled by Andrea's algorithm and the number of steps of Andrea's algorithm.\n\nThen k lines follow, each describing the subsequence considered in a step of Andrea's algorithm.\n\nThe i-th of these lines contains the integer q_i (1≤ q_i≤ n) followed by q_i integers j_{i,1},\\,j_{i,2}, ...,  j_{i,q_i} (1≤ j_{i,1}<j_{i,2}<⋅⋅⋅<j_{i,q_i}≤ n) — the length of the subsequence considered in the i-th step and the indexes of the subsequence.\n\nOutput\n\nIf Andrea's algorithm is correct print ACCEPTED, otherwise print REJECTED.\n\nExamples\n\nInput\n\n\n4 3\n3 1 2 3\n3 2 3 4\n2 1 2\n\n\nOutput\n\n\nACCEPTED\n\n\nInput\n\n\n4 3\n3 1 2 3\n3 2 3 4\n3 1 3 4\n\n\nOutput\n\n\nREJECTED\n\n\nInput\n\n\n3 4\n1 1\n1 2\n1 3\n2 1 3\n\n\nOutput\n\n\nREJECTED\n\n\nInput\n\n\n5 2\n3 2 3 4\n5 1 2 3 4 5\n\n\nOutput\n\n\nACCEPTED\n\nNote\n\nExplanation of the first sample: The algorithm consists of 3 steps. The first one sorts the subsequence [a_1, a_2, a_3], the second one sorts the subsequence [a_2, a_3, a_4], the third one sorts the subsequence [a_1,a_2]. For example, if initially a=[6, 5, 6, 3], the algorithm transforms the array as follows (the subsequence that gets sorted is highlighted in red) $$$ [{\\color{red}6},{\\color{red}5},{\\color{red}6},3] → [5, {\\color{red}6}, {\\color{red}6}, {\\color{red}3}] → [{\\color{red}5}, {\\color{red}3}, 6, 6] → [3, 5, 6, 6]  . One can prove that, for any initial array a, at the end of the algorithm the array a$$$ will be sorted.\n\nExplanation of the second sample: The algorithm consists of 3 steps. The first one sorts the subsequence [a_1, a_2, a_3], the second one sorts the subsequence [a_2, a_3, a_4], the third one sorts the subsequence [a_1,a_3,a_4]. For example, if initially a=[6, 5, 6, 3], the algorithm transforms the array as follows (the subsequence that gets sorted is highlighted in red) $$$ [{\\color{red}6},{\\color{red}5},{\\color{red}6},3] → [5, {\\color{red}6}, {\\color{red}6}, {\\color{red}3}] → [{\\color{red}5}, 3, {\\color{red}6}, {\\color{red}6}] → [5, 3, 6, 6]  . Notice that a=[6,5,6,3]$$$ is an example of an array that is not sorted by the algorithm.\n\nExplanation of the third sample: The algorithm consists of 4 steps. The first 3 steps do nothing because they sort subsequences of length 1, whereas the fourth step sorts the subsequence [a_1,a_3]. For example, if initially a=[5,6,4], the algorithm transforms the array as follows (the subsequence that gets sorted is highlighted in red) $$$ [{\\color{red}5},6,4] → [5,{\\color{red}6},4] → [5,{\\color{red}6},4] → [{\\color{red}5},6,{\\color{red}4}]→ [4,6,5]  . Notice that a=[5,6,4]$$$ is an example of an array that is not sorted by the algorithm.\n\nExplanation of the fourth sample: The algorithm consists of 2 steps. The first step sorts the subsequences [a_2,a_3,a_4], the second step sorts the whole array [a_1,a_2,a_3,a_4,a_5]. For example, if initially a=[9,8,1,1,1], the algorithm transforms the array as follows (the subsequence that gets sorted is highlighted in red) $$$ [9,{\\color{red}8},{\\color{red}1},{\\color{red}1},1] → [{\\color{red}9},{\\color{red}1},{\\color{red}1},{\\color{red}8},{\\color{red}1}] → [1,1,1,8,9]  . Since in the last step the whole array is sorted, it is clear that, for any initial array a, at the end of the algorithm the array a$$$ will be sorted.",
    "public_tests": [
      {
        "input": [
          "5 2",
          "3 2 3 4",
          "5 1 2 3 4 5"
        ],
        "output": [
          "ACCEPTED"
        ]
      },
      {
        "input": [
          "4 3",
          "3 1 2 3",
          "3 2 3 4",
          "2 1 2"
        ],
        "output": [
          "ACCEPTED"
        ]
      },
      {
        "input": [
          "3 4",
          "1 1",
          "1 2",
          "1 3",
          "2 1 3"
        ],
        "output": [
          "REJECTED"
        ]
      },
      {
        "input": [
          "4 3",
          "3 1 2 3",
          "3 2 3 4",
          "3 1 3 4"
        ],
        "output": [
          "REJECTED"
        ]
      }
    ]
  },
  {
    "index": 20,
    "name": "1552_I",
    "description": "You are the organizer of the famous \"Zurich Music Festival\". There will be n singers who will perform at the festival, identified by the integers 1, 2, ..., n. You must choose in which order they are going to perform on stage. \n\nYou have m friends and each of them has a set of favourite singers. More precisely, for each 1≤ i≤ m, the i-th friend likes singers s_{i,1},   s_{i, 2},   ..., \\,s_{i, q_i}.\n\nA friend of yours is happy if the singers he likes perform consecutively (in an arbitrary order). An ordering of the singers is valid if it makes all your friends happy.\n\nCompute the number of valid orderings modulo 998 244 353.\n\nInput\n\nThe first line contains two integers n and m (1≤ n,\\,m≤ 100) — the number of singers and the number of friends correspondingly.\n\nThe i-th of the next m lines contains the integer q_i (1≤ q_i≤ n) — the number of favorite singers of the i-th friend – followed by the q_i integers s_{i,1},   s_{i, 2},   ..., \\,s_{i, q_i} (1≤ s_{i,1}<s_{i,2}<⋅⋅⋅<s_{i,q_i}≤ n) — the indexes of his favorite singers.\n\nOutput\n\nPrint the number of valid orderings of the singers modulo 998 244 353.\n\nExamples\n\nInput\n\n\n3 1\n2 1 3\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n5 5\n2 1 2\n2 2 3\n2 3 4\n2 4 5\n2 1 5\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n100 1\n1 50\n\n\nOutput\n\n\n35305197\n\n\nInput\n\n\n5 1\n5 1 2 3 4 5\n\n\nOutput\n\n\n120\n\n\nInput\n\n\n2 5\n1 2\n1 2\n1 2\n1 1\n1 1\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n11 4\n5 4 5 7 9 11\n2 2 10\n2 9 11\n7 1 2 3 5 8 10 11\n\n\nOutput\n\n\n384\n\nNote\n\nExplanation of the first sample: There are 3 singers and only 1 friend. The friend likes the two singers 1 and 3. Thus, the 4 valid orderings are: \n\n  * 1 3 2\n  * 2 1 3\n  * 2 3 1\n  * 3 1 2\n\n\n\nExplanation of the second sample: There are 5 singers and 5 friends. One can show that no ordering is valid.\n\nExplanation of the third sample: There are 100 singers and only 1 friend. The friend likes only singer 50, hence all the 100! possible orderings are valid.\n\nExplanation of the fourth sample: There are 5 singers and only 1 friend. The friend likes all the singers, hence all the 5!=120 possible orderings are valid.",
    "public_tests": [
      {
        "input": [
          "5 1",
          "5 1 2 3 4 5"
        ],
        "output": [
          "120"
        ]
      },
      {
        "input": [
          "11 4",
          "5 4 5 7 9 11",
          "2 2 10",
          "2 9 11",
          "7 1 2 3 5 8 10 11"
        ],
        "output": [
          "384"
        ]
      },
      {
        "input": [
          "3 1",
          "2 1 3"
        ],
        "output": [
          "4"
        ]
      },
      {
        "input": [
          "100 1",
          "1 50"
        ],
        "output": [
          "35305197"
        ]
      },
      {
        "input": [
          "2 5",
          "1 2",
          "1 2",
          "1 2",
          "1 1",
          "1 1"
        ],
        "output": [
          "2"
        ]
      },
      {
        "input": [
          "5 5",
          "2 1 2",
          "2 2 3",
          "2 3 4",
          "2 4 5",
          "2 1 5"
        ],
        "output": [
          "0"
        ]
      }
    ]
  },
  {
    "index": 21,
    "name": "1553_A",
    "description": "Let's define S(x) to be the sum of digits of number x written in decimal system. For example, S(5) = 5, S(10) = 1, S(322) = 7.\n\nWe will call an integer x interesting if S(x + 1) < S(x). In each test you will be given one integer n. Your task is to calculate the number of integers x such that 1 ≤ x ≤ n and x is interesting.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — number of test cases.\n\nThen t lines follow, the i-th line contains one integer n (1 ≤ n ≤ 10^9) for the i-th test case.\n\nOutput\n\nPrint t integers, the i-th should be the answer for the i-th test case.\n\nExample\n\nInput\n\n\n5\n1\n9\n10\n34\n880055535\n\n\nOutput\n\n\n0\n1\n1\n3\n88005553\n\nNote\n\nThe first interesting number is equal to 9.",
    "public_tests": [
      {
        "input": [
          "5",
          "1",
          "9",
          "10",
          "34",
          "880055535"
        ],
        "output": [
          "0",
          "1",
          "1",
          "3",
          "88005553"
        ]
      }
    ]
  },
  {
    "index": 22,
    "name": "1553_B",
    "description": "You have a string s and a chip, which you can place onto any character of this string. \n\nAfter placing the chip, you move it to the right several (maybe zero) times, i. e. you perform the following operation several times: if the current position of the chip is i, you move it to the position i + 1. Of course, moving the chip to the right is impossible if it is already in the last position.\n\nAfter moving the chip to the right, you move it to the left several (maybe zero) times, i. e. you perform the following operation several times: if the current position of the chip is i, you move it to the position i - 1. Of course, moving the chip to the left is impossible if it is already in the first position.\n\nWhen you place a chip or move it, you write down the character where the chip ends up after your action. For example, if s is abcdef, you place the chip onto the 3-rd character, move it to the right 2 times and then move it to the left 3 times, you write down the string cdedcb.\n\nYou are given two strings s and t. Your task is to determine whether it's possible to perform the described operations with s so that you write down the string t as a result.\n\nInput\n\nThe first line contains one integer q (1 ≤ q ≤ 500) — the number of test cases.\n\nEach test case consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 500), the second line contains the string t (1 ≤ |t| ≤ 2 ⋅ |s| - 1). Both strings consist of lowercase English characters.\n\nIt is guaranteed that the sum of |s| over all test cases does not exceed 500.\n\nOutput\n\nFor each test case, print \"YES\" if you can obtain the string t by performing the process mentioned in the statement with the string s, or \"NO\" if you cannot.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n6\nabcdef\ncdedcb\naaa\naaaaa\naab\nbaaa\nab\nb\nabcdef\nabcdef\nba\nbaa\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nYES\nNO\n\nNote\n\nConsider the examples.\n\nThe first test case is described in the statement.\n\nIn the second test case, you can place the chip on the 1-st position, move it twice to the right, and then move it twice to the left.\n\nIn the fourth test case, you can place the chip on the 2-nd position, and then don't move it at all.\n\nIn the fifth test case, you can place the chip on the 1-st position, move it 5 times to the right, and then finish the process.",
    "public_tests": [
      {
        "input": [
          "6",
          "abcdef",
          "cdedcb",
          "aaa",
          "aaaaa",
          "aab",
          "baaa",
          "ab",
          "b",
          "abcdef",
          "abcdef",
          "ba",
          "baa"
        ],
        "output": [
          "Yes",
          "Yes",
          "No",
          "Yes",
          "Yes",
          "No"
        ]
      }
    ]
  },
  {
    "index": 23,
    "name": "1553_C",
    "description": "Consider a simplified penalty phase at the end of a football match.\n\nA penalty phase consists of at most 10 kicks, the first team takes the first kick, the second team takes the second kick, then the first team takes the third kick, and so on. The team that scores more goals wins; if both teams score the same number of goals, the game results in a tie (note that it goes against the usual football rules). The penalty phase is stopped if one team has scored more goals than the other team could reach with all of its remaining kicks. For example, if after the 7-th kick the first team has scored 1 goal, and the second team has scored 3 goals, the penalty phase ends — the first team cannot reach 3 goals.\n\nYou know which player will be taking each kick, so you have your predictions for each of the 10 kicks. These predictions are represented by a string s consisting of 10 characters. Each character can either be 1, 0, or ?. This string represents your predictions in the following way:\n\n  * if s_i is 1, then the i-th kick will definitely score a goal; \n  * if s_i is 0, then the i-th kick definitely won't score a goal; \n  * if s_i is ?, then the i-th kick could go either way. \n\n\n\nBased on your predictions, you have to calculate the minimum possible number of kicks there can be in the penalty phase (that means, the earliest moment when the penalty phase is stopped, considering all possible ways it could go). Note that the referee doesn't take into account any predictions when deciding to stop the penalty phase — you may know that some kick will/won't be scored, but the referee doesn't.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1 000) — the number of test cases.\n\nEach test case is represented by one line containing the string s, consisting of exactly 10 characters. Each character is either 1, 0, or ?.\n\nOutput\n\nFor each test case, print one integer — the minimum possible number of kicks in the penalty phase.\n\nExample\n\nInput\n\n\n4\n1?0???1001\n1111111111\n??????????\n0100000000\n\n\nOutput\n\n\n7\n10\n6\n9\n\nNote\n\nConsider the example test:\n\nIn the first test case, consider the situation when the 1-st, 5-th and 7-th kicks score goals, and kicks 2, 3, 4 and 6 are unsuccessful. Then the current number of goals for the first team is 3, for the second team is 0, and the referee sees that the second team can score at most 2 goals in the remaining kicks. So the penalty phase can be stopped after the 7-th kick.\n\nIn the second test case, the penalty phase won't be stopped until all 10 kicks are finished.\n\nIn the third test case, if the first team doesn't score any of its three first kicks and the second team scores all of its three first kicks, then after the 6-th kick, the first team has scored 0 goals and the second team has scored 3 goals, and the referee sees that the first team can score at most 2 goals in the remaining kicks. So, the penalty phase can be stopped after the 6-th kick.\n\nIn the fourth test case, even though you can predict the whole penalty phase, the referee understands that the phase should be ended only after the 9-th kick.",
    "public_tests": [
      {
        "input": [
          "4",
          "1?0???1001",
          "1111111111",
          "??????????",
          "0100000000"
        ],
        "output": [
          "7",
          "10",
          "6",
          "9"
        ]
      }
    ]
  },
  {
    "index": 24,
    "name": "1553_D",
    "description": "You are given two strings s and t, both consisting of lowercase English letters. You are going to type the string s character by character, from the first character to the last one.\n\nWhen typing a character, instead of pressing the button corresponding to it, you can press the \"Backspace\" button. It deletes the last character you have typed among those that aren't deleted yet (or does nothing if there are no characters in the current string). For example, if s is \"abcbd\" and you press Backspace instead of typing the first and the fourth characters, you will get the string \"bd\" (the first press of Backspace deletes no character, and the second press deletes the character 'c'). Another example, if s is \"abcaa\" and you press Backspace instead of the last two letters, then the resulting text is \"a\".\n\nYour task is to determine whether you can obtain the string t, if you type the string s and press \"Backspace\" instead of typing several (maybe zero) characters of s.\n\nInput\n\nThe first line contains a single integer q (1 ≤ q ≤ 10^5) — the number of test cases.\n\nThe first line of each test case contains the string s (1 ≤ |s| ≤ 10^5). Each character of s is a lowercase English letter.\n\nThe second line of each test case contains the string t (1 ≤ |t| ≤ 10^5). Each character of t is a lowercase English letter.\n\nIt is guaranteed that the total number of characters in the strings over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print \"YES\" if you can obtain the string t by typing the string s and replacing some characters with presses of \"Backspace\" button, or \"NO\" if you cannot.\n\nYou may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n\nExample\n\nInput\n\n\n4\nababa\nba\nababa\nbb\naaa\naaaa\naababa\nababa\n\n\nOutput\n\n\nYES\nNO\nNO\nYES\n\nNote\n\nConsider the example test from the statement.\n\nIn order to obtain \"ba\" from \"ababa\", you may press Backspace instead of typing the first and the fourth characters.\n\nThere's no way to obtain \"bb\" while typing \"ababa\".\n\nThere's no way to obtain \"aaaa\" while typing \"aaa\".\n\nIn order to obtain \"ababa\" while typing \"aababa\", you have to press Backspace instead of typing the first character, then type all the remaining characters.",
    "public_tests": [
      {
        "input": [
          "4",
          "ababa",
          "ba",
          "ababa",
          "bb",
          "aaa",
          "aaaa",
          "aababa",
          "ababa"
        ],
        "output": [
          "YES",
          "NO",
          "NO",
          "YES"
        ]
      }
    ]
  },
  {
    "index": 25,
    "name": "1553_F",
    "description": "You have an array a consisting of n distinct positive integers, numbered from 1 to n. Define p_k as $$$p_k = ∑_{1 ≤ i, j ≤ k} a_i mod a_j, where x \\bmod y denotes the remainder when x is divided by y. You have to find and print p_1, p_2, \\ldots, p_n$$$. \n\nInput\n\nThe first line contains n — the length of the array (2 ≤ n ≤ 2 ⋅ 10^5).\n\nThe second line contains n space-separated distinct integers a_1, …, a_n (1 ≤ a_i ≤ 3 ⋅ 10^5, a_i ≠ a_j if i ≠ j). \n\nOutput\n\nPrint n integers p_1, p_2, …, p_n. \n\nExamples\n\nInput\n\n\n4\n6 2 7 3\n\n\nOutput\n\n\n0 2 12 22\n\n\nInput\n\n\n3\n3 2 1\n\n\nOutput\n\n\n0 3 5",
    "public_tests": [
      {
        "input": [
          "4",
          "6 2 7 3"
        ],
        "output": [
          "0 2 12 22"
        ]
      },
      {
        "input": [
          "3",
          "3 2 1"
        ],
        "output": [
          "0 3 5"
        ]
      }
    ]
  },
  {
    "index": 26,
    "name": "1553_G",
    "description": "Consider a sequence of distinct integers a_1, …, a_n, each representing one node of a graph. There is an edge between two nodes if the two values are not coprime, i. e. they have a common divisor greater than 1.\n\nThere are q queries, in each query, you want to get from one given node a_s to another a_t. In order to achieve that, you can choose an existing value a_i and create new value a_{n+1} = a_i ⋅ (1 + a_i), with edges to all values that are not coprime with a_{n+1}. Also, n gets increased by 1. You can repeat that operation multiple times, possibly making the sequence much longer and getting huge or repeated values. What's the minimum possible number of newly created nodes so that a_t is reachable from a_s?\n\nQueries are independent. In each query, you start with the initial sequence a given in the input.\n\nInput\n\nThe first line contains two integers n and q (2 ≤ n ≤ 150 000, 1 ≤ q ≤ 300 000) — the size of the sequence and the number of queries.\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (2 ≤ a_i ≤ 10^6, a_i ≠ a_j if i ≠ j).\n\nThe j-th of the following q lines contains two distinct integers s_j and t_j (1 ≤ s_j, t_j ≤ n, s_j ≠ t_j) — indices of nodes for j-th query.\n\nOutput\n\nPrint q lines. The j-th line should contain one integer: the minimum number of new nodes you create in order to move from a_{s_j} to a_{t_j}.\n\nExamples\n\nInput\n\n\n3 3\n2 10 3\n1 2\n1 3\n2 3\n\n\nOutput\n\n\n0\n1\n1\n\n\nInput\n\n\n5 12\n3 8 7 6 25\n1 2\n1 3\n1 4\n1 5\n2 1\n2 3\n2 4\n2 5\n3 1\n3 2\n3 4\n3 5\n\n\nOutput\n\n\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n2\n\nNote\n\nIn the first example, you can first create new value 2 ⋅ 3 = 6 or 10 ⋅ 11 = 110 or 3 ⋅ 4 = 12. None of that is needed in the first query because you can already get from a_1 = 2 to a_2 = 10.\n\nIn the second query, it's optimal to first create 6 or 12. For example, creating 6 makes it possible to get from a_1 = 2 to a_3 = 3 with a path (2, 6, 3).\n\n<image>\n\nIn the last query of the second example, we want to get from a_3 = 7 to a_5 = 25. One way to achieve that is to first create 6 ⋅ 7 = 42 and then create 25 ⋅ 26 = 650. The final graph has seven nodes and it contains a path from a_3 = 7 to a_5 = 25.",
    "public_tests": [
      {
        "input": [
          "3 3",
          "2 10 3",
          "1 2",
          "1 3",
          "2 3"
        ],
        "output": [
          "0",
          "1",
          "1"
        ]
      },
      {
        "input": [
          "5 12",
          "3 8 7 6 25",
          "1 2",
          "1 3",
          "1 4",
          "1 5",
          "2 1",
          "2 3",
          "2 4",
          "2 5",
          "3 1",
          "3 2",
          "3 4",
          "3 5"
        ],
        "output": [
          "0",
          "1",
          "0",
          "1",
          "0",
          "1",
          "0",
          "1",
          "1",
          "1",
          "1",
          "2"
        ]
      }
    ]
  },
  {
    "index": 27,
    "name": "1553_H",
    "description": "You are given an array a consisting of n distinct elements and an integer k. Each element in the array is a non-negative integer not exceeding 2^k-1.\n\nLet's define the XOR distance for a number x as the value of \n\n$$$f(x) = min_{i = 1}^{n} min_{j = i + 1}^{n} |(a_i ⊕ x) - (a_j ⊕ x)|,$$$\n\nwhere ⊕ denotes [the bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nFor every integer x from 0 to 2^k-1, you have to calculate f(x).\n\nInput\n\nThe first line contains two integers n and k (1 ≤ k ≤ 19; 2 ≤ n ≤ 2^k).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2^k-1). All these integers are distinct.\n\nOutput\n\nPrint 2^k integers. The i-th of them should be equal to f(i-1).\n\nExamples\n\nInput\n\n\n3 3\n6 0 3\n\n\nOutput\n\n\n3 1 1 2 2 1 1 3 \n\n\nInput\n\n\n3 4\n13 4 2\n\n\nOutput\n\n\n2 2 6 6 3 1 2 2 2 2 1 3 6 6 2 2 \n\nNote\n\nConsider the first example:\n\n  * for x = 0, if we apply bitwise XOR to the elements of the array with x, we get the array [6, 0, 3], and the minimum absolute difference of two elements is 3; \n  * for x = 1, if we apply bitwise XOR to the elements of the array with x, we get the array [7, 1, 2], and the minimum absolute difference of two elements is 1; \n  * for x = 2, if we apply bitwise XOR to the elements of the array with x, we get the array [4, 2, 1], and the minimum absolute difference of two elements is 1; \n  * for x = 3, if we apply bitwise XOR to the elements of the array with x, we get the array [5, 3, 0], and the minimum absolute difference of two elements is 2; \n  * for x = 4, if we apply bitwise XOR to the elements of the array with x, we get the array [2, 4, 7], and the minimum absolute difference of two elements is 2; \n  * for x = 5, if we apply bitwise XOR to the elements of the array with x, we get the array [3, 5, 6], and the minimum absolute difference of two elements is 1; \n  * for x = 6, if we apply bitwise XOR to the elements of the array with x, we get the array [0, 6, 5], and the minimum absolute difference of two elements is 1; \n  * for x = 7, if we apply bitwise XOR to the elements of the array with x, we get the array [1, 7, 4], and the minimum absolute difference of two elements is 3. ",
    "public_tests": [
      {
        "input": [
          "3 3",
          "6 0 3"
        ],
        "output": [
          "3 1 1 2 2 1 1 3"
        ]
      },
      {
        "input": [
          "3 4",
          "13 4 2"
        ],
        "output": [
          "2 2 6 6 3 1 2 2 2 2 1 3 6 6 2 2"
        ]
      }
    ]
  },
  {
    "index": 28,
    "name": "1553_I",
    "description": "For a permutation p of numbers 1 through n, we define a stair array a as follows: a_i is length of the longest segment of permutation which contains position i and is made of consecutive values in sorted order: [x, x+1, …, y-1, y] or [y, y-1, …, x+1, x] for some x ≤ y. For example, for permutation p = [4, 1, 2, 3, 7, 6, 5] we have a = [1, 3, 3, 3, 3, 3, 3]. \n\nYou are given the stair array a. Your task is to calculate the number of permutations which have stair array equal to a. Since the number can be big, compute it modulo 998 244 353. Note that this number can be equal to zero.\n\nInput\n\nThe first line of input contains integer n (1 ≤ n ≤ 10^5) — the length of a stair array a.\n\nThe second line of input contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n).\n\nOutput\n\nPrint the number of permutations which have stair array equal to a. Since the number can be big, compute it modulo 998 244 353.\n\nExamples\n\nInput\n\n\n6\n3 3 3 1 1 1\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n7\n4 4 4 4 3 3 3\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n1\n1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n8\n2 2 2 2 2 2 1 1\n\n\nOutput\n\n\n370\n\n\nInput\n\n\n4\n3 2 3 1\n\n\nOutput\n\n\n0",
    "public_tests": [
      {
        "input": [
          "1",
          "1"
        ],
        "output": [
          "1"
        ]
      },
      {
        "input": [
          "4",
          "3 2 3 1"
        ],
        "output": [
          "0"
        ]
      },
      {
        "input": [
          "8",
          "2 2 2 2 2 2 1 1"
        ],
        "output": [
          "370"
        ]
      },
      {
        "input": [
          "6",
          "3 3 3 1 1 1"
        ],
        "output": [
          "6"
        ]
      },
      {
        "input": [
          "7",
          "4 4 4 4 3 3 3"
        ],
        "output": [
          "6"
        ]
      }
    ]
  },
  {
    "index": 29,
    "name": "1554_A",
    "description": "You are given n integers a_1, a_2, …, a_n. Find the maximum value of max(a_l, a_{l + 1}, …, a_r) ⋅ min(a_l, a_{l + 1}, …, a_r) over all pairs (l, r) of integers for which 1 ≤ l < r ≤ n.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^6).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print a single integer — the maximum possible value of the product from the statement.\n\nExample\n\nInput\n\n\n4\n3\n2 4 3\n4\n3 2 3 1\n2\n69 69\n6\n719313 273225 402638 473783 804745 323328\n\n\nOutput\n\n\n12\n6\n4761\n381274500335\n\nNote\n\nLet f(l, r) = max(a_l, a_{l + 1}, …, a_r) ⋅ min(a_l, a_{l + 1}, …, a_r).\n\nIn the first test case, \n\n  * f(1, 2) = max(a_1, a_2) ⋅ min(a_1, a_2) = max(2, 4) ⋅ min(2, 4) = 4 ⋅ 2 = 8. \n  * f(1, 3) = max(a_1, a_2, a_3) ⋅ min(a_1, a_2, a_3) = max(2, 4, 3) ⋅ min(2, 4, 3) = 4 ⋅ 2 = 8. \n  * f(2, 3) = max(a_2, a_3) ⋅ min(a_2, a_3) = max(4, 3) ⋅ min(4, 3) = 4 ⋅ 3 = 12. \n\n\n\nSo the maximum is f(2, 3) = 12.\n\nIn the second test case, the maximum is f(1, 2) = f(1, 3) = f(2, 3) = 6.",
    "public_tests": [
      {
        "input": [
          "4",
          "3",
          "2 4 3",
          "4",
          "3 2 3 1",
          "2",
          "69 69",
          "6",
          "719313 273225 402638 473783 804745 323328"
        ],
        "output": [
          "12",
          "6",
          "4761",
          "381274500335"
        ]
      }
    ]
  },
  {
    "index": 30,
    "name": "1554_B",
    "description": "You are given n integers a_1, a_2, …, a_n and an integer k. Find the maximum value of i ⋅ j - k ⋅ (a_i | a_j) over all pairs (i, j) of integers with 1 ≤ i < j ≤ n. Here, | is the [bitwise OR operator](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains two integers n (2 ≤ n ≤ 10^5) and k (1 ≤ k ≤ min(n, 100)).\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ n).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print a single integer — the maximum possible value of i ⋅ j - k ⋅ (a_i | a_j).\n\nExample\n\nInput\n\n\n4\n3 3\n1 1 3\n2 2\n1 2\n4 3\n0 1 2 3\n6 6\n3 2 0 0 5 6\n\n\nOutput\n\n\n-1\n-4\n3\n12\n\nNote\n\nLet f(i, j) = i ⋅ j - k ⋅ (a_i | a_j).\n\nIn the first test case, \n\n  * f(1, 2) = 1 ⋅ 2 - k ⋅ (a_1 | a_2) = 2 - 3 ⋅ (1 | 1) = -1. \n  * f(1, 3) = 1 ⋅ 3 - k ⋅ (a_1 | a_3) = 3 - 3 ⋅ (1 | 3) = -6. \n  * f(2, 3) = 2 ⋅ 3 - k ⋅ (a_2 | a_3) = 6 - 3 ⋅ (1 | 3) = -3. \n\n\n\nSo the maximum is f(1, 2) = -1.\n\nIn the fourth test case, the maximum is f(3, 4) = 12.",
    "public_tests": [
      {
        "input": [
          "4",
          "3 3",
          "1 1 3",
          "2 2",
          "1 2",
          "4 3",
          "0 1 2 3",
          "6 6",
          "3 2 0 0 5 6"
        ],
        "output": [
          "-1",
          "-4",
          "3",
          "12"
        ]
      }
    ]
  },
  {
    "index": 31,
    "name": "1554_C",
    "description": "You are given two integers n and m. Find the \\operatorname{MEX} of the sequence n ⊕ 0, n ⊕ 1, …, n ⊕ m. Here, ⊕ is the [bitwise XOR operator](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\n\\operatorname{MEX} of the sequence of non-negative integers is the smallest non-negative integer that doesn't appear in this sequence. For example, \\operatorname{MEX}(0, 1, 2, 4) = 3, and \\operatorname{MEX}(1, 2021) = 0. \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 30 000) — the number of test cases.\n\nThe first and only line of each test case contains two integers n and m (0 ≤ n, m ≤ 10^9).\n\nOutput\n\nFor each test case, print a single integer — the answer to the problem.\n\nExample\n\nInput\n\n\n5\n3 5\n4 6\n3 2\n69 696\n123456 654321\n\n\nOutput\n\n\n4\n3\n0\n640\n530866\n\nNote\n\nIn the first test case, the sequence is 3 ⊕ 0, 3 ⊕ 1, 3 ⊕ 2, 3 ⊕ 3, 3 ⊕ 4, 3 ⊕ 5, or 3, 2, 1, 0, 7, 6. The smallest non-negative integer which isn't present in the sequence i. e. the \\operatorname{MEX} of the sequence is 4.\n\nIn the second test case, the sequence is 4 ⊕ 0, 4 ⊕ 1, 4 ⊕ 2, 4 ⊕ 3, 4 ⊕ 4, 4 ⊕ 5, 4 ⊕ 6, or 4, 5, 6, 7, 0, 1, 2. The smallest non-negative integer which isn't present in the sequence i. e. the \\operatorname{MEX} of the sequence is 3.\n\nIn the third test case, the sequence is 3 ⊕ 0, 3 ⊕ 1, 3 ⊕ 2, or 3, 2, 1. The smallest non-negative integer which isn't present in the sequence i. e. the \\operatorname{MEX} of the sequence is 0.",
    "public_tests": [
      {
        "input": [
          "5",
          "3 5",
          "4 6",
          "3 2",
          "69 696",
          "123456 654321"
        ],
        "output": [
          "4",
          "3",
          "0",
          "640",
          "530866"
        ]
      }
    ]
  },
  {
    "index": 32,
    "name": "1554_D",
    "description": "You are given an integer n. Find any string s of length n consisting only of English lowercase letters such that each non-empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 500) — the number of test cases.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print a single line containing the string s. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.\n\nExample\n\nInput\n\n\n4\n3\n5\n9\n19\n\n\nOutput\n\n\nabc\ndiane\nbbcaabbba\nyouarethecutestuwuu\n\nNote\n\nIn the first test case, each substring of \"abc\" occurs exactly once.\n\nIn the third test case, each substring of \"bbcaabbba\" occurs an odd number of times. In particular, \"b\" occurs 5 times, \"a\" and \"bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.",
    "public_tests": [
      {
        "input": [
          "4",
          "3",
          "5",
          "9",
          "19"
        ],
        "output": [
          "abc",
          "aabca",
          "aaaabcaaa",
          "aaaaaaaaabcaaaaaaaa"
        ]
      }
    ]
  },
  {
    "index": 33,
    "name": "1554_E",
    "description": "You are given a tree with n nodes. As a reminder, a tree is a connected undirected graph without cycles.\n\nLet a_1, a_2, …, a_n be a sequence of integers. Perform the following operation exactly n times: \n\n  * Select an unerased node u. Assign a_u := number of unerased nodes adjacent to u. Then, erase the node u along with all edges that have it as an endpoint. \n\n\n\nFor each integer k from 1 to n, find the number, modulo 998 244 353, of different sequences a_1, a_2, …, a_n that satisfy the following conditions:\n\n  * it is possible to obtain a by performing the aforementioned operations exactly n times in some order. \n  * \\operatorname{gcd}(a_1, a_2, …, a_n) = k. Here, \\operatorname{gcd} means the greatest common divisor of the elements in a. \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10 000) — the number of test cases.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 10^5).\n\nEach of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n) indicating there is an edge between vertices u and v. It is guaranteed that the given edges form a tree.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print n integers in a single line, where for each k from 1 to n, the k-th integer denotes the answer when \\operatorname{gcd} equals to k.\n\nExample\n\nInput\n\n\n2\n3\n2 1\n1 3\n2\n1 2\n\n\nOutput\n\n\n3 1 0\n2 0\n\nNote\n\nIn the first test case, \n\n<image>\n\n  * If we delete the nodes in order 1 → 2 → 3 or 1 → 3 → 2, then the obtained sequence will be a = [2, 0, 0] which has \\operatorname{gcd} equals to 2. \n  * If we delete the nodes in order 2 → 1 → 3, then the obtained sequence will be a = [1, 1, 0] which has \\operatorname{gcd} equals to 1. \n  * If we delete the nodes in order 3 → 1 → 2, then the obtained sequence will be a = [1, 0, 1] which has \\operatorname{gcd} equals to 1. \n  * If we delete the nodes in order 2 → 3 → 1 or 3 → 2 → 1, then the obtained sequence will be a = [0, 1, 1] which has \\operatorname{gcd} equals to 1. \n\n\n\nNote that here we are counting the number of different sequences, not the number of different orders of deleting nodes.",
    "public_tests": [
      {
        "input": [
          "2",
          "3",
          "2 1",
          "1 3",
          "2",
          "1 2"
        ],
        "output": [
          "3 1 0 ",
          "2 0"
        ]
      }
    ]
  },
  {
    "index": 34,
    "name": "1555_A",
    "description": "PizzaForces is Petya's favorite pizzeria. PizzaForces makes and sells pizzas of three sizes: small pizzas consist of 6 slices, medium ones consist of 8 slices, and large pizzas consist of 10 slices each. Baking them takes 15, 20 and 25 minutes, respectively.\n\nPetya's birthday is today, and n of his friends will come, so he decided to make an order from his favorite pizzeria. Petya wants to order so much pizza that each of his friends gets at least one slice of pizza. The cooking time of the order is the total baking time of all the pizzas in the order.\n\nYour task is to determine the minimum number of minutes that is needed to make pizzas containing at least n slices in total. For example: \n\n  * if 12 friends come to Petya's birthday, he has to order pizzas containing at least 12 slices in total. He can order two small pizzas, containing exactly 12 slices, and the time to bake them is 30 minutes; \n  * if 15 friends come to Petya's birthday, he has to order pizzas containing at least 15 slices in total. He can order a small pizza and a large pizza, containing 16 slices, and the time to bake them is 40 minutes; \n  * if 300 friends come to Petya's birthday, he has to order pizzas containing at least 300 slices in total. He can order 15 small pizzas, 10 medium pizzas and 13 large pizzas, in total they contain 15 ⋅ 6 + 10 ⋅ 8 + 13 ⋅ 10 = 300 slices, and the total time to bake them is 15 ⋅ 15 + 10 ⋅ 20 + 13 ⋅ 25 = 750 minutes; \n  * if only one friend comes to Petya's birthday, he can order a small pizza, and the time to bake it is 15 minutes. \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nEach testcase consists of a single line that contains a single integer n (1 ≤ n ≤ 10^{16}) — the number of Petya's friends.\n\nOutput\n\nFor each testcase, print one integer — the minimum number of minutes that is needed to bake pizzas containing at least n slices in total.\n\nExample\n\nInput\n\n\n6\n12\n15\n300\n1\n9999999999999999\n3\n\n\nOutput\n\n\n30\n40\n750\n15\n25000000000000000\n15",
    "public_tests": [
      {
        "input": [
          "6",
          "12",
          "15",
          "300",
          "1",
          "9999999999999999",
          "3"
        ],
        "output": [
          "30",
          "40",
          "750",
          "15",
          "25000000000000000",
          "15"
        ]
      }
    ]
  },
  {
    "index": 35,
    "name": "1555_C",
    "description": "Alice and Bob are playing a game on a matrix, consisting of 2 rows and m columns. The cell in the i-th row in the j-th column contains a_{i, j} coins in it.\n\nInitially, both Alice and Bob are standing in a cell (1, 1). They are going to perform a sequence of moves to reach a cell (2, m).\n\nThe possible moves are: \n\n  * Move right — from some cell (x, y) to (x, y + 1); \n  * Move down — from some cell (x, y) to (x + 1, y). \n\n\n\nFirst, Alice makes all her moves until she reaches (2, m). She collects the coins in all cells she visit (including the starting cell).\n\nWhen Alice finishes, Bob starts his journey. He also performs the moves to reach (2, m) and collects the coins in all cells that he visited, but Alice didn't.\n\nThe score of the game is the total number of coins Bob collects.\n\nAlice wants to minimize the score. Bob wants to maximize the score. What will the score of the game be if both players play optimally?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of the testcase contains a single integer m (1 ≤ m ≤ 10^5) — the number of columns of the matrix.\n\nThe i-th of the next 2 lines contain m integers a_{i,1}, a_{i,2}, ..., a_{i,m} (1 ≤ a_{i,j} ≤ 10^4) — the number of coins in the cell in the i-th row in the j-th column of the matrix.\n\nThe sum of m over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print a single integer — the score of the game if both players play optimally.\n\nExample\n\nInput\n\n\n3\n3\n1 3 7\n3 5 1\n3\n1 3 9\n3 5 1\n1\n4\n7\n\n\nOutput\n\n\n7\n8\n0\n\nNote\n\nThe paths for the testcases are shown on the following pictures. Alice's path is depicted in red and Bob's path is depicted in blue.\n\n<image>",
    "public_tests": [
      {
        "input": [
          "3",
          "3",
          "1 3 7",
          "3 5 1",
          "3",
          "1 3 9",
          "3 5 1",
          "1",
          "4",
          "7"
        ],
        "output": [
          "7",
          "8",
          "0"
        ]
      }
    ]
  },
  {
    "index": 36,
    "name": "1555_D",
    "description": "Let's call the string beautiful if it does not contain a substring of length at least 2, which is a palindrome. Recall that a palindrome is a string that reads the same way from the first character to the last and from the last character to the first. For example, the strings a, bab, acca, bcabcbacb are palindromes, but the strings ab, abbbaa, cccb are not.\n\nLet's define cost of a string as the minimum number of operations so that the string becomes beautiful, if in one operation it is allowed to change any character of the string to one of the first 3 letters of the Latin alphabet (in lowercase).\n\nYou are given a string s of length n, each character of the string is one of the first 3 letters of the Latin alphabet (in lowercase).\n\nYou have to answer m queries — calculate the cost of the substring of the string s from l_i-th to r_i-th position, inclusive.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the length of the string s and the number of queries.\n\nThe second line contains the string s, it consists of n characters, each character one of the first 3 Latin letters.\n\nThe following m lines contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) — parameters of the i-th query.\n\nOutput\n\nFor each query, print a single integer — the cost of the substring of the string s from l_i-th to r_i-th position, inclusive.\n\nExample\n\nInput\n\n\n5 4\nbaacb\n1 3\n1 5\n4 5\n2 3\n\n\nOutput\n\n\n1\n2\n0\n1\n\nNote\n\nConsider the queries of the example test.\n\n  * in the first query, the substring is baa, which can be changed to bac in one operation; \n  * in the second query, the substring is baacb, which can be changed to cbacb in two operations; \n  * in the third query, the substring is cb, which can be left unchanged; \n  * in the fourth query, the substring is aa, which can be changed to ba in one operation. ",
    "public_tests": [
      {
        "input": [
          "5 4",
          "baacb",
          "1 3",
          "1 5",
          "4 5",
          "2 3"
        ],
        "output": [
          "1",
          "2",
          "0",
          "1"
        ]
      }
    ]
  },
  {
    "index": 37,
    "name": "1555_E",
    "description": "You are given n segments on a number line, numbered from 1 to n. The i-th segments covers all integer points from l_i to r_i and has a value w_i.\n\nYou are asked to select a subset of these segments (possibly, all of them). Once the subset is selected, it's possible to travel between two integer points if there exists a selected segment that covers both of them. A subset is good if it's possible to reach point m starting from point 1 in arbitrary number of moves.\n\nThe cost of the subset is the difference between the maximum and the minimum values of segments in it. Find the minimum cost of a good subset.\n\nIn every test there exists at least one good subset.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n ≤ 3 ⋅ 10^5; 2 ≤ m ≤ 10^6) — the number of segments and the number of integer points.\n\nEach of the next n lines contains three integers l_i, r_i and w_i (1 ≤ l_i < r_i ≤ m; 1 ≤ w_i ≤ 10^6) — the description of the i-th segment.\n\nIn every test there exists at least one good subset.\n\nOutput\n\nPrint a single integer — the minimum cost of a good subset.\n\nExamples\n\nInput\n\n\n5 12\n1 5 5\n3 4 10\n4 10 6\n11 12 5\n10 12 3\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n1 10\n1 10 23\n\n\nOutput\n\n\n0",
    "public_tests": [
      {
        "input": [
          "1 10",
          "1 10 23"
        ],
        "output": [
          "0"
        ]
      },
      {
        "input": [
          "5 12",
          "1 5 5",
          "3 4 10",
          "4 10 6",
          "11 12 5",
          "10 12 3"
        ],
        "output": [
          "3"
        ]
      }
    ]
  },
  {
    "index": 38,
    "name": "1555_F",
    "description": "You have an undirected graph consisting of n vertices with weighted edges.\n\nA simple cycle is a cycle of the graph without repeated vertices. Let the weight of the cycle be the [XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of weights of edges it consists of.\n\nLet's say the graph is good if all its simple cycles have weight 1. A graph is bad if it's not good.\n\nInitially, the graph is empty. Then q queries follow. Each query has the next type: \n\n  * u v x — add edge between vertices u and v of weight x if it doesn't make the graph bad. \n\n\n\nFor each query print, was the edge added or not.\n\nInput\n\nThe first line contains two integers n and q (3 ≤ n ≤ 3 ⋅ 10^5; 1 ≤ q ≤ 5 ⋅ 10^5) — the number of vertices and queries.\n\nNext q lines contain queries — one per line. Each query contains three integers u, v and x (1 ≤ u, v ≤ n; u ≠ v; 0 ≤ x ≤ 1) — the vertices of the edge and its weight.\n\nIt's guaranteed that there are no multiple edges in the input.\n\nOutput\n\nFor each query, print YES if the edge was added to the graph, or NO otherwise (both case-insensitive).\n\nExample\n\nInput\n\n\n9 12\n6 1 0\n1 3 1\n3 6 0\n6 2 0\n6 4 1\n3 4 1\n2 4 0\n2 5 0\n4 5 0\n7 8 1\n8 9 1\n9 7 0\n\n\nOutput\n\n\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nNO",
    "public_tests": [
      {
        "input": [
          "9 12",
          "6 1 0",
          "1 3 1",
          "3 6 0",
          "6 2 0",
          "6 4 1",
          "3 4 1",
          "2 4 0",
          "2 5 0",
          "4 5 0",
          "7 8 1",
          "8 9 1",
          "9 7 0"
        ],
        "output": [
          "YES",
          "YES",
          "YES",
          "YES",
          "YES",
          "NO",
          "YES",
          "YES",
          "NO",
          "YES",
          "YES",
          "NO"
        ]
      }
    ]
  },
  {
    "index": 39,
    "name": "1556_A",
    "description": "<image>\n\nWilliam has two numbers a and b initially both equal to zero. William mastered performing three different operations with them quickly. Before performing each operation some positive integer k is picked, which is then used to perform one of the following operations: (note, that for each operation you can choose a new positive integer k)\n\n  1. add number k to both a and b, or \n  2. add number k to a and subtract k from b, or \n  3. add number k to b and subtract k from a. \n\n\n\nNote that after performing operations, numbers a and b may become negative as well.\n\nWilliam wants to find out the minimal number of operations he would have to perform to make a equal to his favorite number c and b equal to his second favorite number d.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe only line of each test case contains two integers c and d (0 ≤ c, d ≤ 10^9), which are William's favorite numbers and which he wants a and b to be transformed into.\n\nOutput\n\nFor each test case output a single number, which is the minimal number of operations which William would have to perform to make a equal to c and b equal to d, or -1 if it is impossible to achieve this using the described operations.\n\nExample\n\nInput\n\n\n6\n1 2\n3 5\n5 3\n6 6\n8 0\n0 0\n\n\nOutput\n\n\n-1\n2\n2\n1\n2\n0\n\nNote\n\nLet us demonstrate one of the suboptimal ways of getting a pair (3, 5):\n\n  * Using an operation of the first type with k=1, the current pair would be equal to (1, 1). \n  * Using an operation of the third type with k=8, the current pair would be equal to (-7, 9). \n  * Using an operation of the second type with k=7, the current pair would be equal to (0, 2). \n  * Using an operation of the first type with k=3, the current pair would be equal to (3, 5). ",
    "public_tests": [
      {
        "input": [
          "6",
          "1 2",
          "3 5",
          "5 3",
          "6 6",
          "8 0",
          "0 0"
        ],
        "output": [
          "-1",
          "2",
          "2",
          "1",
          "2",
          "0"
        ]
      }
    ]
  },
  {
    "index": 40,
    "name": "1556_B",
    "description": "<image>\n\nWilliam has an array of n integers a_1, a_2, ..., a_n. In one move he can swap two neighboring items. Two items a_i and a_j are considered neighboring if the condition |i - j| = 1 is satisfied.\n\nWilliam wants you to calculate the minimal number of swaps he would need to perform to make it so that the array does not contain two neighboring items with the same parity.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 ≤ n ≤ 10^5) which is the total number of items in William's array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) which are William's array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case output the minimal number of operations needed or -1 if it is impossible to get the array to a state when no neighboring numbers have the same parity.\n\nExample\n\nInput\n\n\n5\n3\n6 6 1\n1\n9\n6\n1 1 1 2 2 2\n2\n8 6\n6\n6 2 3 4 5 1\n\n\nOutput\n\n\n1\n0\n3\n-1\n2\n\nNote\n\nIn the first test case the following sequence of operations would satisfy the requirements: \n\n  1. swap(2, 3). Array after performing the operation: [6, 1, 6] \n\n\n\nIn the second test case the array initially does not contain two neighboring items of the same parity.\n\nIn the third test case the following sequence of operations would satisfy the requirements: \n\n  1. swap(3, 4). Array after performing the operation: [1, 1, 2, 1, 2, 2] \n  2. swap(2, 3). Array after performing the operation: [1, 2, 1, 1, 2, 2] \n  3. swap(4, 5). Array after performing the operation: [1, 2, 1, 2, 1, 2] \n\n\n\nIn the fourth test case it is impossible to satisfy the requirements.\n\nIn the fifth test case the following sequence of operations would satisfy the requirements: \n\n  1. swap(2, 3). Array after performing the operation: [6, 3, 2, 4, 5, 1] \n  2. swap(4, 5). Array after performing the operation: [6, 3, 2, 5, 4, 1] ",
    "public_tests": [
      {
        "input": [
          "5",
          "3",
          "6 6 1",
          "1",
          "9",
          "6",
          "1 1 1 2 2 2",
          "2",
          "8 6",
          "6",
          "6 2 3 4 5 1"
        ],
        "output": [
          "1",
          "0",
          "3",
          "-1",
          "2"
        ]
      }
    ]
  },
  {
    "index": 41,
    "name": "1556_C",
    "description": "<image>\n\nWilliam has a favorite bracket sequence. Since his favorite sequence is quite big he provided it to you as a sequence of positive integers c_1, c_2, ..., c_n where c_i is the number of consecutive brackets \"(\" if i is an odd number or the number of consecutive brackets \")\" if i is an even number.\n\nFor example for a bracket sequence \"((())()))\" a corresponding sequence of numbers is [3, 2, 1, 3].\n\nYou need to find the total number of continuous subsequences (subsegments) [l, r] (l ≤ r) of the original bracket sequence, which are regular bracket sequences.\n\nA bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are regular, while \")(\", \"(()\" and \"(()))(\" are not.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 1000), the size of the compressed sequence.\n\nThe second line contains a sequence of integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9), the compressed sequence.\n\nOutput\n\nOutput a single integer — the total number of subsegments of the original bracket sequence, which are regular bracket sequences.\n\nIt can be proved that the answer fits in the signed 64-bit integer data type.\n\nExamples\n\nInput\n\n\n5\n4 1 2 3 1\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n6\n1 3 2 1 2 4\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n6\n1 1 1 1 2 2\n\n\nOutput\n\n\n7\n\nNote\n\nIn the first example a sequence (((()(()))( is described. This bracket sequence contains 5 subsegments which form regular bracket sequences:\n\n  1. Subsequence from the 3rd to 10th character: (()(()))\n  2. Subsequence from the 4th to 5th character: ()\n  3. Subsequence from the 4th to 9th character: ()(())\n  4. Subsequence from the 6th to 9th character: (())\n  5. Subsequence from the 7th to 8th character: ()\n\n\n\nIn the second example a sequence ()))(()(()))) is described.\n\nIn the third example a sequence ()()(()) is described.",
    "public_tests": [
      {
        "input": [
          "6",
          "1 1 1 1 2 2"
        ],
        "output": [
          "7"
        ]
      },
      {
        "input": [
          "6",
          "1 3 2 1 2 4"
        ],
        "output": [
          "6"
        ]
      },
      {
        "input": [
          "5",
          "4 1 2 3 1"
        ],
        "output": [
          "5"
        ]
      }
    ]
  },
  {
    "index": 42,
    "name": "1556_E",
    "description": "<image>\n\nWilliam has two arrays a and b, each consisting of n items.\n\nFor some segments l..r of these arrays William wants to know if it is possible to equalize the values of items in these segments using a balancing operation. Formally, the values are equalized if for each i from l to r holds a_i = b_i.\n\nTo perform a balancing operation an even number of indices must be selected, such that l ≤ pos_1 < pos_2 < ... < pos_k ≤ r. Next the items of array a at positions pos_1, pos_3, pos_5, ... get incremented by one and the items of array b at positions pos_2, pos_4, pos_6, ... get incremented by one.\n\nWilliam wants to find out if it is possible to equalize the values of elements in two arrays for each segment using some number of balancing operations, and what is the minimal number of operations required for that. Note that for each segment the operations are performed independently.\n\nInput\n\nThe first line contains a two integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), the size of arrays a and b and the number of segments.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9).\n\nThe third line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^9).\n\nEach of the next q lines contains two integers l_i and r_i (1 ≤ l_i < r_i ≤ n), the edges of segments.\n\nOutput\n\nFor each segment output a single number — the minimal number of balancing operations needed or \"-1\" if it is impossible to equalize segments of arrays.\n\nExample\n\nInput\n\n\n8 5\n0 1 2 9 3 2 7 5\n2 2 1 9 4 1 5 8\n2 6\n1 7\n2 4\n7 8\n5 8\n\n\nOutput\n\n\n1\n3\n1\n-1\n-1\n\nNote\n\nFor the first segment from 2 to 6 you can do one operation with pos = [2, 3, 5, 6], after this operation the arrays will be: a = [0, 2, 2, 9, 4, 2, 7, 5], b = [2, 2, 2, 9, 4, 2, 5, 8]. Arrays are equal on a segment from 2 to 6 after this operation.\n\nFor the second segment from 1 to 7 you can do three following operations: \n\n  1. pos = [1, 3, 5, 6] \n  2. pos = [1, 7] \n  3. pos = [2, 7] \n\n\n\nAfter these operations, the arrays will be: a = [2, 2, 2, 9, 4, 2, 7, 5], b = [2, 2, 2, 9, 4, 2, 7, 8]. Arrays are equal on a segment from 1 to 7 after these operations.\n\nFor the third segment from 2 to 4 you can do one operation with pos = [2, 3], after the operation arrays will be: a = [0, 2, 2, 9, 3, 2, 7, 5], b = [2, 2, 2, 9, 4, 1, 5, 8]. Arrays are equal on a segment from 2 to 4 after this operation.\n\nIt is impossible to equalize the fourth and the fifth segment.",
    "public_tests": [
      {
        "input": [
          "8 5",
          "0 1 2 9 3 2 7 5",
          "2 2 1 9 4 1 5 8",
          "2 6",
          "1 7",
          "2 4",
          "7 8",
          "5 8"
        ],
        "output": [
          "1",
          "3",
          "1",
          "-1",
          "-1"
        ]
      }
    ]
  },
  {
    "index": 43,
    "name": "1556_F",
    "description": "<image>\n\nWilliam is not only interested in trading but also in betting on sports matches. n teams participate in each match. Each team is characterized by strength a_i. Each two teams i < j play with each other exactly once. Team i wins with probability (a_i)/(a_i + a_j) and team j wins with probability (a_j)/(a_i + a_j).\n\nThe team is called a winner if it directly or indirectly defeated all other teams. Team a defeated (directly or indirectly) team b if there is a sequence of teams c_1, c_2, ... c_k such that c_1 = a, c_k = b and team c_i defeated team c_{i + 1} for all i from 1 to k - 1. Note that it is possible that team a defeated team b and in the same time team b defeated team a.\n\nWilliam wants you to find the expected value of the number of winners.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 14), which is the total number of teams participating in a match.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the strengths of teams participating in a match.\n\nOutput\n\nOutput a single integer — the expected value of the number of winners of the tournament modulo 10^9 + 7.\n\nFormally, let M = 10^9+7. It can be demonstrated that the answer can be presented as a irreducible fraction p/q, where p and q are integers and q not ≡ 0 \\pmod{M}. Output a single integer equal to p ⋅ q^{-1} mod M. In other words, output an integer x such that 0 ≤ x < M and x ⋅ q ≡ p \\pmod{M}.\n\nExamples\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n1 5 2 11 14\n\n\nOutput\n\n\n642377629\n\nNote\n\nTo better understand in which situation several winners are possible let's examine the second test:\n\nOne possible result of the tournament is as follows (a → b means that a defeated b):\n\n  * 1 → 2 \n  * 2 → 3 \n  * 3 → 1 \n  * 1 → 4 \n  * 1 → 5 \n  * 2 → 4 \n  * 2 → 5 \n  * 3 → 4 \n  * 3 → 5 \n  * 4 → 5 \n\n\n\nOr more clearly in the picture:\n\n<image>\n\nIn this case every team from the set \\{ 1, 2, 3 \\} directly or indirectly defeated everyone. I.e.:\n\n  * 1st defeated everyone because they can get to everyone else in the following way 1 → 2, 1 → 2 → 3, 1 → 4, 1 → 5. \n  * 2nd defeated everyone because they can get to everyone else in the following way 2 → 3, 2 → 3 → 1, 2 → 4, 2 → 5. \n  * 3rd defeated everyone because they can get to everyone else in the following way 3 → 1, 3 → 1 → 2, 3 → 4, 3 → 5. \n\n\n\nTherefore the total number of winners is 3.",
    "public_tests": [
      {
        "input": [
          "2",
          "1 2"
        ],
        "output": [
          "1"
        ]
      },
      {
        "input": [
          "5",
          "1 5 2 11 14"
        ],
        "output": [
          "642377629"
        ]
      }
    ]
  },
  {
    "index": 44,
    "name": "1556_G",
    "description": "<image>\n\nAs mentioned previously William really likes playing video games. In one of his favorite games, the player character is in a universe where every planet is designated by a binary number from 0 to 2^n - 1. On each planet, there are gates that allow the player to move from planet i to planet j if the binary representations of i and j differ in exactly one bit.\n\nWilliam wants to test you and see how you can handle processing the following queries in this game universe:\n\n  * Destroy planets with numbers from l to r inclusively. These planets cannot be moved to anymore.\n  * Figure out if it is possible to reach planet b from planet a using some number of planetary gates. It is guaranteed that the planets a and b are not destroyed. \n\nInput\n\nThe first line contains two integers n, m (1 ≤ n ≤ 50, 1 ≤ m ≤ 5 ⋅ 10^4), which are the number of bits in binary representation of each planets' designation and the number of queries, respectively.\n\nEach of the next m lines contains a query of two types:\n\nblock l r — query for destruction of planets with numbers from l to r inclusively (0 ≤ l ≤ r < 2^n). It's guaranteed that no planet will be destroyed twice.\n\nask a b — query for reachability between planets a and b (0 ≤ a, b < 2^n). It's guaranteed that planets a and b hasn't been destroyed yet.\n\nOutput\n\nFor each query of type ask you must output \"1\" in a new line, if it is possible to reach planet b from planet a and \"0\" otherwise (without quotation marks).\n\nExamples\n\nInput\n\n\n3 3\nask 0 7\nblock 3 6\nask 0 7\n\n\nOutput\n\n\n1\n0\n\n\nInput\n\n\n6 10\nblock 12 26\nask 44 63\nblock 32 46\nask 1 54\nblock 27 30\nask 10 31\nask 11 31\nask 49 31\nblock 31 31\nask 2 51\n\n\nOutput\n\n\n1\n1\n0\n0\n1\n0\n\nNote\n\nThe first example test can be visualized in the following way:\n\n<image>\n\nResponse to a query ask 0 7 is positive.\n\nNext after query block 3 6 the graph will look the following way (destroyed vertices are highlighted):\n\n<image>\n\nResponse to a query ask 0 7 is negative, since any path from vertex 0 to vertex 7 must go through one of the destroyed vertices.",
    "public_tests": [
      {
        "input": [
          "6 10",
          "block 12 26",
          "ask 44 63",
          "block 32 46",
          "ask 1 54",
          "block 27 30",
          "ask 10 31",
          "ask 11 31",
          "ask 49 31",
          "block 31 31",
          "ask 2 51"
        ],
        "output": [
          "1",
          "1",
          "0",
          "0",
          "1",
          "0"
        ]
      },
      {
        "input": [
          "3 3",
          "ask 0 7",
          "block 3 6",
          "ask 0 7"
        ],
        "output": [
          "1",
          "0"
        ]
      }
    ]
  },
  {
    "index": 45,
    "name": "1556_H",
    "description": "<image>\n\nWilliam really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge-weighted graph consisting of n vertices.\n\nHe wants to build a spanning tree of this graph, such that for the first k vertices the following condition is satisfied: the degree of a vertex with index i does not exceed d_i. Vertices from k + 1 to n may have any degree.\n\nWilliam wants you to find the minimum weight of a spanning tree that satisfies all the conditions.\n\nA spanning tree is a subset of edges of a graph that forms a tree on all n vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.\n\nInput\n\nThe first line of input contains two integers n, k (2 ≤ n ≤ 50, 1 ≤ k ≤ min(n - 1, 5)).\n\nThe second line contains k integers d_1, d_2, …, d_k (1 ≤ d_i ≤ n). \n\nThe i-th of the next n - 1 lines contains n - i integers w_{i,i+1}, w_{i,i+2}, …, w_{i,n} (1 ≤ w_{i,j} ≤ 100): weights of edges (i,i+1),(i,i+2),…,(i,n).\n\nOutput\n\nPrint one integer: the minimum weight of a spanning tree under given degree constraints for the first k vertices. \n\nExample\n\nInput\n\n\n10 5\n5 3 4 2 1\n29 49 33 12 55 15 32 62 37\n61 26 15 58 15 22 8 58\n37 16 9 39 20 14 58\n10 15 40 3 19 55\n53 13 37 44 52\n23 59 58 4\n69 80 29\n89 28\n48\n\n\nOutput\n\n\n95",
    "public_tests": [
      {
        "input": [
          "10 5",
          "5 3 4 2 1",
          "29 49 33 12 55 15 32 62 37",
          "61 26 15 58 15 22 8 58",
          "37 16 9 39 20 14 58",
          "10 15 40 3 19 55",
          "53 13 37 44 52",
          "23 59 58 4",
          "69 80 29",
          "89 28",
          "48"
        ],
        "output": [
          "95"
        ]
      }
    ]
  },
  {
    "index": 46,
    "name": "1557_A",
    "description": "Ezzat has an array of n integers (maybe negative). He wants to split it into two non-empty subsequences a and b, such that every element from the array belongs to exactly one subsequence, and the value of f(a) + f(b) is the maximum possible value, where f(x) is the average of the subsequence x. \n\nA sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\nThe average of a subsequence is the sum of the numbers of this subsequence divided by the size of the subsequence.\n\nFor example, the average of [1,5,6] is (1+5+6)/3 = 12/3 = 4, so f([1,5,6]) = 4.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^3)— the number of test cases. Each test case consists of two lines.\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3⋅10^5.\n\nOutput\n\nFor each test case, print a single value — the maximum value that Ezzat can achieve.\n\nYour answer is considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} ≤ 10^{-6}.\n\nExample\n\nInput\n\n\n4\n3\n3 1 2\n3\n-7 -6 -6\n3\n2 2 2\n4\n17 3 5 -3\n\n\nOutput\n\n\n4.500000000\n-12.500000000\n4.000000000\n18.666666667\n\nNote\n\nIn the first test case, the array is [3, 1, 2]. These are all the possible ways to split this array: \n\n  * a = [3], b = [1,2], so the value of f(a) + f(b) = 3 + 1.5 = 4.5. \n  * a = [3,1], b = [2], so the value of f(a) + f(b) = 2 + 2 = 4. \n  * a = [3,2], b = [1], so the value of f(a) + f(b) = 2.5 + 1 = 3.5. \n\nTherefore, the maximum possible value 4.5.\n\nIn the second test case, the array is [-7, -6, -6]. These are all the possible ways to split this array: \n\n  * a = [-7], b = [-6,-6], so the value of f(a) + f(b) = (-7) + (-6) = -13. \n  * a = [-7,-6], b = [-6], so the value of f(a) + f(b) = (-6.5) + (-6) = -12.5. \n\nTherefore, the maximum possible value -12.5.",
    "public_tests": [
      {
        "input": [
          "4",
          "3",
          "3 1 2",
          "3",
          "-7 -6 -6",
          "3",
          "2 2 2",
          "4",
          "17 3 5 -3"
        ],
        "output": [
          "4.5",
          "-12.5",
          "4.0",
          "18.666666666666668"
        ]
      }
    ]
  },
  {
    "index": 47,
    "name": "1557_B",
    "description": "Moamen has an array of n distinct integers. He wants to sort that array in non-decreasing order by doing the following operations in order exactly once:\n\n  1. Split the array into exactly k non-empty subarrays such that each element belongs to exactly one subarray. \n  2. Reorder these subarrays arbitrary. \n  3. Merge the subarrays in their new order. \n\n\n\nA sequence a is a subarray of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nCan you tell Moamen if there is a way to sort the array in non-decreasing order using the operations written above?\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\n\nThe second line contains n integers a_1, a_2, …, a_n (0 ≤ |a_i| ≤ 10^9). It is guaranteed that all numbers are distinct.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3⋅10^5.\n\nOutput\n\nFor each test case, you should output a single string.\n\nIf Moamen can sort the array in non-decreasing order, output \"YES\" (without quotes). Otherwise, output \"NO\" (without quotes).\n\nYou can print each letter of \"YES\" and \"NO\" in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n5 4\n6 3 4 2 1\n4 2\n1 -4 0 -2\n5 1\n1 2 3 4 5\n\n\nOutput\n\n\nYes\nNo\nYes\n\nNote\n\nIn the first test case, a = [6, 3, 4, 2, 1], and k = 4, so we can do the operations as follows: \n\n  1. Split a into \\{ [6], [3, 4], [2], [1] \\}. \n  2. Reorder them: \\{ [1], [2], [3,4], [6] \\}. \n  3. Merge them: [1, 2, 3, 4, 6], so now the array is sorted. \n\n\n\nIn the second test case, there is no way to sort the array by splitting it into only 2 subarrays.\n\nAs an example, if we split it into \\{ [1, -4], [0, -2] \\}, we can reorder them into \\{ [1, -4], [0, -2] \\} or \\{ [0, -2], [1, -4] \\}. However, after merging the subarrays, it is impossible to get a sorted array.",
    "public_tests": [
      {
        "input": [
          "3",
          "5 4",
          "6 3 4 2 1",
          "4 2",
          "1 -4 0 -2",
          "5 1",
          "1 2 3 4 5"
        ],
        "output": [
          "Yes",
          "No",
          "Yes"
        ]
      }
    ]
  },
  {
    "index": 48,
    "name": "1557_C",
    "description": "Moamen and Ezzat are playing a game. They create an array a of n non-negative integers where every element is less than 2^k.\n\nMoamen wins if a_1  \\&  a_2  \\&  a_3  \\&  …  \\&  a_n ≥ a_1 ⊕ a_2 ⊕ a_3 ⊕ … ⊕ a_n.\n\nHere \\& denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND), and ⊕ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nPlease calculate the number of winning for Moamen arrays a.\n\nAs the result may be very large, print the value modulo 1 000 000 007 (10^9 + 7).\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 5)— the number of test cases. \n\nEach test case consists of one line containing two integers n and k (1 ≤ n≤ 2⋅ 10^5, 0 ≤ k ≤ 2⋅ 10^5).\n\nOutput\n\nFor each test case, print a single value — the number of different arrays that Moamen wins with.\n\nPrint the result modulo 1 000 000 007 (10^9 + 7).\n\nExample\n\nInput\n\n\n3\n3 1\n2 1\n4 0\n\n\nOutput\n\n\n5\n2\n1\n\nNote\n\nIn the first example, n = 3, k = 1. As a result, all the possible arrays are [0,0,0], [0,0,1], [0,1,0], [1,0,0], [1,1,0], [0,1,1], [1,0,1], and [1,1,1].\n\nMoamen wins in only 5 of them: [0,0,0], [1,1,0], [0,1,1], [1,0,1], and [1,1,1].",
    "public_tests": [
      {
        "input": [
          "3",
          "3 1",
          "2 1",
          "4 0"
        ],
        "output": [
          "5",
          "2",
          "1"
        ]
      }
    ]
  },
  {
    "index": 49,
    "name": "1557_D",
    "description": "Moamen was drawing a grid of n rows and 10^9 columns containing only digits 0 and 1. Ezzat noticed what Moamen was drawing and became interested in the minimum number of rows one needs to remove to make the grid beautiful.\n\nA grid is beautiful if and only if for every two consecutive rows there is at least one column containing 1 in these two rows.\n\nEzzat will give you the number of rows n, and m segments of the grid that contain digits 1. Every segment is represented with three integers i, l, and r, where i represents the row number, and l and r represent the first and the last column of the segment in that row.\n\nFor example, if n = 3, m = 6, and the segments are (1,1,1), (1,7,8), (2,7,7), (2,15,15), (3,1,1), (3,15,15), then the grid is:\n\n<image>\n\nYour task is to tell Ezzat the minimum number of rows that should be removed to make the grid beautiful.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 3⋅10^5).\n\nEach of the next m lines contains three integers i, l, and r (1 ≤ i ≤ n, 1 ≤ l ≤ r ≤ 10^9). Each of these m lines means that row number i contains digits 1 in columns from l to r, inclusive.\n\nNote that the segments may overlap.\n\nOutput\n\nIn the first line, print a single integer k — the minimum number of rows that should be removed.\n\nIn the second line print k distinct integers r_1, r_2, …, r_k, representing the rows that should be removed (1 ≤ r_i ≤ n), in any order.\n\nIf there are multiple answers, print any.\n\nExamples\n\nInput\n\n\n3 6\n1 1 1\n1 7 8\n2 7 7\n2 15 15\n3 1 1\n3 15 15\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5 4\n1 2 3\n2 4 6\n3 3 5\n5 1 1\n\n\nOutput\n\n\n3\n2 4 5\n\nNote\n\nIn the first test case, the grid is the one explained in the problem statement. The grid has the following properties: \n\n  1. The 1-st row and the 2-nd row have a common 1 in the column 7. \n  2. The 2-nd row and the 3-rd row have a common 1 in the column 15. \n\nAs a result, this grid is beautiful and we do not need to remove any row.\n\nIn the second test case, the given grid is as follows: \n\n<image>",
    "public_tests": [
      {
        "input": [
          "5 4",
          "1 2 3",
          "2 4 6",
          "3 3 5",
          "5 1 1"
        ],
        "output": [
          "3",
          "1 4 5"
        ]
      },
      {
        "input": [
          "3 6",
          "1 1 1",
          "1 7 8",
          "2 7 7",
          "2 15 15",
          "3 1 1",
          "3 15 15"
        ],
        "output": [
          "0"
        ]
      }
    ]
  },
  {
    "index": 50,
    "name": "1558_C",
    "description": "You have a permutation: an array a = [a_1, a_2, …, a_n] of distinct integers from 1 to n. The length of the permutation n is odd.\n\nYou need to sort the permutation in increasing order.\n\nIn one step, you can choose any prefix of the permutation with an odd length and reverse it. Formally, if a = [a_1, a_2, …, a_n], you can choose any odd integer p between 1 and n, inclusive, and set a to [a_p, a_{p-1}, …, a_1, a_{p+1}, a_{p+2}, …, a_n].\n\nFind a way to sort a using no more than 5n/2 reversals of the above kind, or determine that such a way doesn't exist. The number of reversals doesn't have to be minimized.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 2021; n is odd) — the length of the permutation.\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the permutation itself. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2021.\n\nOutput\n\nFor each test case, if it's impossible to sort the given permutation in at most 5n/2 reversals, print a single integer -1.\n\nOtherwise, print an integer m (0 ≤ m ≤ 5n/2), denoting the number of reversals in your sequence of steps, followed by m integers p_i (1 ≤ p_i ≤ n; p_i is odd), denoting the lengths of the prefixes of a to be reversed, in chronological order.\n\nNote that m doesn't have to be minimized. If there are multiple answers, print any.\n\nExample\n\nInput\n\n\n3\n3\n1 2 3\n5\n3 4 5 2 1\n3\n2 1 3\n\n\nOutput\n\n\n4\n3 3 3 3\n2\n3 5\n-1\n\nNote\n\nIn the first test case, the permutation is already sorted. Any even number of reversals of the length 3 prefix doesn't change that fact.\n\nIn the second test case, after reversing the prefix of length 3 the permutation will change to [5, 4, 3, 2, 1], and then after reversing the prefix of length 5 the permutation will change to [1, 2, 3, 4, 5].\n\nIn the third test case, it's impossible to sort the permutation.",
    "public_tests": [
      {
        "input": [
          "3",
          "3",
          "1 2 3",
          "5",
          "3 4 5 2 1",
          "3",
          "2 1 3"
        ],
        "output": [
          "5",
          "3 1 3 3 3 ",
          "10",
          "3 1 3 3 5 3 1 3 3 3 ",
          "-1"
        ]
      }
    ]
  },
  {
    "index": 51,
    "name": "1558_D",
    "description": "Consider the insertion sort algorithm used to sort an integer sequence [a_1, a_2, …, a_n] of length n in non-decreasing order.\n\nFor each i in order from 2 to n, do the following. If a_i ≥ a_{i-1}, do nothing and move on to the next value of i. Otherwise, find the smallest j such that a_i < a_j, shift the elements on positions from j to i-1 by one position to the right, and write down the initial value of a_i to position j. In this case we'll say that we performed an insertion of an element from position i to position j.\n\nIt can be noticed that after processing any i, the prefix of the sequence [a_1, a_2, …, a_i] is sorted in non-decreasing order, therefore, the algorithm indeed sorts any sequence.\n\nFor example, sorting [4, 5, 3, 1, 3] proceeds as follows: \n\n  * i = 2: a_2 ≥ a_1, do nothing; \n  * i = 3: j = 1, insert from position 3 to position 1: [3, 4, 5, 1, 3]; \n  * i = 4: j = 1, insert from position 4 to position 1: [1, 3, 4, 5, 3]; \n  * i = 5: j = 3, insert from position 5 to position 3: [1, 3, 3, 4, 5]. \n\n\n\nYou are given an integer n and a list of m integer pairs (x_i, y_i). We are interested in sequences such that if you sort them using the above algorithm, exactly m insertions will be performed: first from position x_1 to position y_1, then from position x_2 to position y_2, ..., finally, from position x_m to position y_m.\n\nHow many sequences of length n consisting of (not necessarily distinct) integers between 1 and n, inclusive, satisfy the above condition? Print this number modulo 998 244 353.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5; 0 ≤ m < n) — the length of the sequence and the number of insertions.\n\nThe i-th of the following m lines contains two integers x_i and y_i (2 ≤ x_1 < x_2 < … < x_m ≤ n; 1 ≤ y_i < x_i). These lines describe the sequence of insertions in chronological order.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 2 ⋅ 10^5. Note that there is no constraint on the sum of n of the same kind.\n\nOutput\n\nFor each test case, print the number of sequences of length n consisting of integers from 1 to n such that sorting them with the described algorithm produces the given sequence of insertions, modulo 998 244 353.\n\nExample\n\nInput\n\n\n3\n3 0\n3 2\n2 1\n3 1\n5 3\n3 1\n4 1\n5 3\n\n\nOutput\n\n\n10\n1\n21\n\nNote\n\nIn the first test case, the algorithm performs no insertions — therefore, the initial sequence is already sorted in non-decreasing order. There are 10 such sequences: [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 2, 3], [1, 3, 3], [2, 2, 2], [2, 2, 3], [2, 3, 3], [3, 3, 3].\n\nIn the second test case, the only sequence satisfying the conditions is [3, 2, 1].\n\nIn the third test case, [4, 5, 3, 1, 3] is one of the sought sequences.",
    "public_tests": [
      {
        "input": [
          "3",
          "3 0",
          "3 2",
          "2 1",
          "3 1",
          "5 3",
          "3 1",
          "4 1",
          "5 3"
        ],
        "output": [
          "10",
          "1",
          "21"
        ]
      }
    ]
  },
  {
    "index": 52,
    "name": "1558_E",
    "description": "In a certain video game, the player controls a hero characterized by a single integer value: power.\n\nOn the current level, the hero got into a system of n caves numbered from 1 to n, and m tunnels between them. Each tunnel connects two distinct caves. Any two caves are connected with at most one tunnel. Any cave can be reached from any other cave by moving via tunnels.\n\nThe hero starts the level in cave 1, and every other cave contains a monster.\n\nThe hero can move between caves via tunnels. If the hero leaves a cave and enters a tunnel, he must finish his movement and arrive at the opposite end of the tunnel.\n\nThe hero can use each tunnel to move in both directions. However, the hero can not use the same tunnel twice in a row. Formally, if the hero has just moved from cave i to cave j via a tunnel, he can not head back to cave i immediately after, but he can head to any other cave connected to cave j with a tunnel.\n\nIt is known that at least two tunnels come out of every cave, thus, the hero will never find himself in a dead end even considering the above requirement.\n\nTo pass the level, the hero must beat the monsters in all the caves. When the hero enters a cave for the first time, he will have to fight the monster in it. The hero can beat the monster in cave i if and only if the hero's power is strictly greater than a_i. In case of beating the monster, the hero's power increases by b_i. If the hero can't beat the monster he's fighting, the game ends and the player loses.\n\nAfter the hero beats the monster in cave i, all subsequent visits to cave i won't have any consequences: the cave won't have any monsters, and the hero's power won't change either.\n\nFind the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (3 ≤ n ≤ 1000; n ≤ m ≤ min((n(n-1))/(2), 2000)) — the number of caves and tunnels.\n\nThe second line contains n-1 integers a_2, a_3, …, a_n (1 ≤ a_i ≤ 10^9) — values the hero's power are compared to while fighting monsters in caves 2, 3, …, n.\n\nThe third line contains n-1 integers b_2, b_3, …, b_n (1 ≤ b_i ≤ 10^9) — increases applied to the hero's power for beating monsters in caves 2, 3, …, n.\n\nEach of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) — the numbers of caves connected with a tunnel.\n\nNo two caves are connected with more than one tunnel. Any cave can be reached from any other cave by moving via tunnels. At least two tunnels come out of every cave.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the sum of m over all test cases does not exceed 2000.\n\nOutput\n\nFor each test case print a single integer — the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.\n\nExample\n\nInput\n\n\n3\n4 4\n11 22 13\n8 7 5\n1 2\n2 3\n3 4\n4 1\n4 4\n11 22 13\n5 7 8\n1 2\n2 3\n3 4\n4 1\n5 7\n10 40 20 30\n7 2 10 5\n1 2\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5\n\n\nOutput\n\n\n15\n15\n19\n\nNote\n\nIn the first test case, the hero can pass the level with initial power 15 as follows: \n\n  * move from cave 1 to cave 2: since 15 > 11, the hero beats the monster, and his power increases to 15 + 8 = 23; \n  * move from cave 2 to cave 3: since 23 > 22, the hero beats the monster, and his power increases to 23 + 7 = 30; \n  * move from cave 3 to cave 4: since 30 > 13, the hero beats the monster, and his power increases to 30 + 5 = 35. \n\n\n\nIn the second test case, the situation is similar except that the power increases for beating monsters in caves 2 and 4 are exchanged. The hero can follow a different route, 1 → 4 → 3 → 2, and pass the level with initial power 15.\n\nIn the third test case, the hero can pass the level with initial power 19 as follows: \n\n  * move from cave 1 to cave 2: since 19 > 10, the hero beats the monster, and his power increases to 19 + 7 = 26; \n  * move from cave 2 to cave 4: since 26 > 20, the hero beats the monster, and his power increases to 26 + 10 = 36; \n  * move from cave 4 to cave 5: since 36 > 30, the hero beats the monster, and his power increases to 36 + 5 = 41; \n  * move from cave 5 to cave 2: there is no monster in this cave anymore, nothing happens; \n  * move from cave 2 to cave 3: since 41 > 40, the hero beats the monster, and his power increases to 41 + 2 = 43. ",
    "public_tests": [
      {
        "input": [
          "3",
          "4 4",
          "11 22 13",
          "8 7 5",
          "1 2",
          "2 3",
          "3 4",
          "4 1",
          "4 4",
          "11 22 13",
          "5 7 8",
          "1 2",
          "2 3",
          "3 4",
          "4 1",
          "5 7",
          "10 40 20 30",
          "7 2 10 5",
          "1 2",
          "1 5",
          "2 3",
          "2 4",
          "2 5",
          "3 4",
          "4 5"
        ],
        "output": [
          "15",
          "15",
          "19"
        ]
      }
    ]
  },
  {
    "index": 53,
    "name": "1559_A",
    "description": "Mocha is a young girl from high school. She has learned so much interesting knowledge from her teachers, especially her math teacher. Recently, Mocha is learning about binary system and very interested in bitwise operation.\n\nThis day, Mocha got a sequence a of length n. In each operation, she can select an arbitrary interval [l, r] and for all values i (0≤ i ≤ r-l), replace a_{l+i} with a_{l+i}  \\&  a_{r-i} at the same time, where \\& denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND). This operation can be performed any number of times.\n\nFor example, if n=5, the array is [a_1,a_2,a_3,a_4,a_5], and Mocha selects the interval [2,5], then the new array is [a_1,a_2 \\&  a_5, a_3 \\&  a_4, a_4 \\&  a_3, a_5 \\&  a_2].\n\nNow Mocha wants to minimize the maximum value in the sequence. As her best friend, can you help her to get the answer?\n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9).\n\nOutput\n\nFor each test case, print one integer — the minimal value of the maximum value in the sequence.\n\nExample\n\nInput\n\n\n4\n2\n1 2\n3\n1 1 3\n4\n3 11 3 7\n5\n11 7 15 3 7\n\n\nOutput\n\n\n0\n1\n3\n3\n\nNote\n\nIn the first test case, Mocha can choose the interval [1,2], then the sequence becomes [ 0, 0], where the first element is 1 \\& 2, and the second element is 2 \\& 1.\n\nIn the second test case, Mocha can choose the interval [1,3], then the sequence becomes [ 1,1,1], where the first element is 1 \\& 3, the second element is 1 \\& 1, and the third element is 3 \\& 1.",
    "public_tests": [
      {
        "input": [
          "4",
          "2",
          "1 2",
          "3",
          "1 1 3",
          "4",
          "3 11 3 7",
          "5",
          "11 7 15 3 7"
        ],
        "output": [
          "0",
          "1",
          "3",
          "3"
        ]
      }
    ]
  },
  {
    "index": 54,
    "name": "1559_B",
    "description": "As their story unravels, a timeless tale is told once again...\n\nShirahime, a friend of Mocha's, is keen on playing the music game Arcaea and sharing Mocha interesting puzzles to solve. This day, Shirahime comes up with a new simple puzzle and wants Mocha to solve them. However, these puzzles are too easy for Mocha to solve, so she wants you to solve them and tell her the answers. The puzzles are described as follow.\n\nThere are n squares arranged in a row, and each of them can be painted either red or blue.\n\nAmong these squares, some of them have been painted already, and the others are blank. You can decide which color to paint on each blank square.\n\nSome pairs of adjacent squares may have the same color, which is imperfect. We define the imperfectness as the number of pairs of adjacent squares that share the same color.\n\nFor example, the imperfectness of \"BRRRBBR\" is 3, with \"BB\" occurred once and \"RR\" occurred twice.\n\nYour goal is to minimize the imperfectness and print out the colors of the squares after painting. \n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains an integer n (1≤ n≤ 100) — the length of the squares row.\n\nThe second line of each test case contains a string s with length n, containing characters 'B', 'R' and '?'. Here 'B' stands for a blue square, 'R' for a red square, and '?' for a blank square.\n\nOutput\n\nFor each test case, print a line with a string only containing 'B' and 'R', the colors of the squares after painting, which imperfectness is minimized. If there are multiple solutions, print any of them.\n\nExample\n\nInput\n\n\n5\n7\n?R???BR\n7\n???R???\n1\n?\n1\nB\n10\n?R??RB??B?\n\n\nOutput\n\n\nBRRBRBR\nBRBRBRB\nB\nB\nBRRBRBBRBR\n\nNote\n\nIn the first test case, if the squares are painted \"BRRBRBR\", the imperfectness is 1 (since squares 2 and 3 have the same color), which is the minimum possible imperfectness.",
    "public_tests": [
      {
        "input": [
          "5",
          "7",
          "?R???BR",
          "7",
          "???R???",
          "1",
          "?",
          "1",
          "B",
          "10",
          "?R??RB??B?"
        ],
        "output": [
          "BRBRBBR",
          "BRBRBRB",
          "B",
          "B",
          "BRBRRBRBBR"
        ]
      }
    ]
  },
  {
    "index": 55,
    "name": "1559_C",
    "description": "The city where Mocha lives in is called Zhijiang. There are n+1 villages and 2n-1 directed roads in this city. \n\nThere are two kinds of roads:\n\n  * n-1 roads are from village i to village i+1, for all 1≤ i ≤ n-1. \n  * n roads can be described by a sequence a_1,…,a_n. If a_i=0, the i-th of these roads goes from village i to village n+1, otherwise it goes from village n+1 to village i, for all 1≤ i≤ n. \n\n\n\nMocha plans to go hiking with Taki this weekend. To avoid the trip being boring, they plan to go through every village exactly once. They can start and finish at any villages. Can you help them to draw up a plan? \n\nInput\n\nEach test contains multiple test cases. \n\nThe first line contains a single integer t (1 ≤ t ≤ 20) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^4) — indicates that the number of villages is n+1.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 1). If a_i=0, it means that there is a road from village i to village n+1. If a_i=1, it means that there is a road from village n+1 to village i.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print a line with n+1 integers, where the i-th number is the i-th village they will go through. If the answer doesn't exist, print -1.\n\nIf there are multiple correct answers, you can print any one of them.\n\nExample\n\nInput\n\n\n2\n3\n0 1 0\n3\n1 1 0\n\n\nOutput\n\n\n1 4 2 3 \n4 1 2 3 \n\nNote\n\nIn the first test case, the city looks like the following graph:\n\n<image>\n\nSo all possible answers are (1 → 4 → 2 → 3), (1 → 2 → 3 → 4).\n\nIn the second test case, the city looks like the following graph:\n\n<image>\n\nSo all possible answers are (4 → 1 → 2 → 3), (1 → 2 → 3 → 4), (3 → 4 → 1 → 2), (2 → 3 → 4 → 1).",
    "public_tests": [
      {
        "input": [
          "2",
          "3",
          "0 1 0",
          "3",
          "1 1 0"
        ],
        "output": [
          "1 2 3 4",
          "1 2 3 4"
        ]
      }
    ]
  },
  {
    "index": 56,
    "name": "1559_D1",
    "description": "This is the easy version of the problem. The only difference between the two versions is the constraint on n. You can make hacks only if all versions of the problem are solved.\n\nA forest is an undirected graph without cycles (not necessarily connected).\n\nMocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n, and they would like to add edges to their forests such that: \n\n  * After adding edges, both of their graphs are still forests. \n  * They add the same edges. That is, if an edge (u, v) is added to Mocha's forest, then an edge (u, v) is added to Diana's forest, and vice versa. \n\n\n\nMocha and Diana want to know the maximum number of edges they can add, and which edges to add.\n\nInput\n\nThe first line contains three integers n, m_1 and m_2 (1 ≤ n ≤ 1000, 0 ≤ m_1, m_2 < n) — the number of nodes and the number of initial edges in Mocha's forest and Diana's forest.\n\nEach of the next m_1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the edges in Mocha's forest.\n\nEach of the next m_2 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the edges in Diana's forest.\n\nOutput\n\nThe first line contains only one integer h, the maximum number of edges Mocha and Diana can add (in each forest).\n\nEach of the next h lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the edge you add each time.\n\nIf there are multiple correct answers, you can print any one of them.\n\nExamples\n\nInput\n\n\n3 2 2\n1 2\n2 3\n1 2\n1 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5 3 2\n5 4\n2 1\n4 3\n4 3\n1 4\n\n\nOutput\n\n\n1\n2 4\n\n\nInput\n\n\n8 1 2\n1 7\n2 6\n1 5\n\n\nOutput\n\n\n5\n5 2\n2 3\n3 4\n4 7\n6 8\n\nNote\n\nIn the first example, we cannot add any edge.\n\nIn the second example, the initial forests are as follows.\n\n<image>\n\nWe can add an edge (2, 4).\n\n<image>",
    "public_tests": [
      {
        "input": [
          "8 1 2",
          "1 7",
          "2 6",
          "1 5"
        ],
        "output": [
          "5",
          "1 2",
          "1 3",
          "1 4",
          "1 8",
          "5 7"
        ]
      },
      {
        "input": [
          "5 3 2",
          "5 4",
          "2 1",
          "4 3",
          "4 3",
          "1 4"
        ],
        "output": [
          "1",
          "1 5"
        ]
      },
      {
        "input": [
          "3 2 2",
          "1 2",
          "2 3",
          "1 2",
          "1 3"
        ],
        "output": [
          "0"
        ]
      }
    ]
  },
  {
    "index": 57,
    "name": "1559_E",
    "description": "Mocha wants to be an astrologer. There are n stars which can be seen in Zhijiang, and the brightness of the i-th star is a_i. \n\nMocha considers that these n stars form a constellation, and she uses (a_1,a_2,…,a_n) to show its state. A state is called mathematical if all of the following three conditions are satisfied:\n\n  * For all i (1≤ i≤ n), a_i is an integer in the range [l_i, r_i].\n  * ∑  _{i=1} ^ n a_i ≤ m.\n  * \\gcd(a_1,a_2,…,a_n)=1.\n\n\n\nHere, \\gcd(a_1,a_2,…,a_n) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers a_1,a_2,…,a_n.\n\nMocha is wondering how many different mathematical states of this constellation exist. Because the answer may be large, you must find it modulo 998 244 353.\n\nTwo states (a_1,a_2,…,a_n) and (b_1,b_2,…,b_n) are considered different if there exists i (1≤ i≤ n) such that a_i ≠ b_i.\n\nInput\n\nThe first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 10^5) — the number of stars and the upper bound of the sum of the brightness of stars.\n\nEach of the next n lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ m) — the range of the brightness of the i-th star.\n\nOutput\n\nPrint a single integer — the number of different mathematical states of this constellation, modulo 998 244 353.\n\nExamples\n\nInput\n\n\n2 4\n1 3\n1 2\n\n\nOutput\n\n\n4\n\nInput\n\n\n5 10\n1 10\n1 10\n1 10\n1 10\n1 10\n\n\nOutput\n\n\n251\n\nInput\n\n\n5 100\n1 94\n1 96\n1 91\n4 96\n6 97\n\n\nOutput\n\n\n47464146\n\nNote\n\nIn the first example, there are 4 different mathematical states of this constellation:\n\n  * a_1=1, a_2=1.\n  * a_1=1, a_2=2.\n  * a_1=2, a_2=1.\n  * a_1=3, a_2=1.",
    "public_tests": [
      {
        "input": [
          "5 10",
          "1 10",
          "1 10",
          "1 10",
          "1 10",
          "1 10"
        ],
        "output": [
          "251"
        ]
      },
      {
        "input": [
          "2 4",
          "1 3",
          "1 2"
        ],
        "output": [
          "4"
        ]
      },
      {
        "input": [
          "5 100",
          "1 94",
          "1 96",
          "1 91",
          "4 96",
          "6 97"
        ],
        "output": [
          "47464146"
        ]
      }
    ]
  },
  {
    "index": 58,
    "name": "1560_A",
    "description": "Polycarp doesn't like integers that are divisible by 3 or end with the digit 3 in their decimal representation. Integers that meet both conditions are disliked by Polycarp, too.\n\nPolycarp starts to write out the positive (greater than 0) integers which he likes: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, .... Output the k-th element of this sequence (the elements are numbered from 1).\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 ≤ k ≤ 1000).\n\nOutput\n\nFor each test case, output in a separate line one integer x — the k-th element of the sequence that was written out by Polycarp.\n\nExample\n\nInput\n\n\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1000\n\n\nOutput\n\n\n1\n2\n4\n5\n7\n8\n10\n11\n14\n1666",
    "public_tests": [
      {
        "input": [
          "10",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "1000"
        ],
        "output": [
          "1",
          "2",
          "4",
          "5",
          "7",
          "8",
          "10",
          "11",
          "14",
          "1666"
        ]
      }
    ]
  },
  {
    "index": 59,
    "name": "1560_B",
    "description": "Some number of people (this number is even) have stood in a circle. The people stand in the circle evenly. They are numbered clockwise starting from a person with the number 1. Each person is looking through the circle's center at the opposite person.\n\n<image> A sample of a circle of 6 persons. The orange arrows indicate who is looking at whom.\n\nYou don't know the exact number of people standing in the circle (but this number is even, no doubt). It is known that the person with the number a is looking at the person with the number b (and vice versa, of course). What is the number associated with a person being looked at by the person with the number c? If, for the specified a, b, and c, no such circle exists, output -1.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing three distinct integers a, b, c (1 ≤ a,b,c ≤ 10^8).\n\nOutput\n\nFor each test case output in a separate line a single integer d — the number of the person being looked at by the person with the number c in a circle such that the person with the number a is looking at the person with the number b. If there are multiple solutions, print any of them. Output -1 if there's no circle meeting the given conditions.\n\nExample\n\nInput\n\n\n7\n6 2 4\n2 3 1\n2 4 10\n5 3 4\n1 3 2\n2 5 4\n4 3 2\n\n\nOutput\n\n\n8\n-1\n-1\n-1\n4\n1\n-1\n\nNote\n\nIn the first test case, there's a desired circle of 8 people. The person with the number 6 will look at the person with the number 2 and the person with the number 8 will look at the person with the number 4.\n\nIn the second test case, there's no circle meeting the conditions. If the person with the number 2 is looking at the person with the number 3, the circle consists of 2 people because these persons are neighbors. But, in this case, they must have the numbers 1 and 2, but it doesn't meet the problem's conditions.\n\nIn the third test case, the only circle with the persons with the numbers 2 and 4 looking at each other consists of 4 people. Therefore, the person with the number 10 doesn't occur in the circle.",
    "public_tests": [
      {
        "input": [
          "7",
          "6 2 4",
          "2 3 1",
          "2 4 10",
          "5 3 4",
          "1 3 2",
          "2 5 4",
          "4 3 2"
        ],
        "output": [
          "8",
          "-1",
          "-1",
          "-1",
          "4",
          "1",
          "-1"
        ]
      }
    ]
  },
  {
    "index": 60,
    "name": "1560_C",
    "description": "Polycarp has found a table having an infinite number of rows and columns. The rows are numbered from 1, starting from the topmost one. The columns are numbered from 1, starting from the leftmost one.\n\nInitially, the table hasn't been filled and Polycarp wants to fix it. He writes integers from 1 and so on to the table as follows.\n\n<image> The figure shows the placement of the numbers from 1 to 10. The following actions are denoted by the arrows.\n\nThe leftmost topmost cell of the table is filled with the number 1. Then he writes in the table all positive integers beginning from 2 sequentially using the following algorithm.\n\nFirst, Polycarp selects the leftmost non-filled cell in the first row and fills it. Then, while the left neighbor of the last filled cell is filled, he goes down and fills the next cell. So he goes down until the last filled cell has a non-filled neighbor to the left (look at the vertical arrow going down in the figure above).\n\nAfter that, he fills the cells from the right to the left until he stops at the first column (look at the horizontal row in the figure above). Then Polycarp selects the leftmost non-filled cell in the first row, goes down, and so on.\n\nA friend of Polycarp has a favorite number k. He wants to know which cell will contain the number. Help him to find the indices of the row and the column, such that the intersection of the row and the column is the cell containing the number k.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer k (1 ≤ k ≤ 10^9) which location must be found.\n\nOutput\n\nFor each test case, output in a separate line two integers r and c (r, c ≥ 1) separated by spaces — the indices of the row and the column containing the cell filled by the number k, respectively.\n\nExample\n\nInput\n\n\n7\n11\n14\n5\n4\n1\n2\n1000000000\n\n\nOutput\n\n\n2 4\n4 3\n1 3\n2 1\n1 1\n1 2\n31623 14130",
    "public_tests": [
      {
        "input": [
          "7",
          "11",
          "14",
          "5",
          "4",
          "1",
          "2",
          "1000000000"
        ],
        "output": [
          "2 4",
          "4 3",
          "1 3",
          "2 1",
          "1 1",
          "1 2",
          "31623 14130"
        ]
      }
    ]
  },
  {
    "index": 61,
    "name": "1560_D",
    "description": "You are given an integer n. In 1 move, you can do one of the following actions:\n\n  * erase any digit of the number (it's acceptable that the number before the operation has exactly one digit and after the operation, it is \"empty\"); \n  * add one digit to the right. \n\n\n\nThe actions may be performed in any order any number of times.\n\nNote that if, after deleting some digit from a number, it will contain leading zeroes, they will not be deleted. E.g. if you delete from the number 301 the digit 3, the result is the number 01 (not 1).\n\nYou need to perform the minimum number of actions to make the number any power of 2 (i.e. there's an integer k (k ≥ 0) such that the resulting number is equal to 2^k). The resulting number must not have leading zeroes.\n\nE.g. consider n=1052. The answer is equal to 2. First, let's add to the right one digit 4 (the result will be 10524). Then let's erase the digit 5, so the result will be 1024 which is a power of 2.\n\nE.g. consider n=8888. The answer is equal to 3. Let's erase any of the digits 8 three times. The result will be 8 which is a power of 2.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing one integer n (1 ≤ n ≤ 10^9).\n\nOutput\n\nFor each test case, output in a separate line one integer m — the minimum number of moves to transform the number into any power of 2.\n\nExample\n\nInput\n\n\n12\n1052\n8888\n6\n75\n128\n1\n301\n12048\n1504\n6656\n1000000000\n687194767\n\n\nOutput\n\n\n2\n3\n1\n3\n0\n0\n2\n1\n3\n4\n9\n2\n\nNote\n\nThe answer for the first test case was considered above.\n\nThe answer for the second test case was considered above.\n\nIn the third test case, it's enough to add to the right the digit 4 — the number 6 will turn into 64.\n\nIn the fourth test case, let's add to the right the digit 8 and then erase 7 and 5 — the taken number will turn into 8.\n\nThe numbers of the fifth and the sixth test cases are already powers of two so there's no need to make any move.\n\nIn the seventh test case, you can delete first of all the digit 3 (the result is 01) and then the digit 0 (the result is 1).",
    "public_tests": [
      {
        "input": [
          "12",
          "1052",
          "8888",
          "6",
          "75",
          "128",
          "1",
          "301",
          "12048",
          "1504",
          "6656",
          "1000000000",
          "687194767"
        ],
        "output": [
          "2",
          "3",
          "1",
          "3",
          "0",
          "0",
          "2",
          "1",
          "3",
          "4",
          "9",
          "2"
        ]
      }
    ]
  },
  {
    "index": 62,
    "name": "1560_E",
    "description": "Polycarp has a string s. Polycarp performs the following actions until the string s is empty (t is initially an empty string):\n\n  * he adds to the right to the string t the string s, i.e. he does t = t + s, where t + s is a concatenation of the strings t and s; \n  * he selects an arbitrary letter of s and removes from s all its occurrences (the selected letter must occur in the string s at the moment of performing this action). \n\n\n\nPolycarp performs this sequence of actions strictly in this order.\n\nNote that after Polycarp finishes the actions, the string s will be empty and the string t will be equal to some value (that is undefined and depends on the order of removing).\n\nE.g. consider s=\"abacaba\" so the actions may be performed as follows:\n\n  * t=\"abacaba\", the letter 'b' is selected, then s=\"aacaa\"; \n  * t=\"abacabaaacaa\", the letter 'a' is selected, then s=\"c\"; \n  * t=\"abacabaaacaac\", the letter 'c' is selected, then s=\"\" (the empty string). \n\n\n\nYou need to restore the initial value of the string s using only the final value of t and find the order of removing letters from s.\n\nInput\n\nThe first line contains one integer T (1 ≤ T ≤ 10^4) — the number of test cases. Then T test cases follow.\n\nEach test case contains one string t consisting of lowercase letters of the Latin alphabet. The length of t doesn't exceed 5 ⋅ 10^5. The sum of lengths of all strings t in the test cases doesn't exceed 5 ⋅ 10^5.\n\nOutput\n\nFor each test case output in a separate line:\n\n  * -1, if the answer doesn't exist; \n  * two strings separated by spaces. The first one must contain a possible initial value of s. The second one must contain a sequence of letters — it's in what order one needs to remove letters from s to make the string t. E.g. if the string \"bac\" is outputted, then, first, all occurrences of the letter 'b' were deleted, then all occurrences of 'a', and then, finally, all occurrences of 'c'. If there are multiple solutions, print any one. \n\nExample\n\nInput\n\n\n7\nabacabaaacaac\nnowyouknowthat\npolycarppoycarppoyarppyarppyrpprppp\nisi\neverywherevrywhrvryhrvrhrvhv\nhaaha\nqweqeewew\n\n\nOutput\n\n\nabacaba bac\n-1\npolycarp lcoayrp\nis si\neverywhere ewyrhv\n-1\n-1\n\nNote\n\nThe first test case is considered in the statement.",
    "public_tests": [
      {
        "input": [
          "7",
          "abacabaaacaac",
          "nowyouknowthat",
          "polycarppoycarppoyarppyarppyrpprppp",
          "isi",
          "everywherevrywhrvryhrvrhrvhv",
          "haaha",
          "qweqeewew"
        ],
        "output": [
          "abacaba bac",
          "-1",
          "polycarp lcoayrp",
          "is si",
          "everywhere ewyrhv",
          "-1",
          "-1"
        ]
      }
    ]
  },
  {
    "index": 63,
    "name": "1560_F1",
    "description": "It is a simplified version of problem F2. The difference between them is the constraints (F1: k ≤ 2, F2: k ≤ 10).\n\nYou are given an integer n. Find the minimum integer x such that x ≥ n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 2).\n\nOutput\n\nFor each test case output on a separate line x — the minimum k-beautiful integer such that x ≥ n.\n\nExample\n\nInput\n\n\n4\n1 1\n221 2\n177890 2\n998244353 1\n\n\nOutput\n\n\n1\n221\n181111\n999999999",
    "public_tests": [
      {
        "input": [
          "4",
          "1 1",
          "221 2",
          "177890 2",
          "998244353 1"
        ],
        "output": [
          "1",
          "221",
          "181111",
          "999999999"
        ]
      }
    ]
  },
  {
    "index": 64,
    "name": "1560_F2",
    "description": "It is a complicated version of problem F1. The difference between them is the constraints (F1: k ≤ 2, F2: k ≤ 10).\n\nYou are given an integer n. Find the minimum integer x such that x ≥ n and the number x is k-beautiful.\n\nA number is called k-beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E.g. if k = 2, the numbers 3434443, 55550, 777 and 21 are k-beautiful whereas the numbers 120, 445435 and 998244353 are not.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing two integers n and k (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10).\n\nOutput\n\nFor each test case output on a separate line x — the minimum k-beautiful integer such that x ≥ n.\n\nExample\n\nInput\n\n\n6\n2021 3\n177890 2\n34512 3\n724533 4\n998244353 1\n12345678 10\n\n\nOutput\n\n\n2021\n181111\n34533\n724542\n999999999\n12345678",
    "public_tests": [
      {
        "input": [
          "6",
          "2021 3",
          "177890 2",
          "34512 3",
          "724533 4",
          "998244353 1",
          "12345678 10"
        ],
        "output": [
          "2021",
          "181111",
          "34533",
          "724542",
          "999999999",
          "12345678"
        ]
      }
    ]
  },
  {
    "index": 65,
    "name": "1561_A",
    "description": "You have a permutation: an array a = [a_1, a_2, …, a_n] of distinct integers from 1 to n. The length of the permutation n is odd.\n\nConsider the following algorithm of sorting the permutation in increasing order.\n\nA helper procedure of the algorithm, f(i), takes a single argument i (1 ≤ i ≤ n-1) and does the following. If a_i > a_{i+1}, the values of a_i and a_{i+1} are exchanged. Otherwise, the permutation doesn't change.\n\nThe algorithm consists of iterations, numbered with consecutive integers starting with 1. On the i-th iteration, the algorithm does the following: \n\n  * if i is odd, call f(1), f(3), …, f(n - 2); \n  * if i is even, call f(2), f(4), …, f(n - 1). \n\n\n\nIt can be proven that after a finite number of iterations the permutation will be sorted in increasing order.\n\nAfter how many iterations will this happen for the first time?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 999; n is odd) — the length of the permutation.\n\nThe second line contains n distinct integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the permutation itself. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 999.\n\nOutput\n\nFor each test case print the number of iterations after which the permutation will become sorted in increasing order for the first time.\n\nIf the given permutation is already sorted, print 0.\n\nExample\n\nInput\n\n\n3\n3\n3 2 1\n7\n4 5 7 1 3 2 6\n5\n1 2 3 4 5\n\n\nOutput\n\n\n3\n5\n0\n\nNote\n\nIn the first test case, the permutation will be changing as follows: \n\n  * after the 1-st iteration: [2, 3, 1]; \n  * after the 2-nd iteration: [2, 1, 3]; \n  * after the 3-rd iteration: [1, 2, 3]. \n\n\n\nIn the second test case, the permutation will be changing as follows: \n\n  * after the 1-st iteration: [4, 5, 1, 7, 2, 3, 6]; \n  * after the 2-nd iteration: [4, 1, 5, 2, 7, 3, 6]; \n  * after the 3-rd iteration: [1, 4, 2, 5, 3, 7, 6]; \n  * after the 4-th iteration: [1, 2, 4, 3, 5, 6, 7]; \n  * after the 5-th iteration: [1, 2, 3, 4, 5, 6, 7]. \n\n\n\nIn the third test case, the permutation is already sorted and the answer is 0.",
    "public_tests": [
      {
        "input": [
          "3",
          "3",
          "3 2 1",
          "7",
          "4 5 7 1 3 2 6",
          "5",
          "1 2 3 4 5"
        ],
        "output": [
          "3",
          "5",
          "0"
        ]
      }
    ]
  },
  {
    "index": 66,
    "name": "1561_B",
    "description": "Alice and Borys are playing tennis.\n\nA tennis match consists of games. In each game, one of the players is serving and the other one is receiving.\n\nPlayers serve in turns: after a game where Alice is serving follows a game where Borys is serving, and vice versa.\n\nEach game ends with a victory of one of the players. If a game is won by the serving player, it's said that this player holds serve. If a game is won by the receiving player, it's said that this player breaks serve.\n\nIt is known that Alice won a games and Borys won b games during the match. It is unknown who served first and who won which games.\n\nFind all values of k such that exactly k breaks could happen during the match between Alice and Borys in total.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3). Description of the test cases follows.\n\nEach of the next t lines describes one test case and contains two integers a and b (0 ≤ a, b ≤ 10^5; a + b > 0) — the number of games won by Alice and Borys, respectively.\n\nIt is guaranteed that the sum of a + b over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print two lines.\n\nIn the first line, print a single integer m (1 ≤ m ≤ a + b + 1) — the number of values of k such that exactly k breaks could happen during the match.\n\nIn the second line, print m distinct integers k_1, k_2, …, k_m (0 ≤ k_1 < k_2 < … < k_m ≤ a + b) — the sought values of k in increasing order.\n\nExample\n\nInput\n\n\n3\n2 1\n1 1\n0 5\n\n\nOutput\n\n\n4\n0 1 2 3\n2\n0 2\n2\n2 3\n\nNote\n\nIn the first test case, any number of breaks between 0 and 3 could happen during the match: \n\n  * Alice holds serve, Borys holds serve, Alice holds serve: 0 breaks; \n  * Borys holds serve, Alice holds serve, Alice breaks serve: 1 break; \n  * Borys breaks serve, Alice breaks serve, Alice holds serve: 2 breaks; \n  * Alice breaks serve, Borys breaks serve, Alice breaks serve: 3 breaks. \n\n\n\nIn the second test case, the players could either both hold serves (0 breaks) or both break serves (2 breaks).\n\nIn the third test case, either 2 or 3 breaks could happen: \n\n  * Borys holds serve, Borys breaks serve, Borys holds serve, Borys breaks serve, Borys holds serve: 2 breaks; \n  * Borys breaks serve, Borys holds serve, Borys breaks serve, Borys holds serve, Borys breaks serve: 3 breaks. ",
    "public_tests": [
      {
        "input": [
          "3",
          "2 1",
          "1 1",
          "0 5"
        ],
        "output": [
          "4",
          "0 1 2 3 ",
          "2",
          "0 2 ",
          "2",
          "2 3"
        ]
      }
    ]
  },
  {
    "index": 67,
    "name": "1561_C",
    "description": "In a certain video game, the player controls a hero characterized by a single integer value: power. The hero will have to beat monsters that are also characterized by a single integer value: armor.\n\nOn the current level, the hero is facing n caves. To pass the level, the hero must enter all the caves in some order, each cave exactly once, and exit every cave safe and sound. When the hero enters cave i, he will have to fight k_i monsters in a row: first a monster with armor a_{i, 1}, then a monster with armor a_{i, 2} and so on, finally, a monster with armor a_{i, k_i}.\n\nThe hero can beat a monster if and only if the hero's power is strictly greater than the monster's armor. If the hero can't beat the monster he's fighting, the game ends and the player loses. Note that once the hero enters a cave, he can't exit it before he fights all the monsters in it, strictly in the given order.\n\nEach time the hero beats a monster, the hero's power increases by 1.\n\nFind the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of caves.\n\nThe i-th of the next n lines contains an integer k_i (1 ≤ k_i ≤ 10^5) — the number of monsters in the i-th cave, followed by k_i integers a_{i, 1}, a_{i, 2}, …, a_{i, k_i} (1 ≤ a_{i, j} ≤ 10^9) — armor levels of the monsters in cave i in order the hero has to fight them.\n\nIt is guaranteed that the sum of k_i over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a single integer — the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.\n\nExample\n\nInput\n\n\n2\n1\n1 42\n2\n3 10 15 8\n2 12 11\n\n\nOutput\n\n\n43\n13\n\nNote\n\nIn the first test case, the hero has to beat a single monster with armor 42, it's enough to have power 43 to achieve that.\n\nIn the second test case, the hero can pass the level with initial power 13 as follows: \n\n  * enter cave 2: \n    * beat a monster with armor 12, power increases to 14; \n    * beat a monster with armor 11, power increases to 15; \n  * enter cave 1: \n    * beat a monster with armor 10, power increases to 16; \n    * beat a monster with armor 15, power increases to 17; \n    * beat a monster with armor 8, power increases to 18. ",
    "public_tests": [
      {
        "input": [
          "2",
          "1",
          "1 42",
          "2",
          "3 10 15 8",
          "2 12 11"
        ],
        "output": [
          "43",
          "13"
        ]
      }
    ]
  },
  {
    "index": 68,
    "name": "1561_D1",
    "description": "This version of the problem differs from the next one only in the constraint on n.\n\nNote that the memory limit in this problem is lower than in others.\n\nYou have a vertical strip with n cells, numbered consecutively from 1 to n from top to bottom.\n\nYou also have a token that is initially placed in cell n. You will move the token up until it arrives at cell 1.\n\nLet the token be in cell x > 1 at some moment. One shift of the token can have either of the following kinds: \n\n  * Subtraction: you choose an integer y between 1 and x-1, inclusive, and move the token from cell x to cell x - y. \n  * Floored division: you choose an integer z between 2 and x, inclusive, and move the token from cell x to cell ⌊ x/z ⌋ (x divided by z rounded down). \n\n\n\nFind the number of ways to move the token from cell n to cell 1 using one or more shifts, and print it modulo m. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).\n\nInput\n\nThe only line contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5; 10^8 < m < 10^9; m is a prime number) — the length of the strip and the modulo.\n\nOutput\n\nPrint the number of ways to move the token from cell n to cell 1, modulo m.\n\nExamples\n\nInput\n\n\n3 998244353\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n5 998244353\n\n\nOutput\n\n\n25\n\n\nInput\n\n\n42 998244353\n\n\nOutput\n\n\n793019428\n\nNote\n\nIn the first test, there are three ways to move the token from cell 3 to cell 1 in one shift: using subtraction of y = 2, or using division by z = 2 or z = 3.\n\nThere are also two ways to move the token from cell 3 to cell 1 via cell 2: first subtract y = 1, and then either subtract y = 1 again or divide by z = 2.\n\nTherefore, there are five ways in total.",
    "public_tests": [
      {
        "input": [
          "5 998244353"
        ],
        "output": [
          "25"
        ]
      },
      {
        "input": [
          "42 998244353"
        ],
        "output": [
          "793019428"
        ]
      },
      {
        "input": [
          "3 998244353"
        ],
        "output": [
          "5"
        ]
      }
    ]
  },
  {
    "index": 69,
    "name": "1561_D2",
    "description": "Note that the memory limit in this problem is lower than in others.\n\nYou have a vertical strip with n cells, numbered consecutively from 1 to n from top to bottom.\n\nYou also have a token that is initially placed in cell n. You will move the token up until it arrives at cell 1.\n\nLet the token be in cell x > 1 at some moment. One shift of the token can have either of the following kinds: \n\n  * Subtraction: you choose an integer y between 1 and x-1, inclusive, and move the token from cell x to cell x - y. \n  * Floored division: you choose an integer z between 2 and x, inclusive, and move the token from cell x to cell ⌊ x/z ⌋ (x divided by z rounded down). \n\n\n\nFind the number of ways to move the token from cell n to cell 1 using one or more shifts, and print it modulo m. Note that if there are several ways to move the token from one cell to another in one shift, all these ways are considered distinct (check example explanation for a better understanding).\n\nInput\n\nThe only line contains two integers n and m (2 ≤ n ≤ 4 ⋅ 10^6; 10^8 < m < 10^9; m is a prime number) — the length of the strip and the modulo.\n\nOutput\n\nPrint the number of ways to move the token from cell n to cell 1, modulo m.\n\nExamples\n\nInput\n\n\n3 998244353\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n5 998244353\n\n\nOutput\n\n\n25\n\n\nInput\n\n\n42 998244353\n\n\nOutput\n\n\n793019428\n\n\nInput\n\n\n787788 100000007\n\n\nOutput\n\n\n94810539\n\nNote\n\nIn the first test, there are three ways to move the token from cell 3 to cell 1 in one shift: using subtraction of y = 2, or using division by z = 2 or z = 3.\n\nThere are also two ways to move the token from cell 3 to cell 1 via cell 2: first subtract y = 1, and then either subtract y = 1 again or divide by z = 2.\n\nTherefore, there are five ways in total.",
    "public_tests": [
      {
        "input": [
          "3 998244353"
        ],
        "output": [
          "5"
        ]
      },
      {
        "input": [
          "42 998244353"
        ],
        "output": [
          "793019428"
        ]
      },
      {
        "input": [
          "787788 100000007"
        ],
        "output": [
          "94810539"
        ]
      },
      {
        "input": [
          "5 998244353"
        ],
        "output": [
          "25"
        ]
      }
    ]
  },
  {
    "index": 70,
    "name": "1562_A",
    "description": "You are given two integers l and r, l≤ r. Find the largest possible value of a mod b over all pairs (a, b) of integers for which r≥ a ≥ b ≥ l.\n\nAs a reminder, a mod b is a remainder we get when dividing a by b. For example, 26 mod 8 = 2.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1≤ t≤ 10^4), denoting the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains two integers l, r (1≤ l ≤ r ≤ 10^9).\n\nOutput\n\nFor every test case, output the largest possible value of a mod b over all pairs (a, b) of integers for which r≥ a ≥ b ≥ l.\n\nExample\n\nInput\n\n\n4\n1 1\n999999999 1000000000\n8 26\n1 999999999\n\n\nOutput\n\n\n0\n1\n12\n499999999\n\nNote\n\nIn the first test case, the only allowed pair is (a, b) = (1, 1), for which a mod b = 1 mod 1 = 0.\n\nIn the second test case, the optimal choice is pair (a, b) = (1000000000, 999999999), for which a mod b = 1.",
    "public_tests": [
      {
        "input": [
          "4",
          "1 1",
          "999999999 1000000000",
          "8 26",
          "1 999999999"
        ],
        "output": [
          "0",
          "1",
          "12",
          "499999999"
        ]
      }
    ]
  },
  {
    "index": 71,
    "name": "1562_B",
    "description": "During the hypnosis session, Nicholas suddenly remembered a positive integer n, which doesn't contain zeros in decimal notation. \n\nSoon, when he returned home, he got curious: what is the maximum number of digits that can be removed from the number so that the number becomes not prime, that is, either composite or equal to one?\n\nFor some numbers doing so is impossible: for example, for number 53 it's impossible to delete some of its digits to obtain a not prime integer. However, for all n in the test cases of this problem, it's guaranteed that it's possible to delete some of their digits to obtain a not prime number.\n\nNote that you cannot remove all the digits from the number.\n\nA prime number is a number that has no divisors except one and itself. A composite is a number that has more than two divisors. 1 is neither a prime nor a composite number.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer k (1 ≤ k ≤ 50) — the number of digits in the number.\n\nThe second line of each test case contains a positive integer n, which doesn't contain zeros in decimal notation (10^{k-1} ≤ n < 10^{k}). It is guaranteed that it is always possible to remove less than k digits to make the number not prime.\n\nIt is guaranteed that the sum of k over all test cases does not exceed 10^4.\n\nOutput\n\nFor every test case, print two numbers in two lines. In the first line print the number of digits, that you have left in the number. In the second line print the digits left after all delitions. \n\nIf there are multiple solutions, print any.\n\nExample\n\nInput\n\n\n7\n3\n237\n5\n44444\n3\n221\n2\n35\n3\n773\n1\n4\n30\n626221626221626221626221626221\n\n\nOutput\n\n\n2\n27\n1\n4\n1\n1\n2\n35\n2\n77\n1\n4\n1\n6\n\nNote\n\nIn the first test case, you can't delete 2 digits from the number 237, as all the numbers 2, 3, and 7 are prime. However, you can delete 1 digit, obtaining a number 27 = 3^3.\n\nIn the second test case, you can delete all digits except one, as 4 = 2^2 is a composite number.",
    "public_tests": [
      {
        "input": [
          "7",
          "3",
          "237",
          "5",
          "44444",
          "3",
          "221",
          "2",
          "35",
          "3",
          "773",
          "1",
          "4",
          "30",
          "626221626221626221626221626221"
        ],
        "output": [
          "2",
          "27",
          "1",
          "4",
          "1",
          "1",
          "2",
          "35",
          "2",
          "77",
          "1",
          "4",
          "1",
          "6"
        ]
      }
    ]
  },
  {
    "index": 72,
    "name": "1562_C",
    "description": "Frodo was caught by Saruman. He tore a pouch from Frodo's neck, shook out its contents —there was a pile of different rings: gold and silver...\n\n\"How am I to tell which is the One?!\" the mage howled.\n\n\"Throw them one by one into the Cracks of Doom and watch when Mordor falls!\" \n\nSomewhere in a parallel Middle-earth, when Saruman caught Frodo, he only found n rings. And the i-th ring was either gold or silver. For convenience Saruman wrote down a binary string s of n characters, where the i-th character was 0 if the i-th ring was gold, and 1 if it was silver.\n\nSaruman has a magic function f, which takes a binary string and returns a number obtained by converting the string into a binary number and then converting the binary number into a decimal number. For example, f(001010) = 10, f(111) = 7, f(11011101) = 221.\n\nSaruman, however, thinks that the order of the rings plays some important role. He wants to find 2 pairs of integers (l_1, r_1), (l_2, r_2), such that:\n\n  * 1 ≤ l_1 ≤ n, 1 ≤ r_1 ≤ n, r_1-l_1+1≥ ⌊ n/2 ⌋ \n  * 1 ≤ l_2 ≤ n, 1 ≤ r_2 ≤ n, r_2-l_2+1≥ ⌊ n/2 ⌋ \n  * Pairs (l_1, r_1) and (l_2, r_2) are distinct. That is, at least one of l_1 ≠ l_2 and r_1 ≠ r_2 must hold.\n  * Let t be the substring s[l_1:r_1] of s, and w be the substring s[l_2:r_2] of s. Then there exists non-negative integer k, such that f(t) = f(w) ⋅ k.\n\n\n\nHere substring s[l:r] denotes s_ls_{l+1}… s_{r-1}s_r, and ⌊ x ⌋ denotes rounding the number down to the nearest integer.\n\nHelp Saruman solve this problem! It is guaranteed that under the constraints of the problem at least one solution exists.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 ≤ n ≤ 2 ⋅ 10^4) — length of the string.\n\nThe second line of each test case contains a non-empty binary string of length n.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor every test case print four integers l_1, r_1, l_2, r_2, which denote the beginning of the first substring, the end of the first substring, the beginning of the second substring, and the end of the second substring, respectively.\n\nIf there are multiple solutions, print any.\n\nExample\n\nInput\n\n\n7\n6\n101111\n9\n111000111\n8\n10000000\n5\n11011\n6\n001111\n3\n101\n30\n100000000000000100000000000000\n\n\nOutput\n\n\n3 6 1 3\n1 9 4 9\n5 8 1 4\n1 5 3 5\n1 6 2 4\n1 2 2 3\n1 15 16 30\n\nNote\n\nIn the first testcase f(t) = f(1111) = 15, f(w) = f(101) = 5.\n\nIn the second testcase f(t) = f(111000111) = 455, f(w) = f(000111) = 7.\n\nIn the third testcase f(t) = f(0000) = 0, f(w) = f(1000) = 8.\n\nIn the fourth testcase f(t) = f(11011) = 27, f(w) = f(011) = 3.\n\nIn the fifth testcase f(t) = f(001111) = 15, f(w) = f(011) = 3.",
    "public_tests": [
      {
        "input": [
          "7",
          "6",
          "101111",
          "9",
          "111000111",
          "8",
          "10000000",
          "5",
          "11011",
          "6",
          "001111",
          "3",
          "101",
          "30",
          "100000000000000100000000000000"
        ],
        "output": [
          "2 6 3 6",
          "4 9 5 9",
          "2 8 3 8",
          "1 3 1 2",
          "1 6 2 6",
          "1 2 1 1",
          "2 30 3 30"
        ]
      }
    ]
  },
  {
    "index": 73,
    "name": "1562_D1",
    "description": "This is the easy version of the problem. The difference between the versions is that the easy version does not require you to output the numbers of the rods to be removed. You can make hacks only if all versions of the problem are solved.\n\nStitch likes experimenting with different machines with his friend Sparky. Today they built another machine.\n\nThe main element of this machine are n rods arranged along one straight line and numbered from 1 to n inclusive. Each of these rods must carry an electric charge quantitatively equal to either 1 or -1 (otherwise the machine will not work). Another condition for this machine to work is that the sign-variable sum of the charge on all rods must be zero.\n\nMore formally, the rods can be represented as an array of n numbers characterizing the charge: either 1 or -1. Then the condition must hold: a_1 - a_2 + a_3 - a_4 + … = 0, or ∑_{i=1}^n (-1)^{i-1} ⋅ a_i = 0.\n\nSparky charged all n rods with an electric current, but unfortunately it happened that the rods were not charged correctly (the sign-variable sum of the charge is not zero). The friends decided to leave only some of the rods in the machine. Sparky has q questions. In the ith question Sparky asks: if the machine consisted only of rods with numbers l_i to r_i inclusive, what minimal number of rods could be removed from the machine so that the sign-variable sum of charges on the remaining ones would be zero? Perhaps the friends got something wrong, and the sign-variable sum is already zero. In that case, you don't have to remove the rods at all.\n\nIf the number of rods is zero, we will assume that the sign-variable sum of charges is zero, that is, we can always remove all rods.\n\nHelp your friends and answer all of Sparky's questions!\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two positive integers n and q (1 ≤ n, q ≤ 3 ⋅ 10^5) — the number of rods and the number of questions.\n\nThe second line of each test case contains a non-empty string s of length n, where the charge of the i-th rod is 1 if s_i is the \"+\" symbol, or -1 if s_i is the \"-\" symbol.\n\nEach next line from the next q lines contains two positive integers l_i ans r_i (1 ≤ l_i ≤ r_i ≤ n) — numbers, describing Sparky's questions.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 ⋅ 10^5, and the sum of q over all test cases does not exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print a single integer — the minimal number of rods that can be removed.\n\nExample\n\nInput\n\n\n3\n14 1\n+--++---++-++-\n1 14\n14 3\n+--++---+++---\n1 14\n6 12\n3 10\n4 10\n+-+-\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n\n\nOutput\n\n\n2\n2\n1\n0\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1\n\nNote\n\nIn the first test case for the first query you can remove the rods numbered 5 and 8, then the following set of rods will remain: +--+--++-++-. It is easy to see that here the sign-variable sum is zero.\n\nIn the second test case:\n\n  * For the first query, we can remove the rods numbered 1 and 11, then the following set of rods will remain: --++---++---. It is easy to see that here the sign-variable sum is zero. \n  * For the second query we can remove the rod numbered 9, then the following set of rods will remain: ---++-. It is easy to see that here the variable sum is zero. \n  * For the third query we can not remove the rods at all. ",
    "public_tests": [
      {
        "input": [
          "3",
          "14 1",
          "+--++---++-++-",
          "1 14",
          "14 3",
          "+--++---+++---",
          "1 14",
          "6 12",
          "3 10",
          "4 10",
          "+-+-",
          "1 1",
          "1 2",
          "1 3",
          "1 4",
          "2 2",
          "2 3",
          "2 4",
          "3 3",
          "3 4",
          "4 4"
        ],
        "output": [
          "2",
          "2",
          "1",
          "0",
          "1",
          "2",
          "1",
          "2",
          "1",
          "2",
          "1",
          "1",
          "2",
          "1"
        ]
      }
    ]
  },
  {
    "index": 74,
    "name": "1562_E",
    "description": "Morning desert sun horizon\n\nRise above the sands of time...\n\nFates Warning, \"Exodus\"\n\nAfter crossing the Windswept Wastes, Ori has finally reached the Windtorn Ruins to find the Heart of the Forest! However, the ancient repository containing this priceless Willow light did not want to open!\n\nOri was taken aback, but the Voice of the Forest explained to him that the cunning Gorleks had decided to add protection to the repository.\n\nThe Gorleks were very fond of the \"string expansion\" operation. They were also very fond of increasing subsequences.\n\nSuppose a string s_1s_2s_3 … s_n is given. Then its \"expansion\" is defined as the sequence of strings s_1, s_1 s_2, ..., s_1 s_2 … s_n, s_2, s_2 s_3, ..., s_2 s_3 … s_n, s_3, s_3 s_4, ..., s_{n-1} s_n, s_n. For example, the \"expansion\" the string 'abcd' will be the following sequence of strings: 'a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd'. \n\nTo open the ancient repository, Ori must find the size of the largest increasing subsequence of the \"expansion\" of the string s. Here, strings are compared lexicographically.\n\nHelp Ori with this task!\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a ≠ b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 10^3), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (1 ≤ n ≤ 5000) — length of the string.\n\nThe second line of each test case contains a non-empty string of length n, which consists of lowercase latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor every test case print one non-negative integer — the answer to the problem.\n\nExample\n\nInput\n\n\n7\n5\nacbac\n8\nacabacba\n12\naaaaaaaaaaaa\n10\nabacabadac\n8\ndcbaabcd\n3\ncba\n6\nsparky\n\n\nOutput\n\n\n9\n17\n12\n29\n14\n3\n9\n\nNote\n\nIn first test case the \"expansion\" of the string is: 'a', 'ac', 'acb', 'acba', 'acbac', 'c', 'cb', 'cba', 'cbac', 'b', 'ba', 'bac', 'a', 'ac', 'c'. The answer can be, for example, 'a', 'ac', 'acb', 'acba', 'acbac', 'b', 'ba', 'bac', 'c'.",
    "public_tests": [
      {
        "input": [
          "7",
          "5",
          "acbac",
          "8",
          "acabacba",
          "12",
          "aaaaaaaaaaaa",
          "10",
          "abacabadac",
          "8",
          "dcbaabcd",
          "3",
          "cba",
          "6",
          "sparky"
        ],
        "output": [
          "9",
          "17",
          "12",
          "29",
          "14",
          "3",
          "9"
        ]
      }
    ]
  },
  {
    "index": 75,
    "name": "1566_A",
    "description": "You are given two positive integers n and s. Find the maximum possible median of an array of n non-negative integers (not necessarily distinct), such that the sum of its elements is equal to s.\n\nA median of an array of integers of length m is the number standing on the ⌈ {m/2} ⌉-th (rounding up) position in the non-decreasing ordering of its elements. Positions are numbered starting from 1. For example, a median of the array [20,40,20,50,50,30] is the ⌈ m/2 ⌉-th element of [20,20,30,40,50,50], so it is 30. There exist other definitions of the median, but in this problem we use the described definition.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nEach test case contains a single line with two integers n and s (1 ≤ n, s ≤ 10^9) — the length of the array and the required sum of the elements.\n\nOutput\n\nFor each test case print a single integer — the maximum possible median.\n\nExample\n\nInput\n\n\n8\n1 5\n2 5\n3 5\n2 1\n7 17\n4 14\n1 1000000000\n1000000000 1\n\n\nOutput\n\n\n5\n2\n2\n0\n4\n4\n1000000000\n0\n\nNote\n\nPossible arrays for the first three test cases (in each array the median is underlined):\n\n  * In the first test case [\\underline{5}] \n  * In the second test case [\\underline{2}, 3] \n  * In the third test case [1, \\underline{2}, 2] ",
    "public_tests": [
      {
        "input": [
          "8",
          "1 5",
          "2 5",
          "3 5",
          "2 1",
          "7 17",
          "4 14",
          "1 1000000000",
          "1000000000 1"
        ],
        "output": [
          "5",
          "2",
          "2",
          "0",
          "4",
          "4",
          "1000000000",
          "0"
        ]
      }
    ]
  },
  {
    "index": 76,
    "name": "1566_B",
    "description": "A binary string is a string that consists of characters 0 and 1.\n\nLet \\operatorname{MEX} of a binary string be the smallest digit among 0, 1, or 2 that does not occur in the string. For example, \\operatorname{MEX} of 001011 is 2, because 0 and 1 occur in the string at least once, \\operatorname{MEX} of 1111 is 0, because 0 and 2 do not occur in the string and 0 < 2.\n\nA binary string s is given. You should cut it into any number of substrings such that each character is in exactly one substring. It is possible to cut the string into a single substring — the whole string.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nWhat is the minimal sum of \\operatorname{MEX} of all substrings pieces can be?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nEach test case contains a single binary string s (1 ≤ |s| ≤ 10^5).\n\nIt's guaranteed that the sum of lengths of s over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a single integer — the minimal sum of \\operatorname{MEX} of all substrings that it is possible to get by cutting s optimally.\n\nExample\n\nInput\n\n\n6\n01\n1111\n01100\n101\n0000\n01010\n\n\nOutput\n\n\n1\n0\n2\n1\n1\n2\n\nNote\n\nIn the first test case the minimal sum is \\operatorname{MEX}(0) + \\operatorname{MEX}(1) = 1 + 0 = 1.\n\nIn the second test case the minimal sum is \\operatorname{MEX}(1111) = 0.\n\nIn the third test case the minimal sum is \\operatorname{MEX}(01100) = 2.",
    "public_tests": [
      {
        "input": [
          "6",
          "01",
          "1111",
          "01100",
          "101",
          "0000",
          "01010"
        ],
        "output": [
          "1",
          "0",
          "2",
          "1",
          "1",
          "2"
        ]
      }
    ]
  },
  {
    "index": 77,
    "name": "1566_C",
    "description": "A binary string is a string that consists of characters 0 and 1. A bi-table is a table that has exactly two rows of equal length, each being a binary string.\n\nLet \\operatorname{MEX} of a bi-table be the smallest digit among 0, 1, or 2 that does not occur in the bi-table. For example, \\operatorname{MEX} for \\begin{bmatrix} 0011\\\\\\ 1010 \\end{bmatrix} is 2, because 0 and 1 occur in the bi-table at least once. \\operatorname{MEX} for \\begin{bmatrix} 111\\\\\\ 111 \\end{bmatrix} is 0, because 0 and 2 do not occur in the bi-table, and 0 < 2.\n\nYou are given a bi-table with n columns. You should cut it into any number of bi-tables (each consisting of consecutive columns) so that each column is in exactly one bi-table. It is possible to cut the bi-table into a single bi-table — the whole bi-table.\n\nWhat is the maximal sum of \\operatorname{MEX} of all resulting bi-tables can be?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of the description of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of columns in the bi-table.\n\nEach of the next two lines contains a binary string of length n — the rows of the bi-table.\n\nIt's guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a single integer — the maximal sum of \\operatorname{MEX} of all bi-tables that it is possible to get by cutting the given bi-table optimally.\n\nExample\n\nInput\n\n\n4\n7\n0101000\n1101100\n5\n01100\n10101\n2\n01\n01\n6\n000000\n111111\n\n\nOutput\n\n\n8\n8\n2\n12\n\nNote\n\nIn the first test case you can cut the bi-table as follows:\n\n  * \\begin{bmatrix} 0\\\\\\ 1 \\end{bmatrix}, its \\operatorname{MEX} is 2.\n  * \\begin{bmatrix} 10\\\\\\ 10 \\end{bmatrix}, its \\operatorname{MEX} is 2.\n  * \\begin{bmatrix} 1\\\\\\ 1 \\end{bmatrix}, its \\operatorname{MEX} is 0.\n  * \\begin{bmatrix} 0\\\\\\ 1 \\end{bmatrix}, its \\operatorname{MEX} is 2.\n  * \\begin{bmatrix} 0\\\\\\ 0 \\end{bmatrix}, its \\operatorname{MEX} is 1.\n  * \\begin{bmatrix} 0\\\\\\ 0 \\end{bmatrix}, its \\operatorname{MEX} is 1.\n\n\n\nThe sum of \\operatorname{MEX} is 8.",
    "public_tests": [
      {
        "input": [
          "4",
          "7",
          "0101000",
          "1101100",
          "5",
          "01100",
          "10101",
          "2",
          "01",
          "01",
          "6",
          "000000",
          "111111"
        ],
        "output": [
          "8",
          "8",
          "2",
          "12"
        ]
      }
    ]
  },
  {
    "index": 78,
    "name": "1566_D1",
    "description": "It is the easy version of the problem. The only difference is that in this version n = 1.\n\nIn the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n. The seats in each row are numbered with consecutive integers from left to right: in the k-th row from m (k - 1) + 1 to m k for all rows 1 ≤ k ≤ n.\n\n1| 2| ⋅⋅⋅| m - 1| m  \n---|---|---|---|---  \nm + 1| m + 2| ⋅⋅⋅| 2 m - 1| 2 m  \n2m + 1| 2m + 2| ⋅⋅⋅| 3 m - 1| 3 m  \n\\vdots| \\vdots| \\ddots| \\vdots| \\vdots  \nm (n - 1) + 1| m (n - 1) + 2| ⋅⋅⋅| n m - 1| n m  \nThe table with seats indices\n\nThere are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm. You should give exactly one seat to each person.\n\nIt is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i-th person has the level of sight a_i. Let's define s_i as the seat index, that will be given to i-th person. You want to give better places for people with lower sight levels, so for any two people i, j such that a_i < a_j it should be satisfied that s_i < s_j.\n\nAfter you will give seats to all people they will start coming to their seats. In the order from 1 to nm, each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat's row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through.\n\nLet's consider an example: m = 5, the person has the seat 4 in the first row, the seats 1, 3, 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2, because he will go through occupied seats 1 and 3.\n\nFind the minimal total inconvenience (the sum of inconveniences of all people), that is possible to have by giving places for all people (all conditions should be satisfied).\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (n = 1, 1 ≤ m ≤ 300) — the number of rows and places in each row respectively.\n\nThe second line of each test case contains n ⋅ m integers a_1, a_2, …, a_{n ⋅ m} (1 ≤ a_i ≤ 10^9), where a_i is the sight level of i-th person.\n\nIt's guaranteed that the sum of n ⋅ m over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a single integer — the minimal total inconvenience that can be achieved.\n\nExample\n\nInput\n\n\n4\n1 3\n1 2 3\n1 5\n2 1 5 3 3\n1 2\n2 1\n1 6\n2 3 2 1 1 1\n\n\nOutput\n\n\n3\n6\n0\n1\n\nNote\n\nIn the first test case, there is a single way to arrange people, because all sight levels are distinct. The first person will sit on the first seat, the second person will sit on the second place, the third person will sit on the third place. So inconvenience of the first person will be 0, inconvenience of the second person will be 1 and inconvenience of the third person will be 2. The total inconvenience is 0 + 1 + 2 = 3.\n\nIn the second test case, people should sit as follows: s_1 = 2, s_2 = 1, s_3 = 5, s_4 = 4, s_5 = 3. The total inconvenience will be 6.",
    "public_tests": [
      {
        "input": [
          "4",
          "1 3",
          "1 2 3",
          "1 5",
          "2 1 5 3 3",
          "1 2",
          "2 1",
          "1 6",
          "2 3 2 1 1 1"
        ],
        "output": [
          "3",
          "6",
          "0",
          "1"
        ]
      }
    ]
  },
  {
    "index": 79,
    "name": "1566_D2",
    "description": "It is the hard version of the problem. The only difference is that in this version 1 ≤ n ≤ 300.\n\nIn the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n. The seats in each row are numbered with consecutive integers from left to right: in the k-th row from m (k - 1) + 1 to m k for all rows 1 ≤ k ≤ n.\n\n1| 2| ⋅⋅⋅| m - 1| m  \n---|---|---|---|---  \nm + 1| m + 2| ⋅⋅⋅| 2 m - 1| 2 m  \n2m + 1| 2m + 2| ⋅⋅⋅| 3 m - 1| 3 m  \n\\vdots| \\vdots| \\ddots| \\vdots| \\vdots  \nm (n - 1) + 1| m (n - 1) + 2| ⋅⋅⋅| n m - 1| n m  \nThe table with seats indices\n\nThere are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm. You should give exactly one seat to each person.\n\nIt is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i-th person has the level of sight a_i. Let's define s_i as the seat index, that will be given to i-th person. You want to give better places for people with lower sight levels, so for any two people i, j such that a_i < a_j it should be satisfied that s_i < s_j.\n\nAfter you will give seats to all people they will start coming to their seats. In the order from 1 to nm, each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat's row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through.\n\nLet's consider an example: m = 5, the person has the seat 4 in the first row, the seats 1, 3, 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2, because he will go through occupied seats 1 and 3.\n\nFind the minimal total inconvenience (the sum of inconveniences of all people), that is possible to have by giving places for all people (all conditions should be satisfied).\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 300) — the number of rows and places in each row respectively.\n\nThe second line of each test case contains n ⋅ m integers a_1, a_2, …, a_{n ⋅ m} (1 ≤ a_i ≤ 10^9), where a_i is the sight level of i-th person.\n\nIt's guaranteed that the sum of n ⋅ m over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a single integer — the minimal total inconvenience that can be achieved.\n\nExample\n\nInput\n\n\n7\n1 2\n1 2\n3 2\n1 1 2 2 3 3\n3 3\n3 4 4 1 1 1 1 1 2\n2 2\n1 1 2 1\n4 2\n50 50 50 50 3 50 50 50\n4 2\n6 6 6 6 2 2 9 6\n2 9\n1 3 3 3 3 3 1 1 3 1 3 1 1 3 3 1 1 3\n\n\nOutput\n\n\n1\n0\n4\n0\n0\n0\n1\n\nNote\n\nIn the first test case, there is a single way to give seats: the first person sits in the first place and the second person — in the second. The total inconvenience is 1.\n\nIn the second test case the optimal seating looks like this: \n\n<image>\n\nIn the third test case the optimal seating looks like this: \n\n<image>\n\nThe number in a cell is the person's index that sits on this place.",
    "public_tests": [
      {
        "input": [
          "7",
          "1 2",
          "1 2",
          "3 2",
          "1 1 2 2 3 3",
          "3 3",
          "3 4 4 1 1 1 1 1 2",
          "2 2",
          "1 1 2 1",
          "4 2",
          "50 50 50 50 3 50 50 50",
          "4 2",
          "6 6 6 6 2 2 9 6",
          "2 9",
          "1 3 3 3 3 3 1 1 3 1 3 1 1 3 3 1 1 3"
        ],
        "output": [
          "1",
          "0",
          "4",
          "0",
          "0",
          "0",
          "1"
        ]
      }
    ]
  },
  {
    "index": 80,
    "name": "1566_E",
    "description": "A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v (different from root) is the previous to v vertex on the shortest path from the root to the vertex v. Children of the vertex v are all vertices for which v is the parent.\n\nA vertex is a leaf if it has no children. We call a vertex a bud, if the following three conditions are satisfied: \n\n  * it is not a root, \n  * it has at least one child, and \n  * all its children are leaves. \n\n\n\nYou are given a rooted tree with n vertices. The vertex 1 is the root. In one operation you can choose any bud with all its children (they are leaves) and re-hang them to any other vertex of the tree. By doing that you delete the edge connecting the bud and its parent and add an edge between the bud and the chosen vertex of the tree. The chosen vertex cannot be the bud itself or any of its children. All children of the bud stay connected to the bud.\n\nWhat is the minimum number of leaves it is possible to get if you can make any number of the above-mentioned operations (possibly zero)?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of the vertices in the given tree.\n\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) meaning that there is an edge between vertices u and v in the tree.\n\nIt is guaranteed that the given graph is a tree.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print a single integer — the minimal number of leaves that is possible to get after some operations.\n\nExample\n\nInput\n\n\n5\n7\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n2\n1 2\n7\n7 3\n1 5\n1 3\n4 6\n4 7\n2 1\n6\n2 1\n2 3\n4 5\n3 4\n3 6\n\n\nOutput\n\n\n2\n2\n1\n2\n1\n\nNote\n\nIn the first test case the tree looks as follows:\n\n<image>\n\nFirstly you can choose a bud vertex 4 and re-hang it to vertex 3. After that you can choose a bud vertex 2 and re-hang it to vertex 7. As a result, you will have the following tree with 2 leaves:\n\n<image>\n\nIt can be proved that it is the minimal number of leaves possible to get.\n\nIn the second test case the tree looks as follows:\n\n<image>\n\nYou can choose a bud vertex 3 and re-hang it to vertex 5. As a result, you will have the following tree with 2 leaves:\n\n<image>\n\nIt can be proved that it is the minimal number of leaves possible to get.",
    "public_tests": [
      {
        "input": [
          "5",
          "7",
          "1 2",
          "1 3",
          "1 4",
          "2 5",
          "2 6",
          "4 7",
          "6",
          "1 2",
          "1 3",
          "2 4",
          "2 5",
          "3 6",
          "2",
          "1 2",
          "7",
          "7 3",
          "1 5",
          "1 3",
          "4 6",
          "4 7",
          "2 1",
          "6",
          "2 1",
          "2 3",
          "4 5",
          "3 4",
          "3 6"
        ],
        "output": [
          "2",
          "2",
          "1",
          "2",
          "1"
        ]
      }
    ]
  },
  {
    "index": 81,
    "name": "1566_F",
    "description": "There are n points and m segments on the coordinate line. The initial coordinate of the i-th point is a_i. The endpoints of the j-th segment are l_j and r_j — left and right endpoints, respectively.\n\nYou can move the points. In one move you can move any point from its current coordinate x to the coordinate x - 1 or the coordinate x + 1. The cost of this move is 1.\n\nYou should move the points in such a way that each segment is visited by at least one point. A point visits the segment [l, r] if there is a moment when its coordinate was on the segment [l, r] (including endpoints).\n\nYou should find the minimal possible total cost of all moves such that all segments are visited.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of points and segments respectively.\n\nThe next line contains n distinct integers a_1, a_2, …, a_n (-10^9 ≤ a_i ≤ 10^9) — the initial coordinates of the points.\n\nEach of the next m lines contains two integers l_j, r_j (-10^9 ≤ l_j ≤ r_j ≤ 10^9) — the left and the right endpoints of the j-th segment.\n\nIt's guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case print a single integer — the minimal total cost of all moves such that all segments are visited.\n\nExample\n\nInput\n\n\n2\n4 11\n2 6 14 18\n0 3\n4 5\n11 15\n3 5\n10 13\n16 16\n1 4\n8 12\n17 19\n7 13\n14 19\n4 12\n-9 -16 12 3\n-20 -18\n-14 -13\n-10 -7\n-3 -1\n0 4\n6 11\n7 9\n8 10\n13 15\n14 18\n16 17\n18 19\n\n\nOutput\n\n\n5\n22\n\nNote\n\nIn the first test case the points can be moved as follows:\n\n  * Move the second point from the coordinate 6 to the coordinate 5. \n  * Move the third point from the coordinate 14 to the coordinate 13. \n  * Move the fourth point from the coordinate 18 to the coordinate 17. \n  * Move the third point from the coordinate 13 to the coordinate 12. \n  * Move the fourth point from the coordinate 17 to the coordinate 16. \n\n\n\nThe total cost of moves is 5. It is easy to see, that all segments are visited by these movements. For example, the tenth segment ([7, 13]) is visited after the second move by the third point.\n\nHere is the image that describes the first test case:\n\n<image>",
    "public_tests": [
      {
        "input": [
          "2",
          "4 11",
          "2 6 14 18",
          "0 3",
          "4 5",
          "11 15",
          "3 5",
          "10 13",
          "16 16",
          "1 4",
          "8 12",
          "17 19",
          "7 13",
          "14 19",
          "4 12",
          "-9 -16 12 3",
          "-20 -18",
          "-14 -13",
          "-10 -7",
          "-3 -1",
          "0 4",
          "6 11",
          "7 9",
          "8 10",
          "13 15",
          "14 18",
          "16 17",
          "18 19"
        ],
        "output": [
          "5",
          "22"
        ]
      }
    ]
  },
  {
    "index": 82,
    "name": "1566_G",
    "description": "You are given an undirected weighted graph, consisting of n vertices and m edges.\n\nSome queries happen with this graph:\n\n  * Delete an existing edge from the graph. \n  * Add a non-existing edge to the graph. \n\n\n\nAt the beginning and after each query, you should find four different vertices a, b, c, d such that there exists a path between a and b, there exists a path between c and d, and the sum of lengths of two shortest paths from a to b and from c to d is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.\n\nInput\n\nThe first line contains two integers n and m (4 ≤ n, m ≤ 10^5) — the number of vertices and edges in the graph respectively.\n\nEach of the next m lines contain three integers v, u, w (1 ≤ v, u ≤ n, v ≠ u, 1 ≤ w ≤ 10^9) — this triple means that there is an edge between vertices v and u with weight w.\n\nThe next line contains a single integer q (0 ≤ q ≤ 10^5) — the number of queries.\n\nThe next q lines contain the queries of two types:\n\n  * 0 v u — this query means deleting an edge between v and u (1 ≤ v, u ≤ n, v ≠ u). It is guaranteed that such edge exists in the graph. \n  * 1 v u w — this query means adding an edge between vertices v and u with weight w (1 ≤ v, u ≤ n, v ≠ u, 1 ≤ w ≤ 10^9). It is guaranteed that there was no such edge in the graph. \n\n\n\nIt is guaranteed that the initial graph does not contain multiple edges.\n\nAt the beginning and after each query, the graph doesn't need to be connected.\n\nIt is guaranteed that at each moment the number of edges will be at least 4. It can be proven, that at each moment there exist some four vertices a, b, c, d such that there exists a path between vertices a and b, and there exists a path between vertices c and d.\n\nOutput\n\nPrint q + 1 integers — the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.\n\nExample\n\nInput\n\n\n6 6\n1 3 6\n4 3 1\n1 4 1\n2 6 4\n2 4 2\n5 4 3\n4\n1 2 5 2\n0 1 4\n0 3 4\n1 6 1 3\n\n\nOutput\n\n\n4\n3\n3\n7\n5\n\nNote\n\nBefore the queries you can choose vertices (a, b) = (3, 2) and (c, d) = (1, 4). The sum of lengths of two shortest paths is 3 + 1 = 4.\n\nAfter the first query you can choose vertices (a, b) = (2, 5) and (c, d) = (1, 4). The sum of lengths of two shortest paths is 2 + 1 = 3.\n\nAfter the second query you can choose vertices (a, b) = (3, 4) and (c, d) = (2, 5). The sum of lengths of two shortest paths is 1 + 2 = 3.\n\nAfter the third query, you can choose vertices (a, b) = (2, 6) and (c, d) = (4, 5). The sum of lengths of two shortest paths is 4 + 3 = 7.\n\nAfter the last query you can choose vertices (a, b) = (1, 6) and (c, d) = (2, 5). The sum of lengths of two shortest paths is 3 + 2 = 5.",
    "public_tests": [
      {
        "input": [
          "6 6",
          "1 3 6",
          "4 3 1",
          "1 4 1",
          "2 6 4",
          "2 4 2",
          "5 4 3",
          "4",
          "1 2 5 2",
          "0 1 4",
          "0 3 4",
          "1 6 1 3"
        ],
        "output": [
          "4",
          "3",
          "3",
          "7",
          "5"
        ]
      }
    ]
  },
  {
    "index": 83,
    "name": "1566_H",
    "description": "This is an interactive problem.\n\nYou are given two integers c and n. The jury has a randomly generated set A of distinct positive integers not greater than c (it is generated from all such possible sets with equal probability). The size of A is equal to n.\n\nYour task is to guess the set A. In order to guess it, you can ask at most ⌈ 0.65 ⋅ c ⌉ queries.\n\nIn each query, you choose a single integer 1 ≤ x ≤ c. As the answer to this query you will be given the [bitwise xor sum](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all y, such that y ∈ A and gcd(x, y) = 1 (i.e. x and y are coprime). If there is no such y this xor sum is equal to 0.\n\nYou can ask all queries at the beginning and you will receive the answers to all your queries. After that, you won't have the possibility to ask queries.\n\nYou should find any set A', such that |A'| = n and A' and A have the same answers for all c possible queries.\n\nInput\n\nFirstly you are given two integers c and n (100 ≤ c ≤ 10^6, 0 ≤ n ≤ c).\n\nInteraction\n\nIn the first line you should print an integer q (0 ≤ q ≤ ⌈ 0.65 ⋅ c ⌉) — the number of queries you want to ask. After that in the same line print q integers x_1, x_2, …, x_q (1 ≤ x_i ≤ c) — the queries.\n\nFor these queries you should read q integers, i-th of them is the answer to the described query for x = x_i.\n\nAfter that you should print n distinct integers A'_1, A'_2, …, A'_n — the set A' you found.\n\nIf there are different sets A' that have the same answers for all possible queries, print any of them.\n\nIf you will ask more than ⌈ 0.65 ⋅ c ⌉ queries or if the queries will be invalid, the interactor will terminate immediately and your program will receive verdict Wrong Answer.\n\nAfter printing the queries and answers do not forget to output end of line and flush the output buffer. Otherwise, you will get the Idleness limit exceeded verdict. To do flush use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * Read documentation for other languages. \n\n\n\nHacks\n\nYou cannot make hacks in this problem.\n\nExample\n\nInput\n\n\n10 6\n\n1 4 2 11 4 4 4\n\n\n\nOutput\n\n\n7 10 2 3 5 7 1 6\n\n1 4 5 6 8 10\n\nNote\n\nThe sample is made only for you to understand the interaction protocol. Your solution will not be tested on the sample.\n\nIn the sample A = \\{1, 4, 5, 6, 8, 10\\}. 7 queries are made, 7 ≤ ⌈ 0.65 ⋅ 10 ⌉ = 7, so the query limit is not exceeded.\n\nAnswers for the queries: \n\n  * For 10: 1 is the only number in the set A coprime with 10, so the answer is 1 \n  * For 2: 1_{10} ⊕ 5_{10} = 001_2 ⊕ 101_2 = 4_{10}, where ⊕ is the bitwise xor \n  * For 3: 1_{10} ⊕ 4_{10} ⊕ 5_{10} ⊕ 8_{10} ⊕ 10_{10} = 0001_2 ⊕ 0100_2 ⊕ 0101_2 ⊕ 1000_2 ⊕ 1010_2 = 2_{10} \n  * For 5: 1_{10} ⊕ 4_{10} ⊕ 6_{10} ⊕ 8_{10} = 0001_2 ⊕ 0100_2 ⊕ 0110_2 ⊕ 1000_2 = 11_{10} \n  * For 7: 1_{10} ⊕ 4_{10} ⊕ 5_{10} ⊕ 6_{10} ⊕ 8_{10} ⊕ 10_{10} = 0001_2 ⊕ 0100_2 ⊕ 0101_2 ⊕ 0110_2 ⊕ 1000_2 ⊕ 1010_2 = 4_{10} \n  * For 1: 1_{10} ⊕ 4_{10} ⊕ 5_{10} ⊕ 6_{10} ⊕ 8_{10} ⊕ 10_{10} = 0001_2 ⊕ 0100_2 ⊕ 0101_2 ⊕ 0110_2 ⊕ 1000_2 ⊕ 1010_2 = 4_{10} \n  * For 6: 1_{10} ⊕ 5_{10} = 0001_2 ⊕ 0101_2 = 4_{10} ",
    "public_tests": [
      {
        "input": [
          "10 6",
          "",
          "1 4 2 11 4 4 4"
        ],
        "output": [
          "7 1 2 3 5 6 7 10"
        ]
      }
    ]
  },
  {
    "index": 84,
    "name": "1567_B",
    "description": "Alice gave Bob two integers a and b (a > 0 and b ≥ 0). Being a curious boy, Bob wrote down an array of non-negative integers with \\operatorname{MEX} value of all elements equal to a and \\operatorname{XOR} value of all elements equal to b.\n\nWhat is the shortest possible length of the array Bob wrote?\n\nRecall that the \\operatorname{MEX} (Minimum EXcluded) of an array is the minimum non-negative integer that does not belong to the array and the \\operatorname{XOR} of an array is the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all the elements of the array.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 5 ⋅ 10^4) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains two integers a and b (1 ≤ a ≤ 3 ⋅ 10^5; 0 ≤ b ≤ 3 ⋅ 10^5) — the \\operatorname{MEX} and \\operatorname{XOR} of the array, respectively.\n\nOutput\n\nFor each test case, output one (positive) integer — the length of the shortest array with \\operatorname{MEX} a and \\operatorname{XOR} b. We can show that such an array always exists.\n\nExample\n\nInput\n\n\n5\n1 1\n2 1\n2 0\n1 10000\n2 10000\n\n\nOutput\n\n\n3\n2\n3\n2\n3\n\nNote\n\nIn the first test case, one of the shortest arrays with \\operatorname{MEX} 1 and \\operatorname{XOR} 1 is [0, 2020, 2021].\n\nIn the second test case, one of the shortest arrays with \\operatorname{MEX} 2 and \\operatorname{XOR} 1 is [0, 1].\n\nIt can be shown that these arrays are the shortest arrays possible.",
    "public_tests": [
      {
        "input": [
          "5",
          "1 1",
          "2 1",
          "2 0",
          "1 10000",
          "2 10000"
        ],
        "output": [
          "3",
          "2",
          "3",
          "2",
          "3"
        ]
      }
    ]
  },
  {
    "index": 85,
    "name": "1567_C",
    "description": "Alice has just learned addition. However, she hasn't learned the concept of \"carrying\" fully — instead of carrying to the next column, she carries to the column two columns to the left.\n\nFor example, the regular way to evaluate the sum 2039 + 2976 would be as shown: \n\n<image>\n\nHowever, Alice evaluates it as shown: \n\n<image>\n\nIn particular, this is what she does: \n\n  * add 9 and 6 to make 15, and carry the 1 to the column two columns to the left, i. e. to the column \"0 9\"; \n  * add 3 and 7 to make 10 and carry the 1 to the column two columns to the left, i. e. to the column \"2 2\"; \n  * add 1, 0, and 9 to make 10 and carry the 1 to the column two columns to the left, i. e. to the column above the plus sign; \n  * add 1, 2 and 2 to make 5; \n  * add 1 to make 1. \n\nThus, she ends up with the incorrect result of 15005.\n\nAlice comes up to Bob and says that she has added two numbers to get a result of n. However, Bob knows that Alice adds in her own way. Help Bob find the number of ordered pairs of positive integers such that when Alice adds them, she will get a result of n. Note that pairs (a, b) and (b, a) are considered different if a ≠ b.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains an integer n (2 ≤ n ≤ 10^9) — the number Alice shows Bob.\n\nOutput\n\nFor each test case, output one integer — the number of ordered pairs of positive integers such that when Alice adds them, she will get a result of n. \n\nExample\n\nInput\n\n\n5\n100\n12\n8\n2021\n10000\n\n\nOutput\n\n\n9\n4\n7\n44\n99\n\nNote\n\nIn the first test case, when Alice evaluates any of the sums 1 + 9, 2 + 8, 3 + 7, 4 + 6, 5 + 5, 6 + 4, 7 + 3, 8 + 2, or 9 + 1, she will get a result of 100. The picture below shows how Alice evaluates 6 + 4: \n\n<image>",
    "public_tests": [
      {
        "input": [
          "5",
          "100",
          "12",
          "8",
          "2021",
          "10000"
        ],
        "output": [
          "9",
          "4",
          "7",
          "44",
          "99"
        ]
      }
    ]
  },
  {
    "index": 86,
    "name": "1567_D",
    "description": "On the board, Bob wrote n positive integers in [base](https://en.wikipedia.org/wiki/Positional_notation#Base_of_the_numeral_system) 10 with sum s (i. e. in decimal numeral system). Alice sees the board, but accidentally interprets the numbers on the board as base-11 integers and adds them up (in base 11).\n\nWhat numbers should Bob write on the board, so Alice's sum is as large as possible?\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.\n\nThe only line of each test case contains two integers s and n (1 ≤ s ≤ 10^9; 1 ≤ n ≤ min(100, s)) — the sum and amount of numbers on the board, respectively. Numbers s and n are given in decimal notation (base 10).\n\nOutput\n\nFor each test case, output n positive integers — the numbers Bob should write on the board, so Alice's sum is as large as possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n6\n97 2\n17 1\n111 4\n100 2\n10 9\n999999 3\n\n\nOutput\n\n\n70 27 \n17 \n3 4 100 4\n10 90\n1 1 2 1 1 1 1 1 1 \n999900 90 9\n\nNote\n\nIn the first test case, 70_{10} + 27_{10} = 97_{10}, and Alice's sum is $$$70_{11} + 27_{11} = 97_{11} = 9 ⋅ 11 + 7 = 106_{10}. (Here x_b represents the number x in base b.) It can be shown that it is impossible for Alice to get a larger sum than 106_{10}$$$.\n\nIn the second test case, Bob can only write a single number on the board, so he must write 17.\n\nIn the third test case, 3_{10} + 4_{10} + 100_{10} + 4_{10} = 111_{10}, and Alice's sum is $$$3_{11} + 4_{11} + 100_{11} + 4_{11} = 110_{11} = 1 ⋅ 11^2 + 1 ⋅ 11 = 132_{10}. It can be shown that it is impossible for Alice to get a larger sum than 132_{10}$$$.",
    "public_tests": [
      {
        "input": [
          "6",
          "97 2",
          "17 1",
          "111 4",
          "100 2",
          "10 9",
          "999999 3"
        ],
        "output": [
          "10 87",
          "17",
          "100 1 1 9",
          "10 90",
          "1 1 1 1 1 1 1 1 2",
          "100000 100000 799999"
        ]
      }
    ]
  },
  {
    "index": 87,
    "name": "1567_E",
    "description": "Alice has recently received an array a_1, a_2, ..., a_n for her birthday! She is very proud of her array, and when she showed her friend Bob the array, he was very happy with her present too!\n\nHowever, soon Bob became curious, and as any sane friend would do, asked Alice to perform q operations of two types on her array:\n\n  * 1 x y: update the element a_x to y (set a_x = y). \n  * 2 l r: calculate how many non-decreasing subarrays exist within the subarray [a_l, a_{l+1}, ..., a_r]. More formally, count the number of pairs of integers (p,q) such that l ≤ p ≤ q ≤ r and a_p ≤ a_{p+1} ≤ ... ≤ a_{q-1} ≤ a_q. \n\n\n\nHelp Alice answer Bob's queries!\n\nInput\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the size of the array, and the number of queries, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of Alice's array.\n\nThe next q lines consist of three integers each. The first integer of the i-th line is t_i, the operation being performed on the i-th step (t_i = 1 or t_i = 2).\n\nIf t_i = 1, the next two integers are x_i and y_i (1 ≤ x_i ≤ n; 1 ≤ y_i ≤ 10^9), updating the element at position x_i to y_i (setting a_{x_i} = y_i).\n\nIf t_i = 2, the next two integers are l_i and r_i (1 ≤ l_i ≤ r_i ≤ n), the two indices Bob asks Alice about for the i-th query.\n\nIt's guaranteed that there is at least one operation of the second type.\n\nOutput\n\nFor each query of type 2, print a single integer, the answer to the query.\n\nExample\n\nInput\n\n\n5 6\n3 1 4 1 5\n2 2 5\n2 1 3\n1 4 4\n2 2 5\n1 2 6\n2 2 5\n\n\nOutput\n\n\n6\n4\n10\n7\n\nNote\n\nFor the first query, l = 2 and r = 5, and the non-decreasing subarrays [p,q] are [2,2], [3,3], [4,4], [5,5], [2,3] and [4,5].",
    "public_tests": [
      {
        "input": [
          "5 6",
          "3 1 4 1 5",
          "2 2 5",
          "2 1 3",
          "1 4 4",
          "2 2 5",
          "1 2 6",
          "2 2 5"
        ],
        "output": [
          "6",
          "4",
          "10",
          "7"
        ]
      }
    ]
  },
  {
    "index": 88,
    "name": "1569_A",
    "description": "You are given a string s, consisting of n letters, each letter is either 'a' or 'b'. The letters in the string are numbered from 1 to n.\n\ns[l; r] is a continuous substring of letters from index l to r of the string inclusive. \n\nA string is called balanced if the number of letters 'a' in it is equal to the number of letters 'b'. For example, strings \"baba\" and \"aabbab\" are balanced and strings \"aaab\" and \"b\" are not.\n\nFind any non-empty balanced substring s[l; r] of string s. Print its l and r (1 ≤ l ≤ r ≤ n). If there is no such substring, then print -1 -1.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of the testcase contains a single integer n (1 ≤ n ≤ 50) — the length of the string.\n\nThe second line of the testcase contains a string s, consisting of n letters, each letter is either 'a' or 'b'.\n\nOutput\n\nFor each testcase print two integers. If there exists a non-empty balanced substring s[l; r], then print l r (1 ≤ l ≤ r ≤ n). Otherwise, print -1 -1.\n\nExample\n\nInput\n\n\n4\n1\na\n6\nabbaba\n6\nabbaba\n9\nbabbabbaa\n\n\nOutput\n\n\n-1 -1\n1 6\n3 6\n2 5\n\nNote\n\nIn the first testcase there are no non-empty balanced subtrings.\n\nIn the second and third testcases there are multiple balanced substrings, including the entire string \"abbaba\" and substring \"baba\".",
    "public_tests": [
      {
        "input": [
          "4",
          "1",
          "a",
          "6",
          "abbaba",
          "6",
          "abbaba",
          "9",
          "babbabbaa"
        ],
        "output": [
          "-1 -1",
          "1 2",
          "1 2",
          "1 2"
        ]
      }
    ]
  },
  {
    "index": 89,
    "name": "1569_B",
    "description": "A chess tournament will be held soon, where n chess players will take part. Every participant will play one game against every other participant. Each game ends in either a win for one player and a loss for another player, or a draw for both players.\n\nEach of the players has their own expectations about the tournament, they can be one of two types:\n\n  1. a player wants not to lose any game (i. e. finish the tournament with zero losses); \n  2. a player wants to win at least one game. \n\n\n\nYou have to determine if there exists an outcome for all the matches such that all the players meet their expectations. If there are several possible outcomes, print any of them. If there are none, report that it's impossible.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 200) — the number of test cases.\n\nThe first line of each test case contains one integer n (2 ≤ n ≤ 50) — the number of chess players.\n\nThe second line contains the string s (|s| = n; s_i ∈ \\{1, 2\\}). If s_i = 1, then the i-th player has expectations of the first type, otherwise of the second type.\n\nOutput\n\nFor each test case, print the answer in the following format:\n\nIn the first line, print NO if it is impossible to meet the expectations of all players.\n\nOtherwise, print YES, and the matrix of size n × n in the next n lines.\n\nThe matrix element in the i-th row and j-th column should be equal to:\n\n  * +, if the i-th player won in a game against the j-th player; \n  * -, if the i-th player lost in a game against the j-th player; \n  * =, if the i-th and j-th players' game resulted in a draw; \n  * X, if i = j. \n\nExample\n\nInput\n\n\n3\n3\n111\n2\n21\n4\n2122\n\n\nOutput\n\n\nYES\nX==\n=X=\n==X\nNO\nYES\nX--+\n+X++\n+-X-\n--+X",
    "public_tests": [
      {
        "input": [
          "3",
          "3",
          "111",
          "2",
          "21",
          "4",
          "2122"
        ],
        "output": [
          "YES",
          "X==",
          "=X=",
          "==X",
          "NO",
          "YES",
          "X=+-",
          "=X==",
          "-=X+",
          "+=-X"
        ]
      }
    ]
  },
  {
    "index": 90,
    "name": "1569_C",
    "description": "n people gathered to hold a jury meeting of the upcoming competition, the i-th member of the jury came up with a_i tasks, which they want to share with each other.\n\nFirst, the jury decides on the order which they will follow while describing the tasks. Let that be a permutation p of numbers from 1 to n (an array of size n where each integer from 1 to n occurs exactly once).\n\nThen the discussion goes as follows:\n\n  * If a jury member p_1 has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped. \n  * If a jury member p_2 has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped. \n  * ... \n  * If a jury member p_n has some tasks left to tell, then they tell one task to others. Otherwise, they are skipped. \n  * If there are still members with tasks left, then the process repeats from the start. Otherwise, the discussion ends. \n\n\n\nA permutation p is nice if none of the jury members tell two or more of their own tasks in a row. \n\nCount the number of nice permutations. The answer may be really large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThe first line of the test case contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — number of jury members.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of problems that the i-th member of the jury came up with.\n\nThe sum of n over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print one integer — the number of nice permutations, taken modulo 998 244 353.\n\nExample\n\nInput\n\n\n4\n2\n1 2\n3\n5 5 5\n4\n1 3 3 7\n6\n3 4 2 1 3 3\n\n\nOutput\n\n\n1\n6\n0\n540\n\nNote\n\nExplanation of the first test case from the example:\n\nThere are two possible permutations, p = [1, 2] and p = [2, 1]. For p = [1, 2], the process is the following:\n\n  1. the first jury member tells a task; \n  2. the second jury member tells a task; \n  3. the first jury member doesn't have any tasks left to tell, so they are skipped; \n  4. the second jury member tells a task. \n\n\n\nSo, the second jury member has told two tasks in a row (in succession), so the permutation is not nice.\n\nFor p = [2, 1], the process is the following:\n\n  1. the second jury member tells a task; \n  2. the first jury member tells a task; \n  3. the second jury member tells a task. \n\n\n\nSo, this permutation is nice.",
    "public_tests": [
      {
        "input": [
          "4",
          "2",
          "1 2",
          "3",
          "5 5 5",
          "4",
          "1 3 3 7",
          "6",
          "3 4 2 1 3 3"
        ],
        "output": [
          "1",
          "6",
          "0",
          "540"
        ]
      }
    ]
  },
  {
    "index": 91,
    "name": "1569_D",
    "description": "There is a city that can be represented as a square grid with corner points in (0, 0) and (10^6, 10^6).\n\nThe city has n vertical and m horizontal streets that goes across the whole city, i. e. the i-th vertical streets goes from (x_i, 0) to (x_i, 10^6) and the j-th horizontal street goes from (0, y_j) to (10^6, y_j). \n\nAll streets are bidirectional. Borders of the city are streets as well.\n\nThere are k persons staying on the streets: the p-th person at point (x_p, y_p) (so either x_p equal to some x_i or y_p equal to some y_j, or both).\n\nLet's say that a pair of persons form an inconvenient pair if the shortest path from one person to another going only by streets is strictly greater than the Manhattan distance between them.\n\nCalculate the number of inconvenient pairs of persons (pairs (x, y) and (y, x) are the same pair).\n\nLet's recall that Manhattan distance between points (x_1, y_1) and (x_2, y_2) is |x_1 - x_2| + |y_1 - y_2|.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains three integers n, m and k (2 ≤ n, m ≤ 2 ⋅ 10^5; 2 ≤ k ≤ 3 ⋅ 10^5) — the number of vertical and horizontal streets and the number of persons.\n\nThe second line of each test case contains n integers x_1, x_2, ..., x_n (0 = x_1 < x_2 < ... < x_{n - 1} < x_n = 10^6) — the x-coordinates of vertical streets.\n\nThe third line contains m integers y_1, y_2, ..., y_m (0 = y_1 < y_2 < ... < y_{m - 1} < y_m = 10^6) — the y-coordinates of horizontal streets.\n\nNext k lines contains description of people. The p-th line contains two integers x_p and y_p (0 ≤ x_p, y_p ≤ 10^6; x_p ∈ \\\\{x_1, ..., x_n\\} or y_p ∈ \\\\{y_1, ..., y_m\\}) — the coordinates of the p-th person. All points are distinct.\n\nIt guaranteed that sum of n doesn't exceed 2 ⋅ 10^5, sum of m doesn't exceed 2 ⋅ 10^5 and sum of k doesn't exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case, print the number of inconvenient pairs.\n\nExample\n\nInput\n\n\n2\n2 2 4\n0 1000000\n0 1000000\n1 0\n1000000 1\n999999 1000000\n0 999999\n5 4 9\n0 1 2 6 1000000\n0 4 8 1000000\n4 4\n2 5\n2 2\n6 3\n1000000 1\n3 8\n5 8\n8 8\n6 8\n\n\nOutput\n\n\n2\n5\n\nNote\n\nThe second test case is pictured below: \n\n<image>\n\nFor example, points 3 and 4 form an inconvenient pair, since the shortest path between them (shown red and equal to 7) is greater than its Manhattan distance (equal to 5).\n\nPoints 3 and 5 also form an inconvenient pair: the shortest path equal to 1000001 (shown green) is greater than the Manhattan distance equal to 999999.\n\nBut points 5 and 9 don't form an inconvenient pair, since the shortest path (shown purple) is equal to its Manhattan distance.",
    "public_tests": [
      {
        "input": [
          "2",
          "2 2 4",
          "0 1000000",
          "0 1000000",
          "1 0",
          "1000000 1",
          "999999 1000000",
          "0 999999",
          "5 4 9",
          "0 1 2 6 1000000",
          "0 4 8 1000000",
          "4 4",
          "2 5",
          "2 2",
          "6 3",
          "1000000 1",
          "3 8",
          "5 8",
          "8 8",
          "6 8"
        ],
        "output": [
          "2",
          "5"
        ]
      }
    ]
  },
  {
    "index": 92,
    "name": "1569_F",
    "description": "You are given a simple undirected graph with n vertices, n is even. You are going to write a letter on each vertex. Each letter should be one of the first k letters of the Latin alphabet.\n\nA path in the graph is called Hamiltonian if it visits each vertex exactly once. A string is called palindromic if it reads the same from left to right and from right to left. A path in the graph is called palindromic if the letters on the vertices in it spell a palindromic string without changing the order.\n\nA string of length n is good if: \n\n  * each letter is one of the first k lowercase Latin letters; \n  * if you write the i-th letter of the string on the i-th vertex of the graph, there will exist a palindromic Hamiltonian path in the graph. \n\n\n\nNote that the path doesn't necesserily go through the vertices in order 1, 2, ..., n.\n\nCount the number of good strings.\n\nInput\n\nThe first line contains three integers n, m and k (2 ≤ n ≤ 12; n is even; 0 ≤ m ≤ (n ⋅ (n-1))/(2); 1 ≤ k ≤ 12) — the number of vertices in the graph, the number of edges in the graph and the number of first letters of the Latin alphabet that can be used.\n\nEach of the next m lines contains two integers v and u (1 ≤ v, u ≤ n; v ≠ u) — the edges of the graph. The graph doesn't contain multiple edges and self-loops.\n\nOutput\n\nPrint a single integer — number of good strings.\n\nExamples\n\nInput\n\n\n4 3 3\n1 2\n2 3\n3 4\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n4 6 3\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n\nOutput\n\n\n21\n\n\nInput\n\n\n12 19 12\n1 3\n2 6\n3 6\n3 7\n4 8\n8 5\n8 7\n9 4\n5 9\n10 1\n10 4\n10 6\n9 10\n11 1\n5 11\n7 11\n12 2\n12 5\n12 11\n\n\nOutput\n\n\n456165084",
    "public_tests": [
      {
        "input": [
          "4 6 3",
          "1 2",
          "1 3",
          "1 4",
          "2 3",
          "2 4",
          "3 4"
        ],
        "output": [
          "21"
        ]
      },
      {
        "input": [
          "4 3 3",
          "1 2",
          "2 3",
          "3 4"
        ],
        "output": [
          "9"
        ]
      },
      {
        "input": [
          "12 19 12",
          "1 3",
          "2 6",
          "3 6",
          "3 7",
          "4 8",
          "8 5",
          "8 7",
          "9 4",
          "5 9",
          "10 1",
          "10 4",
          "10 6",
          "9 10",
          "11 1",
          "5 11",
          "7 11",
          "12 2",
          "12 5",
          "12 11"
        ],
        "output": [
          "456165084"
        ]
      }
    ]
  },
  {
    "index": 93,
    "name": "1572_B",
    "description": "You are given a sequence a of length n consisting of 0s and 1s.\n\nYou can perform the following operation on this sequence: \n\n  * Pick an index i from 1 to n-2 (inclusive). \n  * Change all of a_{i}, a_{i+1}, a_{i+2} to a_{i} ⊕ a_{i+1} ⊕ a_{i+2} simultaneously, where ⊕ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)\n\nFind a sequence of at most n operations that changes all elements of a to 0s or report that it's impossible.\n\nWe can prove that if there exists a sequence of operations of any length that changes all elements of a to 0s, then there is also such a sequence of length not greater than n.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^4).\n\nThe first line of each test case contains a single integer n (3 ≤ n ≤ 2⋅10^5) — the length of a.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (a_i = 0 or a_i = 1) — elements of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2⋅10^5.\n\nOutput\n\nFor each test case, do the following: \n\n  * if there is no way of making all the elements of a equal to 0 after performing the above operation some number of times, print \"NO\". \n  * otherwise, in the first line print \"YES\", in the second line print k (0 ≤ k ≤ n) — the number of operations that you want to perform on a, and in the third line print a sequence b_1, b_2, ..., b_k (1 ≤ b_i ≤ n - 2) — the indices on which the operation should be applied. \n\n\n\nIf there are multiple solutions, you may print any.\n\nExample\n\nInput\n\n\n3\n3\n0 0 0\n5\n1 1 1 1 0\n4\n1 0 0 1\n\n\nOutput\n\n\nYES\n0\nYES\n2\n3 1\nNO\n\nNote\n\nIn the first example, the sequence contains only 0s so we don't need to change anything.\n\nIn the second example, we can transform [1, 1, 1, 1, 0] to [1, 1, 0, 0, 0] and then to [0, 0, 0, 0, 0] by performing the operation on the third element of a and then on the first element of a.\n\nIn the third example, no matter whether we first perform the operation on the first or on the second element of a we will get [1, 1, 1, 1], which cannot be transformed to [0, 0, 0, 0].",
    "public_tests": [
      {
        "input": [
          "3",
          "3",
          "0 0 0",
          "5",
          "1 1 1 1 0",
          "4",
          "1 0 0 1"
        ],
        "output": [
          "YES",
          "0",
          "",
          "YES",
          "2",
          "3 1 ",
          "NO"
        ]
      }
    ]
  },
  {
    "index": 94,
    "name": "1572_C",
    "description": "You are given a 1 by n pixel image. The i-th pixel of the image has color a_i. For each color, the number of pixels of that color is at most 20.\n\nYou can perform the following operation, which works like the bucket tool in paint programs, on this image: \n\n  * pick a color — an integer from 1 to n; \n  * choose a pixel in the image; \n  * for all pixels connected to the selected pixel, change their colors to the selected color (two pixels of the same color are considered connected if all the pixels between them have the same color as those two pixels). \n\n\n\nCompute the minimum number of operations needed to make all the pixels in the image have the same color.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3).\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 3⋅10^3) — the number of pixels in the image.\n\nThe second line of each test case contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ n) — the colors of the pixels in the image.\n\nNote: for each color, the number of pixels of that color is at most 20.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3⋅10^3.\n\nOutput\n\nFor each test case, print one integer: the minimum number of operations needed to make all the pixels in the image have the same color.\n\nExample\n\nInput\n\n\n3\n5\n1 2 3 2 1\n4\n1 1 2 2\n5\n1 2 1 4 2\n\n\nOutput\n\n\n2\n1\n3\n\nNote\n\nIn the first example, the optimal solution is to apply the operation on the third pixel changing its color to 2 and then to apply the operation on any pixel that has color 2 changing its color and the color of all pixels connected to it to 1. The sequence of operations is then: [1, 2, 3, 2, 1] → [1, 2, 2, 2, 1] → [1, 1, 1, 1, 1].\n\nIn the second example, we can either change the 1s to 2s in one operation or change the 2s to 1s also in one operation.\n\nIn the third example, one possible way to make all the pixels have the same color is to apply the operation on the first, third and the fourth pixel each time changing its color to 2.",
    "public_tests": [
      {
        "input": [
          "3",
          "5",
          "1 2 3 2 1",
          "4",
          "1 1 2 2",
          "5",
          "1 2 1 4 2"
        ],
        "output": [
          "2",
          "1",
          "3"
        ]
      }
    ]
  },
  {
    "index": 95,
    "name": "1572_D",
    "description": "There are currently n hot topics numbered from 0 to n-1 at your local bridge club and 2^n players numbered from 0 to 2^n-1. Each player holds a different set of views on those n topics, more specifically, the i-th player holds a positive view on the j-th topic if i\\ \\&\\ 2^j > 0, and a negative view otherwise. Here \\& denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nYou are going to organize a bridge tournament capable of accommodating at most k pairs of players (bridge is played in teams of two people). You can select teams arbitrarily while each player is in at most one team, but there is one catch: two players cannot be in the same pair if they disagree on 2 or more of those n topics, as they would argue too much during the play.\n\nYou know that the i-th player will pay you a_i dollars if they play in this tournament. Compute the maximum amount of money that you can earn if you pair the players in your club optimally.\n\nInput\n\nThe first line contains two integers n, k (1 ≤ n ≤ 20, 1 ≤ k ≤ 200) — the number of hot topics and the number of pairs of players that your tournament can accommodate.\n\nThe second line contains 2^n integers a_0, a_1, ..., a_{2^n-1} (0 ≤ a_i ≤ 10^6) — the amounts of money that the players will pay to play in the tournament.\n\nOutput\n\nPrint one integer: the maximum amount of money that you can earn if you pair the players in your club optimally under the above conditions.\n\nExamples\n\nInput\n\n\n3 1\n8 3 5 7 1 10 3 2\n\n\nOutput\n\n\n13\n\n\nInput\n\n\n2 3\n7 4 5 7\n\n\nOutput\n\n\n23\n\n\nInput\n\n\n3 2\n1 9 1 5 7 8 1 1\n\n\nOutput\n\n\n29\n\nNote\n\nIn the first example, the best we can do is to pair together the 0-th player and the 2-nd player resulting in earnings of 8 + 5 = 13 dollars. Although pairing the 0-th player with the 5-th player would give us 8 + 10 = 18 dollars, we cannot do this because those two players disagree on 2 of the 3 hot topics.\n\nIn the second example, we can pair the 0-th player with the 1-st player and pair the 2-nd player with the 3-rd player resulting in earnings of 7 + 4 + 5 + 7 = 23 dollars.",
    "public_tests": [
      {
        "input": [
          "3 2",
          "1 9 1 5 7 8 1 1"
        ],
        "output": [
          "29"
        ]
      },
      {
        "input": [
          "2 3",
          "7 4 5 7"
        ],
        "output": [
          "23"
        ]
      },
      {
        "input": [
          "3 1",
          "8 3 5 7 1 10 3 2"
        ],
        "output": [
          "13"
        ]
      }
    ]
  },
  {
    "index": 96,
    "name": "1572_E",
    "description": "You are given a strictly convex polygon with n vertices.\n\nYou will make k cuts that meet the following conditions: \n\n  * each cut is a segment that connects two different nonadjacent vertices; \n  * two cuts can intersect only at vertices of the polygon. \n\n\n\nYour task is to maximize the area of the smallest region that will be formed by the polygon and those k cuts.\n\nInput\n\nThe first line contains two integers n, k (3 ≤ n ≤ 200, 0 ≤ k ≤ n-3).\n\nThe following n lines describe vertices of the polygon in anticlockwise direction. The i-th line contains two integers x_i, y_i (|x_i|, |y_i| ≤ 10^8) — the coordinates of the i-th vertex.\n\nIt is guaranteed that the polygon is convex and that no two adjacent sides are parallel.\n\nOutput\n\nPrint one integer: the maximum possible area of the smallest region after making k cuts multiplied by 2.\n\nExamples\n\nInput\n\n\n8 4\n-2 -4\n2 -2\n4 2\n1 5\n0 5\n-4 4\n-5 0\n-5 -1\n\n\nOutput\n\n\n11\n\n\nInput\n\n\n6 3\n2 -2\n2 -1\n1 2\n0 2\n-2 1\n-1 0\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example, it's optimal to make cuts between the following pairs of vertices: \n\n  * (-2, -4) and (4, 2), \n  * (-2, -4) and (1, 5), \n  * (-5, -1) and (1, 5), \n  * (-5, 0) and (0, 5). \n\n<image> Points (-5, -1), (1, 5), (0, 5), (-5, 0) determine the smallest region with double area of 11. \n\nIn the second example, it's optimal to make cuts between the following pairs of vertices: \n\n  * (2, -1) and (0, 2), \n  * (2, -1) and (1, 0), \n  * (-1, 0) and (0, 2). \n\n<image> Points (2, -2), (2, -1), (-1, 0) determine one of the smallest regions with double area of 3. ",
    "public_tests": [
      {
        "input": [
          "6 3",
          "2 -2",
          "2 -1",
          "1 2",
          "0 2",
          "-2 1",
          "-1 0"
        ],
        "output": [
          "3"
        ]
      },
      {
        "input": [
          "8 4",
          "-2 -4",
          "2 -2",
          "4 2",
          "1 5",
          "0 5",
          "-4 4",
          "-5 0",
          "-5 -1"
        ],
        "output": [
          "11"
        ]
      }
    ]
  },
  {
    "index": 97,
    "name": "1572_F",
    "description": "There are n cities in a row numbered from 1 to n.\n\nThe cities will be building broadcasting stations. The station in the i-th city has height h_i and range w_i. It can broadcast information to city j if the following constraints are met: \n\n  * i ≤ j ≤ w_i, and \n  * for each k such that i < k ≤ j, the following condition holds: h_k < h_i. \n\nIn other words, the station in city i can broadcast information to city j if j ≥ i, j is in the range of i-th station, and i is strictly highest on the range from i to j (including city j).\n\nAt the beginning, for every city i, h_i = 0 and w_i = i.\n\nThen q events will take place. During i-th event one of the following will happen: \n\n  * City c_i will rebuild its station so that its height will be strictly highest among all stations and w_{c_i} will be set to g_i. \n  * Let b_j be the number of stations that can broadcast information to city j. Print the sum of b_j over all j satisfying l_i ≤ j ≤ r_i. \n\n\n\nYour task is to react to all events and print answers to all queries.\n\nInput\n\nThe first line contains two integers n and q (1 ≤ n, q ≤ 2⋅10^5) — number of cities and number of events.\n\nThen q lines follow. The i-th line begins with an integer p_i (p_i = 1 or p_i = 2).\n\nIf p_i = 1 a station will be rebuilt. Then two integers c_i and g_i (1 ≤ c_i ≤ g_i ≤ n) follow — the city in which the station is rebuilt and its new broadcasting range.\n\nIf p_i = 2 you are given a query. Then two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ n) follow — the range of cities in the query.\n\nOutput\n\nFor each query, print in a single line the sum of b_j over the given interval.\n\nExamples\n\nInput\n\n\n1 3\n2 1 1\n1 1 1\n2 1 1\n\n\nOutput\n\n\n1\n1\n\n\nInput\n\n\n5 10\n1 3 4\n2 3 5\n1 1 5\n2 1 5\n1 4 5\n2 2 4\n1 2 3\n2 1 3\n1 5 5\n2 2 5\n\n\nOutput\n\n\n4\n10\n5\n4\n5\n\nNote\n\nIn the first test case, only station 1 reaches city 1 before and after it is rebuilt.\n\nIn the second test case, after each rebuild, the array b looks as follows: \n\n  1. [1, 1, 1, 2, 1]; \n  2. [1, 2, 2, 3, 2]; \n  3. [1, 2, 2, 1, 2]; \n  4. [1, 1, 2, 1, 2]; \n  5. [1, 1, 2, 1, 1]. ",
    "public_tests": [
      {
        "input": [
          "5 10",
          "1 3 4",
          "2 3 5",
          "1 1 5",
          "2 1 5",
          "1 4 5",
          "2 2 4",
          "1 2 3",
          "2 1 3",
          "1 5 5",
          "2 2 5"
        ],
        "output": [
          "4",
          "10",
          "5",
          "4",
          "5"
        ]
      },
      {
        "input": [
          "1 3",
          "2 1 1",
          "1 1 1",
          "2 1 1"
        ],
        "output": [
          "1",
          "1"
        ]
      }
    ]
  },
  {
    "index": 98,
    "name": "1573_A",
    "description": "You are given a digital clock with n digits. Each digit shows an integer from 0 to 9, so the whole clock shows an integer from 0 to 10^n-1. The clock will show leading zeroes if the number is smaller than 10^{n-1}.\n\nYou want the clock to show 0 with as few operations as possible. In an operation, you can do one of the following: \n\n  * decrease the number on the clock by 1, or \n  * swap two digits (you can choose which digits to swap, and they don't have to be adjacent). \n\n\n\nYour task is to determine the minimum number of operations needed to make the clock show 0.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10^3).\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 100) — number of digits on the clock.\n\nThe second line of each test case contains a string of n digits s_1, s_2, …, s_n (0 ≤ s_1, s_2, …, s_n ≤ 9) — the number on the clock.\n\nNote: If the number is smaller than 10^{n-1} the clock will show leading zeroes.\n\nOutput\n\nFor each test case, print one integer: the minimum number of operations needed to make the clock show 0.\n\nExample\n\nInput\n\n\n7\n3\n007\n4\n1000\n5\n00000\n3\n103\n4\n2020\n9\n123456789\n30\n001678294039710047203946100020\n\n\nOutput\n\n\n7\n2\n0\n5\n6\n53\n115\n\nNote\n\nIn the first example, it's optimal to just decrease the number 7 times.\n\nIn the second example, we can first swap the first and last position and then decrease the number by 1.\n\nIn the third example, the clock already shows 0, so we don't have to perform any operations.",
    "public_tests": [
      {
        "input": [
          "7",
          "3",
          "007",
          "4",
          "1000",
          "5",
          "00000",
          "3",
          "103",
          "4",
          "2020",
          "9",
          "123456789",
          "30",
          "001678294039710047203946100020"
        ],
        "output": [
          "7",
          "2",
          "0",
          "5",
          "6",
          "53",
          "115"
        ]
      }
    ]
  },
  {
    "index": 99,
    "name": "1573_C",
    "description": "You are given a book with n chapters.\n\nEach chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list.\n\nCurrently you don't understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don't understand some of the required chapters, you don't understand this chapter.\n\nDetermine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 2⋅10^4).\n\nThe first line of each test case contains a single integer n (1 ≤ n ≤ 2⋅10^5) — number of chapters.\n\nThen n lines follow. The i-th line begins with an integer k_i (0 ≤ k_i ≤ n-1) — number of chapters required to understand the i-th chapter. Then k_i integers a_{i,1}, a_{i,2}, ..., a_{i, k_i} (1 ≤ a_{i, j} ≤ n, a_{i, j} ≠ i, a_{i, j} ≠ a_{i, l} for j ≠ l) follow — the chapters required to understand the i-th chapter.\n\nIt is guaranteed that the sum of n and sum of k_i over all testcases do not exceed 2⋅10^5.\n\nOutput\n\nFor each test case, if the entire book can be understood, print how many times you will read it, otherwise print -1.\n\nExample\n\nInput\n\n\n5\n4\n1 2\n0\n2 1 4\n1 2\n5\n1 5\n1 1\n1 2\n1 3\n1 4\n5\n0\n0\n2 1 2\n1 2\n2 2 1\n4\n2 2 3\n0\n0\n2 3 2\n5\n1 2\n1 3\n1 4\n1 5\n0\n\n\nOutput\n\n\n2\n-1\n1\n2\n5\n\nNote\n\nIn the first example, we will understand chapters \\{2, 4\\} in the first reading and chapters \\{1, 3\\} in the second reading of the book.\n\nIn the second example, every chapter requires the understanding of some other chapter, so it is impossible to understand the book.\n\nIn the third example, every chapter requires only chapters that appear earlier in the book, so we can understand everything in one go.\n\nIn the fourth example, we will understand chapters \\{2, 3, 4\\} in the first reading and chapter 1 in the second reading of the book.\n\nIn the fifth example, we will understand one chapter in every reading from 5 to 1.",
    "public_tests": [
      {
        "input": [
          "5",
          "4",
          "1 2",
          "0",
          "2 1 4",
          "1 2",
          "5",
          "1 5",
          "1 1",
          "1 2",
          "1 3",
          "1 4",
          "5",
          "0",
          "0",
          "2 1 2",
          "1 2",
          "2 2 1",
          "4",
          "2 2 3",
          "0",
          "0",
          "2 3 2",
          "5",
          "1 2",
          "1 3",
          "1 4",
          "1 5",
          "0"
        ],
        "output": [
          "2",
          "-1",
          "1",
          "2",
          "5"
        ]
      }
    ]
  },
  {
    "index": 100,
    "name": "1574_B",
    "description": "You are given four integer values a, b, c and m.\n\nCheck if there exists a string that contains: \n\n  * a letters 'A'; \n  * b letters 'B'; \n  * c letters 'C'; \n  * no other letters; \n  * exactly m pairs of adjacent equal letters (exactly m such positions i that the i-th letter is equal to the (i+1)-th one). \n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of testcases.\n\nEach of the next t lines contains the description of the testcase — four integers a, b, c and m (1 ≤ a, b, c ≤ 10^8; 0 ≤ m ≤ 10^8).\n\nOutput\n\nFor each testcase print \"YES\" if there exists a string that satisfies all the requirements. Print \"NO\" if there are no such strings.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n3\n2 2 1 0\n1 1 1 1\n1 2 3 2\n\n\nOutput\n\n\nYES\nNO\nYES\n\nNote\n\nIn the first testcase strings \"ABCAB\" or \"BCABA\" satisfy the requirements. There exist other possible strings.\n\nIn the second testcase there's no way to put adjacent equal letters if there's no letter that appears at least twice.\n\nIn the third testcase string \"CABBCC\" satisfies the requirements. There exist other possible strings.",
    "public_tests": [
      {
        "input": [
          "3",
          "2 2 1 0",
          "1 1 1 1",
          "1 2 3 2"
        ],
        "output": [
          "YES",
          "NO",
          "YES"
        ]
      }
    ]
  },
  {
    "index": 101,
    "name": "1574_C",
    "description": "Recently, Petya learned about a new game \"Slay the Dragon\". As the name suggests, the player will have to fight with dragons. To defeat a dragon, you have to kill it and defend your castle. To do this, the player has a squad of n heroes, the strength of the i-th hero is equal to a_i.\n\nAccording to the rules of the game, exactly one hero should go kill the dragon, all the others will defend the castle. If the dragon's defense is equal to x, then you have to send a hero with a strength of at least x to kill it. If the dragon's attack power is y, then the total strength of the heroes defending the castle should be at least y.\n\nThe player can increase the strength of any hero by 1 for one gold coin. This operation can be done any number of times.\n\nThere are m dragons in the game, the i-th of them has defense equal to x_i and attack power equal to y_i. Petya was wondering what is the minimum number of coins he needs to spend to defeat the i-th dragon.\n\nNote that the task is solved independently for each dragon (improvements are not saved).\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 2 ⋅ 10^5) — number of heroes.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{12}), where a_i is the strength of the i-th hero.\n\nThe third line contains a single integer m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of dragons.\n\nThe next m lines contain two integers each, x_i and y_i (1 ≤ x_i ≤ 10^{12}; 1 ≤ y_i ≤ 10^{18}) — defense and attack power of the i-th dragon.\n\nOutput\n\nPrint m lines, i-th of which contains a single integer — the minimum number of coins that should be spent to defeat the i-th dragon.\n\nExample\n\nInput\n\n\n4\n3 6 2 3\n5\n3 12\n7 9\n4 14\n1 10\n8 7\n\n\nOutput\n\n\n1\n2\n4\n0\n2\n\nNote\n\nTo defeat the first dragon, you can increase the strength of the third hero by 1, then the strength of the heroes will be equal to [3, 6, 3, 3]. To kill the dragon, you can choose the first hero.\n\nTo defeat the second dragon, you can increase the forces of the second and third heroes by 1, then the strength of the heroes will be equal to [3, 7, 3, 3]. To kill the dragon, you can choose a second hero.\n\nTo defeat the third dragon, you can increase the strength of all the heroes by 1, then the strength of the heroes will be equal to [4, 7, 3, 4]. To kill the dragon, you can choose a fourth hero.\n\nTo defeat the fourth dragon, you don't need to improve the heroes and choose a third hero to kill the dragon.\n\nTo defeat the fifth dragon, you can increase the strength of the second hero by 2, then the strength of the heroes will be equal to [3, 8, 2, 3]. To kill the dragon, you can choose a second hero.",
    "public_tests": [
      {
        "input": [
          "4",
          "3 6 2 3",
          "5",
          "3 12",
          "7 9",
          "4 14",
          "1 10",
          "8 7"
        ],
        "output": [
          "1",
          "2",
          "4",
          "0",
          "2"
        ]
      }
    ]
  },
  {
    "index": 102,
    "name": "1574_D",
    "description": "Ivan is playing yet another roguelike computer game. He controls a single hero in the game. The hero has n equipment slots. There is a list of c_i items for the i-th slot, the j-th of them increases the hero strength by a_{i,j}. The items for each slot are pairwise distinct and are listed in the increasing order of their strength increase. So, a_{i,1} < a_{i,2} < ... < a_{i,c_i}.\n\nFor each slot Ivan chooses exactly one item. Let the chosen item for the i-th slot be the b_i-th item in the corresponding list. The sequence of choices [b_1, b_2, ..., b_n] is called a build.\n\nThe strength of a build is the sum of the strength increases of the items in it. Some builds are banned from the game. There is a list of m pairwise distinct banned builds. It's guaranteed that there's at least one build that's not banned.\n\nWhat is the build with the maximum strength that is not banned from the game? If there are multiple builds with maximum strength, print any of them.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10) — the number of equipment slots.\n\nThe i-th of the next n lines contains the description of the items for the i-th slot. First, one integer c_i (1 ≤ c_i ≤ 2 ⋅ 10^5) — the number of items for the i-th slot. Then c_i integers a_{i,1}, a_{i,2}, ..., a_{i,c_i} (1 ≤ a_{i,1} < a_{i,2} < ... < a_{i,c_i} ≤ 10^8).\n\nThe sum of c_i doesn't exceed 2 ⋅ 10^5.\n\nThe next line contains a single integer m (0 ≤ m ≤ 10^5) — the number of banned builds.\n\nEach of the next m lines contains a description of a banned build — a sequence of n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ c_i).\n\nThe builds are pairwise distinct, and there's at least one build that's not banned.\n\nOutput\n\nPrint the build with the maximum strength that is not banned from the game. If there are multiple builds with maximum strength, print any of them.\n\nExamples\n\nInput\n\n\n3\n3 1 2 3\n2 1 5\n3 2 4 6\n2\n3 2 3\n3 2 2\n\n\nOutput\n\n\n2 2 3 \n\n\nInput\n\n\n3\n3 1 2 3\n2 1 5\n3 2 4 6\n2\n3 2 3\n2 2 3\n\n\nOutput\n\n\n1 2 3\n\n\nInput\n\n\n3\n3 1 2 3\n2 1 5\n3 2 4 6\n2\n3 2 3\n2 2 3\n\n\nOutput\n\n\n3 2 2\n\n\nInput\n\n\n4\n1 10\n1 4\n1 7\n1 3\n0\n\n\nOutput\n\n\n1 1 1 1 ",
    "public_tests": [
      {
        "input": [
          "3",
          "3 1 2 3",
          "2 1 5",
          "3 2 4 6",
          "2",
          "3 2 3",
          "2 2 3"
        ],
        "output": [
          "3 2 2"
        ]
      },
      {
        "input": [
          "3",
          "3 1 2 3",
          "2 1 5",
          "3 2 4 6",
          "2",
          "3 2 3",
          "3 2 2"
        ],
        "output": [
          "2 2 3"
        ]
      },
      {
        "input": [
          "4",
          "1 10",
          "1 4",
          "1 7",
          "1 3",
          "0"
        ],
        "output": [
          "1 1 1 1"
        ]
      },
      {
        "input": [
          "3",
          "3 1 2 3",
          "2 1 5",
          "3 2 4 6",
          "2",
          "3 2 3",
          "2 2 3"
        ],
        "output": [
          "3 2 2"
        ]
      }
    ]
  },
  {
    "index": 103,
    "name": "1574_E",
    "description": "A matrix of size n × m, such that each cell of it contains either 0 or 1, is considered beautiful if the sum in every contiguous submatrix of size 2 × 2 is exactly 2, i. e. every \"square\" of size 2 × 2 contains exactly two 1's and exactly two 0's.\n\nYou are given a matrix of size n × m. Initially each cell of this matrix is empty. Let's denote the cell on the intersection of the x-th row and the y-th column as (x, y). You have to process the queries of three types:\n\n  * x y -1 — clear the cell (x, y), if there was a number in it; \n  * x y 0 — write the number 0 in the cell (x, y), overwriting the number that was there previously (if any); \n  * x y 1 — write the number 1 in the cell (x, y), overwriting the number that was there previously (if any). \n\n\n\nAfter each query, print the number of ways to fill the empty cells of the matrix so that the resulting matrix is beautiful. Since the answers can be large, print them modulo 998244353.\n\nInput\n\nThe first line contains three integers n, m and k (2 ≤ n, m ≤ 10^6; 1 ≤ k ≤ 3 ⋅ 10^5) — the number of rows in the matrix, the number of columns, and the number of queries, respectively.\n\nThen k lines follow, the i-th of them contains three integers x_i, y_i, t_i (1 ≤ x_i ≤ n; 1 ≤ y_i ≤ m; -1 ≤ t_i ≤ 1) — the parameters for the i-th query.\n\nOutput\n\nFor each query, print one integer — the number of ways to fill the empty cells of the matrix after the respective query, taken modulo 998244353.\n\nExample\n\nInput\n\n\n2 2 7\n1 1 1\n1 2 1\n2 1 1\n1 1 0\n1 2 -1\n2 1 -1\n1 1 -1\n\n\nOutput\n\n\n3\n1\n0\n1\n2\n3\n6",
    "public_tests": [
      {
        "input": [
          "2 2 7",
          "1 1 1",
          "1 2 1",
          "2 1 1",
          "1 1 0",
          "1 2 -1",
          "2 1 -1",
          "1 1 -1"
        ],
        "output": [
          "3",
          "1",
          "0",
          "1",
          "2",
          "3",
          "6"
        ]
      }
    ]
  },
  {
    "index": 104,
    "name": "1574_F",
    "description": "A subarray of array a from index l to the index r is the array [a_l, a_{l+1}, ..., a_{r}]. The number of occurrences of the array b in the array a is the number of subarrays of a such that they are equal to b.\n\nYou are given n arrays A_1, A_2, ..., A_n; the elements of these arrays are integers from 1 to k. You have to build an array a consisting of m integers from 1 to k in such a way that, for every given subarray A_i, the number of occurrences of A_i in the array a is not less than the number of occurrences of each non-empty subarray of A_i in a. Note that if A_i doesn't occur in a, and no subarray of A_i occurs in a, this condition is still met for A_i.\n\nYour task is to calculate the number of different arrays a you can build, and print it modulo 998244353.\n\nInput\n\nThe first line contains three integers n, m and k (1 ≤ n, m, k ≤ 3 ⋅ 10^5) — the number of the given arrays, the desired length of the array a, and the upper bound on the values in the arrays.\n\nThen n lines follow. The i-th line represents the array A_i. The first integer in the i-th line is c_i (1 ≤ c_i ≤ m) — the number of elements in A_i; then, c_i integers from 1 to k follow — the elements of the array A_i.\n\nAdditional constraint on the input: ∑_{i=1}^n c_i ≤ 3 ⋅ 10^5; i. e., the number of elements in the given arrays in total does not exceed 3 ⋅ 10^5.\n\nOutput\n\nPrint one integer — the number of different arrays a you can build, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n2 4 3\n2 1 2\n1 3\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n2 4 3\n2 1 2\n3 3 2 1\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n1 42 1337\n2 13 31\n\n\nOutput\n\n\n721234447",
    "public_tests": [
      {
        "input": [
          "2 4 3",
          "2 1 2",
          "3 3 2 1"
        ],
        "output": [
          "0"
        ]
      },
      {
        "input": [
          "2 4 3",
          "2 1 2",
          "1 3"
        ],
        "output": [
          "5"
        ]
      },
      {
        "input": [
          "1 42 1337",
          "2 13 31"
        ],
        "output": [
          "721234447"
        ]
      }
    ]
  }
]